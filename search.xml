<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rocket-整合SpringBoot</title>
      <link href="/posts/rocket-family/4/"/>
      <url>/posts/rocket-family/4/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot整合RocketMQ"><a href="#SpringBoot整合RocketMQ" class="headerlink" title="SpringBoot整合RocketMQ"></a>SpringBoot整合RocketMQ</h2><p>创建Maven工程，引入关键依赖：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependencies<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>rocketmq<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.2</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>            <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>                <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>                <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>rocketmq<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>rocketmq<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.9</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.5</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.5</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>junit<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.13</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span>scope<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger<span class="token operator">-</span>ui<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>io<span class="token punctuation">.</span>springfox<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>springfox<span class="token operator">-</span>swagger2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">></span></code></pre><span id="more"></span> <p> 启动类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RocketMQSBApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>RocketMQSBApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 配置文件：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">rocketmq.name-server</span><span class="token punctuation">=</span><span class="token attr-value">192.168.0.128:9876</span><span class="token attr-name">rocketmq.producer.group</span><span class="token punctuation">=</span><span class="token attr-value">springBootGroup</span><span class="token comment" spellcheck="true">#如果这里不配，那就需要在消费者的注解中配。</span><span class="token comment" spellcheck="true">#rocketmq.consumer.topic=</span><span class="token attr-name">rocketmq.consumer.group</span><span class="token punctuation">=</span><span class="token attr-value">testGroup</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9000</span></code></pre><p>声明生产者，直接使用RocketMQTemplate进行消息发送。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>SendResult<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RocketMQTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>support<span class="token punctuation">.</span>RocketMQHeaders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>Message<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>support<span class="token punctuation">.</span>MessageBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RocketMQTemplate rocketMQTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span>String msg<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rocketMQTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费者声明，所有属性通过@RocketMQMessageListener注解声明。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>consumerGroup <span class="token operator">=</span> <span class="token string">"MyConsumerGroup"</span><span class="token punctuation">,</span> topic <span class="token operator">=</span> <span class="token string">"TestTopic"</span><span class="token punctuation">,</span>consumeMode<span class="token operator">=</span> ConsumeMode<span class="token punctuation">.</span>CONCURRENTLY<span class="token punctuation">,</span>messageModel<span class="token operator">=</span> MessageModel<span class="token punctuation">.</span>BROADCASTING<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConsumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received message : "</span><span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：SpringBoot框架中对消息的封装与原生API的消息封装是不一样的。</p><h2 id="如何处理各种消息类型"><a href="#如何处理各种消息类型" class="headerlink" title="如何处理各种消息类型"></a>如何处理各种消息类型</h2><p>1、各种基础的消息发送机制</p><p>2、一个RocketMQTemplate实例只能包含一个生产者，也就只能往一个Topic下发送消息。如果需要往另外一个Topic下发送消息，就需要通过@ExtRocketMQTemplateConfiguration()注解另外声明一个子类实例。</p><p>3、对于事务消息机制，最关键的事务监听器需要通过@RocketMQTransactionListener注解注入到Spring容器当中。在这个注解当中可以通过rocketMQTemplateBeanName属性，指向具体的RocketMQTemplate子类。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="1、Push模式"><a href="#1、Push模式" class="headerlink" title="1、Push模式"></a>1、Push模式</h3><p>Push模式对于@RocketMQMessageListener注解的处理方式，入口在rocketmq-spring-boot-2.2.2.jar中的org.apache.rocketmq.spring.autoconfigure.ListenerContainerConfiguration类中。</p><p>ListenerContainerConfiguration类继承了Spring当中的SmartInitializingSingleton接口，当Spring容器当中所有非懒加载的实例加载完成后，就会触发他的afterSingletonsInstantiated方法进行初始化。在这个方法中会去扫描所有带有注解@RocketMQMessageListener注解的类，将他注册到内部一个Container容器当中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> beans <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBeansWithAnnotation</span><span class="token punctuation">(</span>RocketMQMessageListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>entry <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>ScopedProxyUtils<span class="token punctuation">.</span><span class="token function">isScopedTarget</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">:</span><span class="token operator">:</span>getKey<span class="token punctuation">,</span> Map<span class="token punctuation">.</span>Entry<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    beans<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>registerContainer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里这个Container可以认为是客户端实例的一个容器，通过这个容器来封装RocketMQ的原生API。</p><p>registerContainer关键源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerContainer</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//获取Bean上面的注解</span>    RocketMQMessageListener annotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>RocketMQMessageListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//检查注解的配置情况</span>    <span class="token function">validate</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>    String containerBeanName <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s_%s"</span><span class="token punctuation">,</span> DefaultRocketMQListenerContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GenericApplicationContext genericApplicationContext <span class="token operator">=</span> <span class="token punctuation">(</span>GenericApplicationContext<span class="token punctuation">)</span> applicationContext<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将扫描到的注解转化成为Container，并注册到上下文中。</span>    genericApplicationContext<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span>containerBeanName<span class="token punctuation">,</span> DefaultRocketMQListenerContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">createRocketMQListenerContainer</span><span class="token punctuation">(</span>containerBeanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> annotation<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DefaultRocketMQListenerContainer container <span class="token operator">=</span> genericApplicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>containerBeanName<span class="token punctuation">,</span>        DefaultRocketMQListenerContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动容器，这里就相当于是启动了消费者</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>container<span class="token punctuation">.</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            container<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Started container failed. {}"</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Register the listener to container, listenerBeanName:{}, containerBeanName:{}"</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containerBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>重要方法createRocketMQListenerContainer，里面基本看不到RocketMQ的原生API，都是在创建并维护一个DefaultRocketMQListenerContainer对象</p><p>DefaultRocketMQListenerContainer类实现了InitializingBean接口，要关注他的afterPropertiesSet方法。这是Spring提供的对象初始化的扩展机制。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token function">initRocketMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>messageType <span class="token operator">=</span> <span class="token function">getMessageType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methodParameter <span class="token operator">=</span> <span class="token function">getMethodParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"RocketMQ messageType: {}"</span><span class="token punctuation">,</span> messageType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>initRocketMQPushConsumer方法里就会创建一个RocketMQ原生的DefaultMQPushConsumer消费者。</p><p>关键源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initRocketMQPushConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MQClientException <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//检查并创建consumer对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>rpcHook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">,</span> rpcHook<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AllocateMessageQueueAveragely</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            enableMsgTrace<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>            <span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rocketMQMessageListener<span class="token punctuation">.</span><span class="token function">customizedTraceTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setVipChannelEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Access-key or secret-key not configure in "</span> <span class="token operator">+</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span>consumerGroup<span class="token punctuation">,</span> enableMsgTrace<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rocketMQMessageListener<span class="token punctuation">.</span><span class="token function">customizedTraceTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//定制instanceName</span>    consumer<span class="token punctuation">.</span><span class="token function">setInstanceName</span><span class="token punctuation">(</span>RocketMQUtil<span class="token punctuation">.</span><span class="token function">getInstanceName</span><span class="token punctuation">(</span>nameServer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//设定广播消费还是集群消费</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>messageModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> BROADCASTING<span class="token operator">:</span>            consumer<span class="token punctuation">.</span><span class="token function">setMessageModel</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>heartbeat<span class="token punctuation">.</span>MessageModel<span class="token punctuation">.</span>BROADCASTING<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> CLUSTERING<span class="token operator">:</span>            consumer<span class="token punctuation">.</span><span class="token function">setMessageModel</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>heartbeat<span class="token punctuation">.</span>MessageModel<span class="token punctuation">.</span>CLUSTERING<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Property 'messageModel' was wrong."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//维护消费者的其他属性   </span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//指定Consumer的消费监听 --》在消费监听中就会去调用onMessage方法</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>consumeMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> ORDERLY<span class="token operator">:</span>            consumer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultMessageListenerOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> CONCURRENTLY<span class="token operator">:</span>            consumer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultMessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Property 'consumeMode' was wrong."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、Pull模式"><a href="#2、Pull模式" class="headerlink" title="2、Pull模式"></a>2、Pull模式</h3><p>Pull模式的实现其实是通过在RocketMQTemplate实例中注入一个DefaultLitePullConsumer实例来实现的。只要注入并启动了这个DefaultLitePullConsumer实例后，后续就可以通过template实例的receive方法，来调用DefaultLitePullConsumer的poll方法，主动去Pull获取消息。</p><p>初始化DefaultLitePullConsumer的代码是在rocketmq-spring-boot-2.2.2.jar包中。处理类是org.apache.rocketmq.spring.autoconfigure.RocketMQAutoConfiguration。这个配置类会配置在jar包中的spring.factories文件中，通过SpringBoot的自动装载机制加载进来。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>CONSUMER_BEAN_NAME<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>DefaultLitePullConsumer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"rocketmq"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name-server"</span><span class="token punctuation">,</span> <span class="token string">"consumer.group"</span><span class="token punctuation">,</span> <span class="token string">"consumer.topic"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//解析的springboot配置属性。</span><span class="token keyword">public</span> DefaultLitePullConsumer <span class="token function">defaultLitePullConsumer</span><span class="token punctuation">(</span>RocketMQProperties rocketMQProperties<span class="token punctuation">)</span>        <span class="token keyword">throws</span> MQClientException <span class="token punctuation">{</span>    RocketMQProperties<span class="token punctuation">.</span>Consumer consumerConfig <span class="token operator">=</span> rocketMQProperties<span class="token punctuation">.</span><span class="token function">getConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String nameServer <span class="token operator">=</span> rocketMQProperties<span class="token punctuation">.</span><span class="token function">getNameServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String groupName <span class="token operator">=</span> consumerConfig<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String topicName <span class="token operator">=</span> consumerConfig<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>nameServer<span class="token punctuation">,</span> <span class="token string">"[rocketmq.name-server] must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>groupName<span class="token punctuation">,</span> <span class="token string">"[rocketmq.consumer.group] must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>topicName<span class="token punctuation">,</span> <span class="token string">"[rocketmq.consumer.topic] must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">//创建消费者   </span>    DefaultLitePullConsumer litePullConsumer <span class="token operator">=</span> RocketMQUtil<span class="token punctuation">.</span><span class="token function">createDefaultLitePullConsumer</span><span class="token punctuation">(</span>nameServer<span class="token punctuation">,</span> accessChannel<span class="token punctuation">,</span>            groupName<span class="token punctuation">,</span> topicName<span class="token punctuation">,</span> messageModel<span class="token punctuation">,</span> selectorType<span class="token punctuation">,</span> selectorExpression<span class="token punctuation">,</span> ak<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> pullBatchSize<span class="token punctuation">,</span> useTLS<span class="token punctuation">)</span><span class="token punctuation">;</span>    litePullConsumer<span class="token punctuation">.</span><span class="token function">setEnableMsgTrace</span><span class="token punctuation">(</span>consumerConfig<span class="token punctuation">.</span><span class="token function">isEnableMsgTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    litePullConsumer<span class="token punctuation">.</span><span class="token function">setCustomizedTraceTopic</span><span class="token punctuation">(</span>consumerConfig<span class="token punctuation">.</span><span class="token function">getCustomizedTraceTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    litePullConsumer<span class="token punctuation">.</span><span class="token function">setNamespace</span><span class="token punctuation">(</span>consumerConfig<span class="token punctuation">.</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> litePullConsumer<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>RocketMQUtil.createDefaultLitePullConsumer方法，就是在维护一个DefaultLitePullConsumer实例。这个实例就是RocketMQ的原生API当中提供的拉模式客户端。</p><blockquote><p>实际开发中，拉模式用得比较少。RocketMQ针对拉模式也做了非常多的优化。原本提供了一个DefaultMQPullConsumer类，进行拉模式消息消费，DefaultLitePullConsumer在此基础上做了很多优化。</p></blockquote><h2 id="RocketMQ最佳实践"><a href="#RocketMQ最佳实践" class="headerlink" title="RocketMQ最佳实践"></a>RocketMQ最佳实践</h2><h3 id="1、合理分配Topic、Tag"><a href="#1、合理分配Topic、Tag" class="headerlink" title="1、合理分配Topic、Tag"></a>1、合理分配Topic、Tag</h3><p>一个应用尽可能用一个Topic，而消息子类型则可以用tags来标识。tags可以由应用自由设置，只有生产者在发送消息时设置了tags，消费方在订阅消息时才可以利用tags通过broker做消息过滤：message.setTags(“TagA”)。</p><blockquote><p>Kafka的一大问题是Topic过多，会造成Partition文件过多，影响性能。而RocketMQ中的Topic完全不会对消息转发性能有影响。但是Topic过多，还是会加大RocketMQ的元数据维护的性能消耗。所以在使用时，还是需要对Topic进行合理的分配。</p><p>使用Tag区分消息时，尽量直接使用Tag过滤，不要使用复杂的SQL过滤。因为消息过滤机制虽然可以减少网络IO，但是毕竟会加大Broker端的消息处理压力。所以，消息过滤的逻辑，还是越简单越好。</p></blockquote><h3 id="2、使用Key加快消息索引"><a href="#2、使用Key加快消息索引" class="headerlink" title="2、使用Key加快消息索引"></a>2、使用Key加快消息索引</h3><p>分配好Topic和Tag之后，就需要优化Key属性了，因为Key也可以参与消息过滤。通常建议每个消息要分配一个在业务层面的唯一标识码，设置到Key属性中。这有两个方面的作用：</p><ul><li><p>可以配合Tag进行更精确的消息过滤。</p></li><li><p>RocketMQ的Broker端会为每个消息创建一个哈希索引。应用可以通过topic、key来查询某一条历史的消息内容，以及消息在集群内的处理情况。在管理控制台就可以看到。为了减少哈希索引潜在的哈希冲突问题，所以官方建议，客户端要尽量保证key的唯一性。</p></li></ul><h3 id="3、关注错误消息重试"><a href="#3、关注错误消息重试" class="headerlink" title="3、关注错误消息重试"></a>3、关注错误消息重试</h3><p><img src="/images/mq/dashboard-retry.png" alt="dashboard-retry"></p><p>多关注重试队列，可以及时了解消费者端的运行情况。这个队列中出现了大量的消息，就意味着消费者的运行出现了问题，要及时跟踪进行干预</p><p>RocketMQ默认允许每条消息最多重试16次，每次重试的间隔时间如下：</p><table><thead><tr><th align="center">重试次数</th><th align="center">与上次重试的间隔时间</th><th align="center">重试次数</th><th align="center">与上次重试的间隔时间</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">10 秒</td><td align="center">9</td><td align="center">7 分钟</td></tr><tr><td align="center">2</td><td align="center">30 秒</td><td align="center">10</td><td align="center">8 分钟</td></tr><tr><td align="center">3</td><td align="center">1 分钟</td><td align="center">11</td><td align="center">9 分钟</td></tr><tr><td align="center">4</td><td align="center">2 分钟</td><td align="center">12</td><td align="center">10 分钟</td></tr><tr><td align="center">5</td><td align="center">3 分钟</td><td align="center">13</td><td align="center">20 分钟</td></tr><tr><td align="center">6</td><td align="center">4 分钟</td><td align="center">14</td><td align="center">30 分钟</td></tr><tr><td align="center">7</td><td align="center">5 分钟</td><td align="center">15</td><td align="center">1 小时</td></tr><tr><td align="center">8</td><td align="center">6 分钟</td><td align="center">16</td><td align="center">2 小时</td></tr></tbody></table><blockquote><p>这个重试时间跟延迟消息的延迟级别是对应的。不过取的是延迟级别的后16级别。</p><p>messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</p><p>这个重试时间可以将源码中的org.apache.rocketmq.example.quickstart.Consumer里的消息监听器返回状态改为RECONSUME_LATER测试一下。</p></blockquote><p><strong>重试次数：</strong></p><p>如果消息重试16次后仍然失败，消息将不再投递。转为进入死信队列。</p><p>然后关于这个重试次数，RocketMQ可以进行定制。例如通过consumer.setMaxReconsumeTimes(20);将重试次数设定为20次。当定制的重试次数超过16次后，消息的重试时间间隔均为2小时。</p><p><strong>配置覆盖：</strong></p><p>消息最大重试次数的设置对相同GroupID下的所有Consumer实例有效。并且最后启动的Consumer会覆盖之前启动的Consumer的配置。</p><h3 id="4、手动处理死信队列"><a href="#4、手动处理死信队列" class="headerlink" title="4、手动处理死信队列"></a>4、手动处理死信队列</h3><p>当一条消息消费失败，RocketMQ就会自动进行消息重试。而如果消息超过最大重试次数，RocketMQ就会认为这个消息有问题。但是此时，RocketMQ不会立刻将这个有问题的消息丢弃，而会将其发送到这个消费者组对应的一种特殊队列：死信队列。</p><p>通常，一条消息进入了死信队列，意味着消息在消费处理的过程中出现了比较严重的错误，并且无法自行恢复。此时，一般需要人工去查看死信队列中的消息，对错误原因进行排查。然后对死信消息进行处理，比如转发到正常的Topic重新进行消费，或者丢弃。</p><p>死信队列的名称是%DLQ%+ConsumGroup</p><p><strong>死信队列的特征：</strong></p><ul><li>一个死信队列对应一个ConsumGroup，而不是对应某个消费者实例。</li><li>如果一个ConsumeGroup没有产生死信队列，RocketMQ就不会为其创建相应的死信队列。</li><li>一个死信队列包含了这个ConsumeGroup里的所有死信消息，而不区分该消息属于哪个Topic。</li><li>死信队列中的消息不会再被消费者正常消费。</li><li>死信队列的有效期跟正常消息相同。默认3天，对应broker.conf中的fileReservedTime属性。超过这个最长时间的消息都会被删除，而不管消息是否消费过。</li></ul><blockquote><p>注：默认创建出来的死信队列里面的消息是无法读取的，在控制台和消费者中都无法读取。这是因为这些默认的死信队列，他们的权限perm被设置成了2:禁读(这个权限有三种 2:禁读，4:禁写，6:可读可写)。需要手动将死信队列的权限配置成6，才能被消费(可以通过mqadmin指定或者web控制台)。</p></blockquote><h3 id="5、消费者端进行幂等控制"><a href="#5、消费者端进行幂等控制" class="headerlink" title="5、消费者端进行幂等控制"></a>5、消费者端进行幂等控制</h3><p>在MQ系统中，对于消息幂等有三种实现语义：</p><ul><li>at most once 最多一次：每条消息最多只会被消费一次</li><li>at least once 至少一次：每条消息至少会被消费一次</li><li>exactly once 刚刚好一次：每条消息都只会确定的消费一次</li></ul><p>这三种语义都有他适用的业务场景</p><ul><li><p>at most once是最好保证的。RocketMQ中可以直接用异步发送、sendOneWay等方式就可以保证。</p></li><li><p>at least once这个语义，RocketMQ也有同步发送、事务消息等很多方式能够保证。</p></li><li><p>exactly once是MQ中最理想也是最难保证的一种语义，需要有非常精细的设计才行。RocketMQ只能保证at least once，保证不了exactly once。所以，使用RocketMQ时，需要由业务系统自行保证消息的幂等性</p></li></ul><p>官网描述：</p><blockquote><h3 id="4-Are-messages-delivered-exactly-once"><a href="#4-Are-messages-delivered-exactly-once" class="headerlink" title="4. Are messages delivered exactly once?"></a>4. Are messages delivered exactly once?</h3><p>RocketMQ ensures that all messages are delivered at least once. In most cases, the messages are not repeated.</p></blockquote><p>但是，对于exactly once语义，阿里云上的商业版RocketMQ是明确有API支持的，至于如何实现的不得而知</p><p><strong>消息幂等的必要性</strong></p><p>在互联网应用中，尤其在网络不稳定的情况下，消息队列 RocketMQ 的消息有可能会出现重复，概括情况如下：</p><ul><li><p>发送时消息重复</p><p>当一条消息已被成功发送到服务端并完成持久化，此时出现了网络闪断或者客户端宕机，导致服务端对客户端应答失败。 如果此时生产者意识到消息发送失败并尝试再次发送消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。</p></li><li><p>投递时消息重复</p><p>消息消费的场景下，消息已投递到消费者并完成业务处理，当客户端给服务端反馈应答的时候网络闪断。 为了保证消息至少被消费一次，消息队列 RocketMQ 的服务端将在网络恢复后再次尝试投递之前已被处理过的消息，消费者后续会收到两条内容相同并且 Message ID 也相同的消息。</p></li><li><p>负载均衡时消息重复（包括但不限于网络抖动、Broker 重启以及订阅方应用重启）</p><p>当消息队列 RocketMQ 的 Broker 或客户端重启、扩容或缩容时，会触发 Rebalance，此时消费者可能会收到重复消息。</p></li></ul><p><strong>处理方式</strong></p><p>从上面的分析中，我们知道，在RocketMQ中，是无法保证每个消息只被投递一次的，所以要在业务上自行来保证消息消费的幂等性。</p><p>而要处理这个问题，RocketMQ的每条消息都有一个唯一的MessageId，这个参数在多次投递的过程中是不会改变的，所以业务上可以用这个MessageId来作为判断幂等的关键依据。</p><p>但是，这个MessageId是无法保证全局唯一的，也会有冲突的情况。所以在一些对幂等性要求严格的场景，最好是使用业务上唯一的一个标识比较靠谱。例如订单ID。而这个业务标识可以使用Message的Key来进行传递。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rocket-核心编程模型</title>
      <link href="/posts/rocket-family/3/"/>
      <url>/posts/rocket-family/3/</url>
      
        <content type="html"><![CDATA[<h2 id="RocketMQ的消息模型"><a href="#RocketMQ的消息模型" class="headerlink" title="RocketMQ的消息模型"></a>RocketMQ的消息模型</h2><p><img src="/images/mq/rocket-model.png" alt="rocket-model"></p><span id="more"></span> <h2 id="深入理解RocketMQ的消息模型"><a href="#深入理解RocketMQ的消息模型" class="headerlink" title="深入理解RocketMQ的消息模型"></a>深入理解RocketMQ的消息模型</h2><h3 id="RocketMQ客户端基本流程"><a href="#RocketMQ客户端基本流程" class="headerlink" title="RocketMQ客户端基本流程"></a>RocketMQ客户端基本流程</h3><p> RocketMQ基于Maven提供了客户端的核心依赖：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>rocketmq<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.9</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>简单生产者实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> MQClientException<span class="token punctuation">,</span> InterruptedException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化一个消息生产者</span>        DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"please_rename_unique_group_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定nameserver地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"你的公网IP:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动消息生产者服务</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 创建消息。消息由Topic，Tag和body三个属性组成，其中Body就是消息内容</span>                Message msg <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello RocketMQ "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 发送消息，获取发送结果</span>                SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 消息发送完后，停止消息生产者服务。</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">注意生产者producer启动后不会马上关闭，而是使用后关闭</font></p><p>简单消费者实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> MQClientException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构建一个消息消费者</span>        DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"please_rename_unique_group_name_4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定nameserver地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"你的公网IP:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span>ConsumeFromWhere<span class="token punctuation">.</span>CONSUME_FROM_LAST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 订阅一个感兴趣的话题，这个话题需要与消息的topic一致</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册一个消息回调函数，消费到消息后就会触发回调。</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> ConsumeConcurrentlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> msgs<span class="token punctuation">,</span> ConsumeConcurrentlyContext context<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                msgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>messageExt <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到消息:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动消费者服务</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Consumer Started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">注意消费者启动后没有关闭，而是建立长连接，继续接受后续消息</font></p><p>指定NameServer的方式有两种：（第一种方式的优先级更高）</p><p>1、客户端直接指定，实例代码中的setNameSrvAddr(“**:9876”)</p><p>2、通过读取系统环境变量NAMESRV_ADDR指定<font color="red">，读取环境变量可以不写setNameSrvAddr</font></p><h3 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h3><p>RocketMQ要支持互联网金融场景，需要保证消息安全。</p><p>消息安全的要求：生产者确保将消息发送到Broker上；消费者确保从Broker上正确获取到消息</p><h4 id="消息生产端采用消息确认加多次重试的机制保证消息正常发送到RocketMQ"><a href="#消息生产端采用消息确认加多次重试的机制保证消息正常发送到RocketMQ" class="headerlink" title="消息生产端采用消息确认加多次重试的机制保证消息正常发送到RocketMQ"></a>消息生产端采用消息确认加多次重试的机制保证消息正常发送到RocketMQ</h4><p>针对消息发送的不确定性，封装了三种发送消息的方式</p><ul><li>单向发送</li></ul><p>消息生产者只管往Broker发送消息，而全然不关心Broker端有没有成功接收到消息</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OnewayProducer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"producerGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"你的公网IP:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"Order"</span><span class="token punctuation">,</span> <span class="token string">"tag"</span><span class="token punctuation">,</span> <span class="token string">"order info : orderId = xxx"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>缺点：sendOneway方法没有返回值，如果发送失败，生产者无法补救</p><p>优点：发送消息的效率更高</p><p>适用场景：追求消息发送效率，允许消息丢失的业务场景。比如日志</p><ul><li>同步发送</li></ul><p>消息生产者在往Broker端发送消息后，会阻塞当前线程，等待Broker端的响应结果</p><pre class=" language-java"><code class="language-java">SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> SendStatus <span class="token punctuation">{</span>    SEND_OK<span class="token punctuation">,</span>    FLUSH_DISK_TIMEOUT<span class="token punctuation">,</span>    FLUSH_SLAVE_TIMEOUT<span class="token punctuation">,</span>    SLAVE_NOT_AVAILABLE<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>SEND_OK表示消息已经成功发送到Broker上。其他几种枚举值，表示消息在Broker端处理失败</p><p>注意：如果Broker端返回的SendStatus不是SEND_OK，也并不表示消息就一定不会推送给下游的消费者。仅仅只是表示Broker端并没有完全正确的处理这些消息。因此，如果要重新发送消息，最好要带上唯一的系统标识，这样在消费者端，才能自行做幂等判断。</p><p>缺点：producer在send发出消息，到Broker返回SendResult的过程中，无法做其他的事情</p><p>优点：使用同步发送的机制，可以在消息生产者发送完消息后，对发送失败的消息进行补救。例如重新发送</p><p>总结：同步发送的机制能够很大程度上<font color="red">保证消息发送的安全性</font>。但是，这种同步发送机制的<font color="red">发送效率比较低</font>。毕竟，send方法需要消息在生产者和Broker之间传输一个来回后才能结束。如果网速比较慢，同步发送的耗时就会很长。</p><ul><li>异步发送</li></ul><p>生产者在向Broker发送消息时，会同时注册一个回调函数。接下来生产者并不等待Broker的响应。当Broker端有响应数据过来时，自动触发回调函数进行对应的处理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncProducer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"producerGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"你的公网IP:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"Order"</span><span class="token punctuation">,</span> <span class="token string">"tag"</span><span class="token punctuation">,</span> <span class="token string">"order info : orderId = xxx"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>SendResult sendResult<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单消息发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单消息发送失败，失败原因是："</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当Broker端返回消息处理成功的响应信息SendResult时，就会调用onSuccess方法。当Broker端处理消息超时或者失败时，就会调用onExcetion方法，生产者就可以在onException方法中进行补救措施。</p><p>注意：触发了SendCallback的onException方法同样并不一定就表示消息不会向消费者推送。如果Broker端返回响应信息太慢，超过了超时时间，也会触发onException方法。超时时间默认是3秒，可以通过<strong>producer.setSendMsgTimeout</strong>方法定制。而造成超时的原因则有很多，消息太大造成网络拥堵、网速太慢、Broker端处理太慢等都可能造成消息处理超时。</p><p>另外SendCallback的对应方法被触发之前，生产者不能调用shutdown()方法。如果消息处理完之前，生产者线程就关闭了，生产者的SendCallback对应方法就不会触发。<font color="red">方法触发前调用shutdown会导致反馈接受不到，SendCallback依附于生产者的主线程才能执行</font></p><p>优点：异步发送的机制能够比较好的兼容消息的安全性以及生产者的高吞吐需求，是很多MQ产品都支持的方式</p><h4 id="消息消费者端采用状态确认机制保证消费者一定能正常处理对应的消息"><a href="#消息消费者端采用状态确认机制保证消费者一定能正常处理对应的消息" class="headerlink" title="消息消费者端采用状态确认机制保证消费者一定能正常处理对应的消息"></a>消息消费者端采用状态确认机制保证消费者一定能正常处理对应的消息</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderConsumer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"RedEnvelope"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从上次消费进度开始消费</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span>ConsumeFromWhere<span class="token punctuation">.</span>CONSUME_FROM_LAST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 订阅Order主题</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"Order"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册回调监听器</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> ConsumeConcurrentlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> msgs<span class="token punctuation">,</span> ConsumeConcurrentlyContext context<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s Receive New Messages: %s %n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单服务已启动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>CONSUME_SUCCESS：消息处理结束</p><p>RECONSUME_LATER：消费者没有处理成功，Broker就会过一段时间再发起消息重试。</p><p>为了要兼容重试机制的成功率和性能，RocketMQ设计了一套非常完善的消息重试机制，从而尽可能保证消费者能够正常处理用户的订单信息。</p><p>1、Broker不可能无限制的向消费失败的消费者推送消息。防止浪费集群的性能，Broker会记录每一个消息的重试次数。如果一个消息经过很多次重试后，消费者依然无法正常处理，那么Broker会将这个消息推入到消费者组对应的死信Topic中。可以人工介入对死信Topic中的消息进行补救，也可以直接彻底删除这些消息。RocketMQ默认的最大重试次数是16次。</p><p>2、为了让这些重试的消息不会影响Topic下其他正常的消息，Broker会给每个消费者组设计对应的重试Topic。MessageQueue是一个具有严格FIFO特性的数据结构。如果需要重试的这些消息还是放在原来的MessageQueue中，就会对当前MessageQueue产生阻塞，让其他正常的消息无法处理。RocketMQ的做法是给每个消费者组自动生成一个对应的重试Topic。在消息需要重试时，会先移动到对应的重试Topic中。后续Broker只要从这些重试Topic中不断拿出消息，往消费者组重新推送即可。这样，这些重试的消息有了自己单独的队列，就不会影响到Topic下的其他消息了。</p><p>3、RocketMQ中设定的消费者组都是订阅主题和消费逻辑相同的服务备份，所以当消息重试时，Broker只要往消费者组中随意一个实例推送即可。这是消息重试机制能够正常运行的基础。但是，在客户端的具体实现时，MQDefaultMQConsumer并没有强制规定消费者组不能重复。也就是说，你完全可以实现出一些订阅主题和消费逻辑完全不同的消费者服务，共同组成一个消费组。在这种情况下，RocketMQ不会报错，但是消息的处理逻辑就无法保持一致了。这会给业务带来很大的麻烦。这是在实际应用时需要注意的地方。</p><p>4、Broker端最终只通过消费者组返回的状态来确定消息有没有处理成功。至于消费者组自己的业务执行是否正常，Broker端是没有办法知道的。因此，在实现消费者的业务逻辑时，应该要尽量使用同步实现方式，保证在自己业务处理完成之后再向Broker端返回状态。而应该尽量避免异步的方式处理业务逻辑。</p><p>小结：推送重试次数和重试消息放在单独Topic是MQ做的；开发时尽量让消费者组里订阅同一个Topic做相同处理逻辑，消费者业务逻辑最好采用同步方式，处理成功后再通知Broker防止漏处理</p><h4 id="消费者也可以自行指定起始消费位点"><a href="#消费者也可以自行指定起始消费位点" class="headerlink" title="消费者也可以自行指定起始消费位点"></a>消费者也可以自行指定起始消费位点</h4><p>Broker端通过Consumer返回的状态来推进所属消费者组对应的Offset。但是，这里还是会造成一种分裂，消息最终是由Consumer来处理，但是消息却是由Broker推送过来的，也就是说，Consumer无法确定自己将要处理的是哪些消息。</p><p>对消息队列也一样。虽然Offset完全由Broker进行维护，但是，RocketMQ也允许Consumer自己指定消费位点。核心代码是在Consumer中设定了一个属性ConsumeFromWhere，表示在Consumer启动时，从哪一条消息开始进行消费。</p><p>ConsumerFromWhere并不是直接传入Offset位点，而是可以传入一个ConsumerFromWhere枚举对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> ConsumeFromWhere <span class="token punctuation">{</span>    CONSUME_FROM_LAST_OFFSET<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//从上次消费到的地方开始继续消费</span>    CONSUME_FROM_FIRST_OFFSET<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//从队列的第一条消息开始重新消费</span>    CONSUME_FROM_TIMESTAMP<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从某一个时间点开始重新消费</span><span class="token punctuation">}</span></code></pre><p>如果指定了ConsumerFromWhere.CONSUME_FROM_TIMESTAMP，这就表示要从一个具体的时间开始。具体时间点，需要通过Consumer的另一个属性ConsumerTimestamp。</p><pre class=" language-java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">setConsumerTimestamp</span><span class="token punctuation">(</span><span class="token string">"20131201211205"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="广播消息"><a href="#广播消息" class="headerlink" title="广播消息"></a>广播消息</h3><p><strong>应用场景：</strong></p><p>广播模式和集群模式是RocketMQ的消费者端处理消息最基本的两种模式。</p><p>集群模式下，一个消息，只会被一个消费者组中的多个消费者实例<strong>共同</strong>处理一次。</p><p>广播模式下，一个消息，则会推送给所有消费者实例处理，不再关心消费者组。</p><p><strong>消费者核心代码：</strong></p><pre class=" language-java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">setMessageModel</span><span class="token punctuation">(</span>MessageModel<span class="token punctuation">.</span>BROADCASTING<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>实现思路：</strong></p><p>默认模式(也就是集群模式)下，Broker端会给每个ConsumerGroup维护一个统一的Offset，这个Offset可以保证一个消息，在同一个ConsumerGroup内只会被消费一次。而广播模式的实现方式，是将Offset转移到消费者端自行保管，这样Broker端只管向所有消费者推送消息，而不用负责维护消费进度。</p><p><strong>注意：</strong></p><p>1、Broker端不维护消费进度，意味着，如果消费者处理消息失败了，将无法进行消息重试。</p><p>2、消费者端维护Offset的作用是可以在服务重启时，按照上一次消费的进度，处理后面没有消费过的消息。丢了也不影响服务稳定性。</p><p>实际上，Offset的维护数据是放在 ${user.home}/.rocketmq_offset/${clientIp}${instanceName}/${group}/offsets.json 文件下的。</p><p>消费者端存储广播消费的本地offsets文件的默认缓存目录是 System.getProperty(“user.home”) + File.separator + “.rocketmq_offsets” ，可以通过定制 rocketmq.client.localOffsetStoreDir 系统属性进行修改。</p><p>本地offsets文件在缓存目录中的具体位置与消费者的clientIp 和 instanceName有关。其中instanceName默认是DEFAULT，可以通过定制系统属性rocketmq.client.name进行修改。另外，每个消费者对象也可以单独设定instanceName。</p><p>RocketMQ会通过定时任务不断尝试本地Offsets文件的写入，但是，如果本地Offsets文件写入失败，RocketMQ不会进行任何的补救。</p><p>参考文章：<a href="https://blog.csdn.net/roykingw/article/details/126351010">RocketMQ广播消费本地Offset文件丢失问题探秘</a></p><h3 id="顺序消息机制"><a href="#顺序消息机制" class="headerlink" title="顺序消息机制"></a>顺序消息机制</h3><p><strong>应用场景：</strong></p><p>每一个订单有从下单、锁库存、支付、下物流等几个业务步骤。每个业务步骤都由一个消息生产者通知给下游服务。如何保证对每个订单的业务处理顺序不乱？</p><p><strong>生产者核心代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> orderId <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"OrderTopicTest"</span><span class="token punctuation">,</span> <span class="token string">"order_"</span> <span class="token operator">+</span> orderId<span class="token punctuation">,</span> <span class="token string">"KEY"</span> <span class="token operator">+</span> orderId<span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"order_"</span> <span class="token operator">+</span> orderId <span class="token operator">+</span> <span class="token string">" step "</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> MessageQueue <span class="token function">select</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span> mqs<span class="token punctuation">,</span> Message msg<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Integer id <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>arg<span class="token punctuation">;</span>                <span class="token keyword">int</span> index <span class="token operator">=</span> id <span class="token operator">%</span> mqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过MessageSelector，将orderId相同的消息，都转发到同一个MessageQueue中</p><p><strong>消费者核心代码：</strong></p><pre class=" language-java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ConsumeOrderlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> msgs<span class="token punctuation">,</span> ConsumeOrderlyContext context<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MessageExt msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到消息内容 "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ConsumeOrderlyStatus<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注入一个MessageListenerOrderly实现</p><p><strong>实现思路：</strong></p><p> 1、生产者将一批有顺序要求的消息，放到同一个MesasgeQueue上。</p><p> 2、消费者一次锁定一个MessageQueue，拿到MessageQueue上所有的消息</p><p><strong>注意：</strong></p><p>1、理解局部有序与全局有序。大部分业务场景下，我们需要的其实是局部有序。如果要保持全局有序，那就只保留一个MessageQueue。性能显然非常低。</p><p>2、生产者端尽可能将有序消息打散到不同的MessageQueue上，避免过于集中导致数据热点竞争。</p><p>3、消费者端只能用同步的方式处理消息，不要使用异步处理。更不能自行使用批量处理。</p><p>4、消费者端只进行有限次数的重试。如果一条消息处理失败，RocketMQ会将后续消息阻塞住，让消费者进行重试。但是，如果消费者一直处理失败，超过最大重试次数，那么RocketMQ就会跳过这一条消息，处理后面的消息，这会造成消息乱序。</p><p>5、消费者端如果确实处理逻辑中出现问题，不建议抛出异常，可以返回ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT作为替代。</p><h3 id="延迟消息"><a href="#延迟消息" class="headerlink" title="延迟消息"></a>延迟消息</h3><p>消息发送到Apache RocketMQ后，并不期望立马投递这条消息，而是延迟一定时间后才投递到Consumer进行消费。</p><blockquote><p>RabbitMQ中只能通过使用死信队列变相实现延迟消息，或者加装一个插件来支持延迟消息。 Kafka则不太好实现延迟消息。</p></blockquote><p><strong>生产者核心代码：</strong></p><pre class=" language-java"><code class="language-java">msg<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>只要给消息设定一个延迟级别</p><p>RocketMQ给消息定制了18个默认的延迟级别，分别对应18个不同的预设好的延迟时间。</p><p>messageDelayLevel：1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</p><p><strong>实现思路：</strong></p><p>延迟消息的难点其实是性能，需要不断进行定时轮询。RocketMQ的实现方式是预设一个系统Topic，名字叫做SCHEDULE_TOPIC_XXXX。在这个Topic下，预设18个延迟队列。然后每次只针对这18个队列里的消息进行延迟操作，这样就不用一直扫描所有的消息了</p><p><strong>注意：</strong></p><p>这样预设延迟时间其实是不太灵活的。5.x版本已经支持预设一个具体的时间戳，按秒的精度进行定时发送</p><h3 id="批量消息"><a href="#批量消息" class="headerlink" title="批量消息"></a>批量消息</h3><p><strong>应用场景：</strong></p><p>生产者要发送的消息比较多时，可以将多条消息合并成一个批量消息，一次性发送出去。这样可以减少网络IO，提升消息发送的吞吐量。</p><p><strong>生产者核心代码：</strong></p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Message<span class="token operator">></span> messages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"Tag"</span><span class="token punctuation">,</span> <span class="token string">"OrderID001"</span><span class="token punctuation">,</span> <span class="token string">"Hello world 0"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"Tag"</span><span class="token punctuation">,</span> <span class="token string">"OrderID002"</span><span class="token punctuation">,</span> <span class="token string">"Hello world 1"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"Tag"</span><span class="token punctuation">,</span> <span class="token string">"OrderID003"</span><span class="token punctuation">,</span> <span class="token string">"Hello world 2"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>注意点：</strong></p><p>批量消息使用简单，但是要注意RocketMQ做了限制。同一批消息的Topic必须相同，另外，不支持延迟消息。</p><p>还有批量消息的大小不要超过1M，如果太大就需要自行分割。</p><h3 id="过滤消息"><a href="#过滤消息" class="headerlink" title="过滤消息"></a>过滤消息</h3><p><strong>应用场景：</strong></p><p>同一个Topic下有多种不同的消息，消费者只希望关注某一类消息。</p><p>例如，某系统中给仓储系统分配一个Topic，在Topic下，会传递过来入库、出库等不同的消息，仓储系统的不同业务消费者就需要过滤出自己感兴趣的消息，进行不同的业务操作。</p><p><strong>简单过滤</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 生产者端需要在发送消息时，增加Tag属性</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token string">"TagB"</span><span class="token punctuation">,</span> <span class="token string">"TagC"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TagFilterTest"</span><span class="token punctuation">,</span>        tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"Hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 消费者端通过这个Tag属性订阅</span>consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"TagFilterTest"</span><span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>SQL过滤</strong></p><p>通过Tag属性，只能进行简单的消息匹配。如果要进行更复杂的消息过滤，比如数字比较，模糊匹配等，就需要使用SQL过滤方式。SQL过滤方式可以通过Tag属性以及用户自定义的属性一起，以标准SQL的方式进行消息过滤。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 生产者端在发送消息时，除了Tag属性外，还可以增加自定义属性</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token string">"TagB"</span><span class="token punctuation">,</span> <span class="token string">"TagC"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"SqlFilterTest"</span><span class="token punctuation">,</span>        tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"Hello RocketMQ "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    msg<span class="token punctuation">.</span><span class="token function">putUserProperty</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  消费者端在进行过滤时，可以指定一个标准的SQL语句，定制复杂的过滤规则</span>consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"SqlFilterTest"</span><span class="token punctuation">,</span>            MessageSelector<span class="token punctuation">.</span><span class="token function">bySql</span><span class="token punctuation">(</span><span class="token string">"(TAGS is not null and TAGS in ('TagA', 'TagB'))"</span> <span class="token operator">+</span>                <span class="token string">"and (a is not null and a between 0 and 3)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>实现思路：</strong></p><p>实际上，Tags和用户自定义的属性，都是随着消息一起传递的，所以，消费者端是可以拿到消息的Tags和自定义属性的。</p><pre class=" language-java"><code class="language-java">consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ConsumeConcurrentlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> msgs<span class="token punctuation">,</span>        ConsumeConcurrentlyContext context<span class="token punctuation">)</span>         <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MessageExt msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s Receive New Messages: %s %n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：Broker会在往Consumer推送消息时，在Broker端进行消息过滤</p><p>Tag属性的处理比较简单，就是直接匹配。而SQL语句的处理会比较麻烦一点。RocketMQ也是通过ANLTR引擎来解析SQL语句，然后再进行消息过滤的</p><blockquote><p>ANLTR是一个开源的SQL语句解析框架。很多开源产品都在使用ANLTR来解析SQL语句。比如ShardingSphere，Flink等</p></blockquote><p><strong>注意：</strong></p><p>1、使用Tag过滤时，如果希望匹配多个Tag，可以使用两个竖线(||)连接多个Tag值。另外，也可以使用星号(*)匹配所有。</p><p>2、使用SQL顾虑时，SQL语句是按照SQL92标准来执行的。SQL语句中支持一些常见的基本操作：</p><ul><li>数值比较，比如：**&gt;，&gt;=，&lt;，&lt;=，BETWEEN，=；**</li><li>字符比较，比如：**=，&lt;&gt;，IN；**</li><li><strong>IS NULL</strong> 或者 <strong>IS NOT NULL；</strong></li><li>逻辑符号 <strong>AND，OR，NOT；</strong></li></ul><p>3、消息过滤，其实在Broker端和在Consumer端都可以做。但是RocketMQ会在Broker端完成过滤条件的判断，只将推送Consumer感兴趣的消息。这样的好处是减少了不必要的网络IO，但是缺点是加大了服务端的压力。不过在RocketMQ的良好设计下，更建议使用消息过滤机制。</p><p>4、Consumer不感兴趣的消息并不表示直接丢弃。通常是需要在同一个消费者组，定制另外的消费者实例，消费那些剩下的消息。但是，如果一直没有另外的Consumer，那么，Broker端还是会推进Offset。</p><h3 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h3><p>事务消息是RocketMQ非常有特色的一个高级功能。他的基础诉求是通过RocketMQ的事务机制，来保证上下游的数据一致性。</p><p><strong>实现思路：</strong></p><p><img src="/images/mq/half-msg.png" alt="half-msg"></p><p>1、生产者将消息发送至Apache RocketMQ服务端。</p><p>2、Apache RocketMQ服务端将消息持久化成功之后，向生产者返回Ack确认消息已经发送成功，此时消息被标记为”暂不能投递”，这种状态下的消息即为半事务消息。</p><p>3、生产者开始执行本地事务逻辑。</p><p>4、生产者根据本地事务执行结果向服务端提交二次确认结果（Commit或是Rollback），服务端收到确认结果后处理逻辑如下：</p><ul><li>二次确认结果为Commit：服务端将半事务消息标记为可投递，并投递给消费者。</li><li>二次确认结果为Rollback：服务端将回滚事务，不会将半事务消息投递给消费者。</li></ul><p>5、在断网或者是生产者应用重启的特殊情况下，若服务端未收到发送者提交的二次确认结果，或服务端收到的二次确认结果为Unknown未知状态，经过固定时间后，服务端将对消息生产者即生产者集群中任一生产者实例发起消息回查。</p><p>6、生产者收到消息回查后，需要检查对应消息的本地事务执行的最终结果。</p><p>7、生产者根据检查到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行处理。</p><p><strong>注意：</strong></p><p>1、半消息是对消费者不可见的一种消息。实际上，RocketMQ的做法是将消息转到了一个系统Topic，RMQ_SYS_TRANS_HALF_TOPIC。</p><p>2、事务消息中，本地事务回查次数通过参数transactionCheckMax设定，默认15次。本地事务回查的间隔通过参数transactionCheckInterval设定，默认60秒。超过回查次数后，消息将会被丢弃。</p><p>3、了解事务消息的机制后，在具体执行时，可以对事务流程进行适当的调整。</p><p><img src="/images/mq/half.png" alt="half"></p><h3 id="ACL权限控制机制"><a href="#ACL权限控制机制" class="headerlink" title="ACL权限控制机制"></a>ACL权限控制机制</h3><p><strong>应用场景：</strong></p><p>RocketMQ提供了针对队列、用户等不同维度的非常全面的权限管理机制。通常来说，RocketMQ作为一个内部服务，是不需要进行权限控制的，但是，如果要通过RocketMQ进行跨部门甚至跨公司的合作，权限控制的重要性就显现出来了。</p><p><strong>权限控制体系：</strong></p><p>1、RocketMQ针对每个Topic，就有完整的权限控制。在控制平台中，就可以很方便的给每个Topic配置权限。</p><p> perm字段表示Topic的权限。有三个可选项。 2：禁写禁订阅，4：可订阅，不能写，6：可写可订阅</p><p>2、在Broker端还提供了更详细的权限控制机制。主要是在broker.conf中打开acl的标志：aclEnable=true。然后就可以用他提供的plain_acl.yml来进行权限配置了。并且这个配置文件是热加载的，也就是说要修改配置时，只要修改配置文件就可以了，不用重启Broker服务。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#全局白名单，不受ACL控制</span><span class="token comment" spellcheck="true">#通常需要将主从架构中的所有节点加进来</span><span class="token attr-name">globalWhiteRemoteAddresses</span><span class="token punctuation">:</span><span class="token attr-name">-</span> <span class="token attr-value">10.10.103.*</span><span class="token attr-name">-</span> <span class="token attr-value">192.168.0.*</span><span class="token attr-name">accounts</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#第一个账户</span><span class="token attr-name">-</span> <span class="token attr-value">accessKey: RocketMQ</span><span class="token attr-name">  secretKey</span><span class="token punctuation">:</span> <span class="token attr-value">12345678</span><span class="token attr-name">  whiteRemoteAddress</span><span class="token punctuation">:</span><span class="token attr-name">  admin</span><span class="token punctuation">:</span> <span class="token attr-value">false </span><span class="token attr-name">  defaultTopicPerm</span><span class="token punctuation">:</span> <span class="token attr-value">DENY #默认Topic访问策略是拒绝</span><span class="token attr-name">  defaultGroupPerm</span><span class="token punctuation">:</span> <span class="token attr-value">SUB #默认Group访问策略是只允许订阅</span><span class="token attr-name">  topicPerms</span><span class="token punctuation">:</span><span class="token attr-name">  -</span> <span class="token attr-value">topicA=DENY #topicA拒绝</span><span class="token attr-name">  -</span> <span class="token attr-value">topicB=PUB|SUB #topicB允许发布和订阅消息</span><span class="token attr-name">  -</span> <span class="token attr-value">topicC=SUB #topicC只允许订阅</span><span class="token attr-name">  groupPerms</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">  # the group should convert to retry topic</span><span class="token attr-name">  -</span> <span class="token attr-value">groupA=DENY</span><span class="token attr-name">  -</span> <span class="token attr-value">groupB=PUB|SUB</span><span class="token attr-name">  -</span> <span class="token attr-value">groupC=SUB</span><span class="token comment" spellcheck="true">#第二个账户，只要是来自192.168.1.*的IP，就可以访问所有资源</span><span class="token attr-name">-</span> <span class="token attr-value">accessKey: rocketmq2</span><span class="token attr-name">  secretKey</span><span class="token punctuation">:</span> <span class="token attr-value">12345678</span><span class="token attr-name">  whiteRemoteAddress</span><span class="token punctuation">:</span> <span class="token attr-value">192.168.1.*</span><span class="token comment" spellcheck="true">  # if it is admin, it could access all resources</span><span class="token attr-name">  admin</span><span class="token punctuation">:</span> <span class="token attr-value">true</span></code></pre><p>接下来，在客户端就可以通过accessKey和secretKey提交身份信息了。客户端在使用时，需要先引入一个Maven依赖包</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>     <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>     <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>rocketmq<span class="token operator">-</span>acl<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>     <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.9</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>然后在声明客户端时，传入一个RPCHook</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明时传入RPCHook</span>DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"ProducerGroupName"</span><span class="token punctuation">,</span> <span class="token function">getAclRPCHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ACL_ACCESS_KEY <span class="token operator">=</span> <span class="token string">"RocketMQ"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ACL_SECRET_KEY <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token punctuation">;</span><span class="token keyword">static</span> RPCHook <span class="token function">getAclRPCHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AclClientRPCHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionCredentials</span><span class="token punctuation">(</span>ACL_ACCESS_KEY<span class="token punctuation">,</span>ACL_SECRET_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Rocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rocket-集群搭建</title>
      <link href="/posts/rocket-family/2/"/>
      <url>/posts/rocket-family/2/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建RocketMQ可视化管理服务"><a href="#搭建RocketMQ可视化管理服务" class="headerlink" title="搭建RocketMQ可视化管理服务"></a>搭建RocketMQ可视化管理服务</h2><p>RocketMQ的社区就提供了一个图形化的管理控制台Dashboard，可以用可视化的方式直接观测并管理RocketMQ的运行过程。</p><p>Dashboard服务并不在RocketMQ的运行包中，需要到RocketMQ的官网下载页面单独下载。</p><p><img src="/images/mq/dashboard.png" alt="dashboard"></p><p>这里只提供了源码，并没有提供直接运行的jar包。将源码下载下来后，需要解压并进入对应的目录，使用maven进行编译。</p><pre class=" language-java"><code class="language-java">mvn clean <span class="token keyword">package</span> <span class="token operator">-</span>Dmaven<span class="token punctuation">.</span>test<span class="token punctuation">.</span>skip<span class="token operator">=</span><span class="token boolean">true</span></code></pre><p><font color="red">注意：上面的打包命令要在Linux环境下运行，在windows环境下打包报错</font></p><p>编译完成后，在源码的target目录下会生成可运行的jar包<code>rocketmq-dashboard-1.0.0.jar</code></p><p>接下来将这个jar包移动到<code>/app/rocketmq/rocketmq-dashboard</code>目录下</p><p>在jar包所在的目录下创建一个<code>application.properties</code>配置文件，在配置文件中做如下配置：</p><pre class=" language-java"><code class="language-java">rocketmq<span class="token punctuation">.</span>config<span class="token punctuation">.</span>namesrvAddr<span class="token operator">=</span>你的公网IP<span class="token operator">:</span><span class="token number">9876</span></code></pre><p>这个配置文件中更多的配置选项，可以参考dashboard源码当中的<code>application.properties</code>配置文件</p><p>应用启动完成后，会在服务器上搭建起一个web服务，我们就可以通过访问<code>http://你的公网IP:8080</code>查看到管理页面，云服务要在安全组开放8080端口</p><p><img src="/images/mq/dashboard-1.png" alt="dashboard-1"></p><span id="more"></span> <h2 id="升级分布式集群"><a href="#升级分布式集群" class="headerlink" title="升级分布式集群"></a>升级分布式集群</h2><p>RocketMQ的分布式集群<strong>基于主从架构</strong>搭建。在多个服务器组成的集群中，指定一部分节点作为Master节点，负责响应客户端的请求。指令另一部分节点作为Slave节点，负责备份Master节点上的数据，这样，当Master节点出现故障时，在Slave节点上可以保留有数据备份，至少保证数据不会丢失。</p><p><font color="red">防止单点故障问题，增加从节点备份数据，注意这里的从节点还不能选举为主节点</font></p><p>整个集群方案：</p><p><img src="/images/mq/rocket-cluster.png" alt="rocket-cluster"></p><p>接下来准备三台相同的Linux服务器，搭建RocketMQ的分布式集群。为了更清晰的描述这三台服务器上的操作，给每个服务器指定一个机器名。</p><pre class=" language-shell"><code class="language-shell">cat /etc/hosts192.168.232.128 worker1192.168.232.129 worker2192.168.232.130 worker3</code></pre><p>搭建一个2主2从的RocketMQ集群，并将主节点和节点都分别部署在不同的服务器上。预备的集群规划情况如下：（同一组主从节点放在不同机器上，防止机器宕机导致数据丢失，生产上也是这样做的）</p><table><thead><tr><th>机器名</th><th>nameServer服务部署</th><th>broker服务部署</th></tr></thead><tbody><tr><td>worker1</td><td>nameServer</td><td></td></tr><tr><td>worker2</td><td>nameServer</td><td>broker-a,broker-b-s</td></tr><tr><td>worker3</td><td>nameServer</td><td>broker-a-s,broker-b</td></tr></tbody></table><p><strong>第一步</strong>：部署nameServer服务。</p><p>在三台服务器上都分别部署nameServer服务即可，启动命令简单</p><p>nameServer可以修改端口号（默认9876），在conf下面添加配置文件<code>namesrv.properties</code></p><pre class=" language-java"><code class="language-java"># namesrv<span class="token punctuation">.</span>properties文件内容listenPort<span class="token operator">=</span><span class="token number">9896</span># 启动命令加上 <span class="token operator">-</span>c 指向当前配置文件生效mqnamesrv <span class="token operator">-</span>c <span class="token punctuation">.</span><span class="token punctuation">.</span>/namesrv<span class="token punctuation">.</span>properties# linux启动命令：nohup bin<span class="token operator">/</span>mqnamesrv <span class="token operator">&amp;</span># windows启动命令，进入bin目录执行start mqnamesrv<span class="token punctuation">.</span>cmd</code></pre><p>参考文章：<a href="https://blog.csdn.net/qq_45872465/article/details/122961677">Windows部署RocketMQ(超详细)-CSDN博客</a></p><p><strong>第二步</strong>：对Broker服务进行集群配置。</p><p>这里需要修改RocketMQ的配置文件，对broker服务做一些集群相关的参数部署。在RocketMQ运行包的conf目录下，提供了多种集群的部署配置文件模板。</p><ul><li>2m-noslave: 2主无从的集群参考配置。这种集群<strong>存在单点故障</strong>。</li><li>2m-2s-async和2m-2s-sync: 2主2从的集群参考配置。其中async和sync表示主节点与从节点之间是同步同步还是异步同步。</li><li>dledger: 具备<strong>主从切换功能</strong>的高可用集群。集群中的节点会基于Raft协议随机选举出一个Leader，其作用类似于Master节点。其他的节点都是follower，其作用类似于Slave节点。</li></ul><p>我们这次采用2m-2s-async的方式搭建集群，需要在worker2和worker3上修改这个文件夹下的配置文件。</p><p>1、配置第一组broker-a服务</p><p>在worker2机器上配置broker-a的MASTER服务，修改conf/2m-2s-async/broker-a.properties。示例配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#所属集群名字，名字一样的节点就在同一个集群内</span><span class="token attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token attr-value">rocketmq-cluster</span><span class="token comment" spellcheck="true">#broker名字，名字一样的节点就是一组主从节点。</span><span class="token attr-name">brokerName</span><span class="token punctuation">=</span><span class="token attr-value">broker-a</span><span class="token comment" spellcheck="true">#brokerid,0就表示是Master，>0的都是表示 Slave</span><span class="token attr-name">brokerId</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">#nameServer地址，分号分割</span><span class="token attr-name">namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">worker1:9876;worker2:9876;worker3:9876</span><span class="token comment" spellcheck="true">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><span class="token attr-name">autoCreateTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#凌晨4点开始删除文件</span><span class="token attr-name">deleteWhen</span><span class="token punctuation">=</span><span class="token attr-value">04</span><span class="token comment" spellcheck="true">#日志时间过多久删除</span><span class="token attr-name">fileReservedTime</span><span class="token punctuation">=</span><span class="token attr-value">120</span><span class="token comment" spellcheck="true">#存储路径</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store</span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/commitlog</span><span class="token attr-name">storePathConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/consumequeue</span><span class="token attr-name">storePathIndex</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/index</span><span class="token attr-name">storeCheckpoint</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/checkpoint</span><span class="token attr-name">abortFile</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/abort</span><span class="token comment" spellcheck="true">#Broker 的角色</span><span class="token attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_MASTER</span><span class="token comment" spellcheck="true">#异步刷盘，消息到达broker后是否立刻写入磁盘</span><span class="token attr-name">flushDiskType</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_FLUSH</span><span class="token comment" spellcheck="true">#Broker 对外服务的监听端口</span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">10911</span></code></pre><p>重点关注的属性介绍：</p><ul><li>brokerClusterName: 集群名。RocketMQ会将同一个局域网下所有brokerClusterName相同的服务自动组成一个集群，这个集群可以作为一个整体对外提供服务</li><li>brokerName: Broker服务名。同一个RocketMQ集群当中，brokerName相同的多个服务会有一套相同的数据副本。同一个RocketMQ集群中，是可以将消息分散存储到多个不同的brokerName服务上的。</li><li>brokerId: RocketMQ中对每个服务的唯一标识。RocketMQ对brokerId定义了一套简单的规则，master节点需要固定配置为0，负责响应客户端的请求。slave节点配置成其他任意数字，负责备份master上的消息。</li><li>brokerRole: 服务的角色。这个属性有三个可选项：ASYNC_MASTER，SYNC_MASTER和SLAVE。其中，ASYNC_MASTER和SYNC_MASTER表示当前节点是master节点，目前暂时不用关心他们的区别。SLAVE则表示从节点。</li><li>namesrvAddr: nameserver服务的地址。nameserver服务默认占用9876端口。多个nameserver地址用；隔开。</li></ul><p>接下来在worekr3上配置broker-a的SLAVE服务。修改conf/2m-2s-async/broker-a-s.properties。示例配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#所属集群名字，名字一样的节点就在同一个集群内</span><span class="token attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token attr-value">rocketmq-cluster</span><span class="token comment" spellcheck="true">#broker名字，名字一样的节点就是一组主从节点。</span><span class="token attr-name">brokerName</span><span class="token punctuation">=</span><span class="token attr-value">broker-a</span><span class="token comment" spellcheck="true">#brokerid,0就表示是Master，>0的都是表示 Slave</span><span class="token attr-name">brokerId</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">#nameServer地址，分号分割</span><span class="token attr-name">namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">worker1:9876;worker2:9876;worker3:9876</span><span class="token comment" spellcheck="true">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><span class="token attr-name">autoCreateTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">deleteWhen</span><span class="token punctuation">=</span><span class="token attr-value">04</span><span class="token attr-name">fileReservedTime</span><span class="token punctuation">=</span><span class="token attr-value">120</span><span class="token comment" spellcheck="true">#存储路径</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave</span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/commitlog</span><span class="token attr-name">storePathConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/consumequeue</span><span class="token attr-name">storePathIndex</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/index</span><span class="token attr-name">storeCheckpoint</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/checkpoint</span><span class="token attr-name">abortFile</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/abort</span><span class="token comment" spellcheck="true">#Broker 的角色</span><span class="token attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token attr-value">SLAVE</span><span class="token attr-name">flushDiskType</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_FLUSH</span><span class="token comment" spellcheck="true">#Broker 对外服务的监听端口</span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">11011</span></code></pre><p>注意brokerClusterName和brokerName两个参数需要与worker2上对应的broker-a.properties配置匹配。brokerId配置0以外的数字。然后brokerRole配置为SLAVE。</p><p>2、配置第二组borker-b服务</p><p>与第一组broker-a服务的配置方式类似，在worker3上配置broker-b的MASTER服务。修改conf/2m-2s-async/broker-b.properties文件，配置示例：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#所属集群名字，名字一样的节点就在同一个集群内</span><span class="token attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token attr-value">rocketmq-cluster</span><span class="token comment" spellcheck="true">#broker名字，名字一样的节点就是一组主从节点。</span><span class="token attr-name">brokerName</span><span class="token punctuation">=</span><span class="token attr-value">broker-b</span><span class="token comment" spellcheck="true">#brokerid,0就表示是Master，>0的都是表示 Slave</span><span class="token attr-name">brokerId</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">#nameServer地址，分号分割</span><span class="token attr-name">namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">worker1:9876;worker2:9876;worker3:9876</span><span class="token comment" spellcheck="true">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><span class="token attr-name">autoCreateTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">deleteWhen</span><span class="token punctuation">=</span><span class="token attr-value">04</span><span class="token attr-name">fileReservedTime</span><span class="token punctuation">=</span><span class="token attr-value">120</span><span class="token comment" spellcheck="true">#存储路径</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store</span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/commitlog</span><span class="token attr-name">storePathConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/consumequeue</span><span class="token attr-name">storePathIndex</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/index</span><span class="token attr-name">storeCheckpoint</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/checkpoint</span><span class="token attr-name">abortFile</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/store/abort</span><span class="token comment" spellcheck="true">#Broker 的角色</span><span class="token attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_MASTER</span><span class="token attr-name">flushDiskType</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_FLUSH</span><span class="token comment" spellcheck="true">#Broker 对外服务的监听端口</span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">10911</span></code></pre><p> 在worker2上配置broker-b的SLAVE服务。修改conf/2m-2s-async/broker-b-s.properties文件，配置示例：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#所属集群名字，名字一样的节点就在同一个集群内</span><span class="token attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token attr-value">rocketmq-cluster</span><span class="token comment" spellcheck="true">#broker名字，名字一样的节点就是一组主从节点。</span><span class="token attr-name">brokerName</span><span class="token punctuation">=</span><span class="token attr-value">broker-b</span><span class="token comment" spellcheck="true">#brokerid,0就表示是Master，>0的都是表示 Slave</span><span class="token attr-name">brokerId</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">#nameServer地址，分号分割</span><span class="token attr-name">namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">worker1:9876;worker2:9876;worker3:9876</span><span class="token comment" spellcheck="true">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><span class="token attr-name">autoCreateTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">deleteWhen</span><span class="token punctuation">=</span><span class="token attr-value">04</span><span class="token attr-name">fileReservedTime</span><span class="token punctuation">=</span><span class="token attr-value">120</span><span class="token comment" spellcheck="true">#存储路径</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave</span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/commitlog</span><span class="token attr-name">storePathConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/consumequeue</span><span class="token attr-name">storePathIndex</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/index</span><span class="token attr-name">storeCheckpoint</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/checkpoint</span><span class="token attr-name">abortFile</span><span class="token punctuation">=</span><span class="token attr-value">/app/rocketmq/storeSlave/abort</span><span class="token comment" spellcheck="true">#Broker 的角色</span><span class="token attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token attr-value">SLAVE</span><span class="token attr-name">flushDiskType</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_FLUSH</span><span class="token comment" spellcheck="true">#Broker 对外服务的监听端口</span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">11011</span></code></pre><p>配置过程需要注意的配置项：</p><ul><li>store开头的一系列配置：表示RocketMQ的存盘文件地址。在同一个机器上需要部署多个Broker服务时，不同服务的存储目录不能相同。</li><li>listenPort：表示Broker对外提供服务的端口。这个端口默认是10911。在同一个机器上部署多个Broker服务时，不同服务占用的端口也不能相同。</li><li>如果你使用的是多网卡的服务器，比如阿里云上的云服务器，那么就需要在配置文件中增加配置一个brokerIP1属性，指向所在机器的外网网卡地址。</li></ul><p>3、启动Broker服务</p><p>集群配置完成后，启动Broker服务。注意启动时需要增加-c参数，指向修改的配置文件。</p><p> 在worker2上启动broker-a的master服务和broker-b的slave服务：</p><pre class=" language-shell"><code class="language-shell">cd /app/rocketmq/rocketmq-all-4.9.5-bin-releasenohup bin/mqbroker -c ./conf/2m-2s-async/broker-a.properties &nohup bin/mqbroker -c ./conf/2m-2s-async/broker-b-s.properties &</code></pre><p> 在worker3上启动broker-b的master服务和broker-a的slave服务：</p><pre class=" language-shell"><code class="language-shell">cd /app/rocketmq/rocketmq-all-4.9.5-bin-releasenohup bin/mqbroker -c ./conf/2m-2s-async/broker-b.properties &nohup bin/mqbroker -c ./conf/2m-2s-async/broker-a-s.properties &</code></pre><p>4、检查集群服务状态</p><p>服务的启动状态，可以用jps指令以及nohup.out日志文件进行跟踪。另外在RocketMQ的bin目录下，提供了mqadmin指令，可以通过命令行的方式管理RocketMQ集群。</p><pre class=" language-java"><code class="language-java"># 查看集群broker状态mqadmin clusterList</code></pre><p><font color="red">注意：执行这个指令需要在机器上配置了NAMESRV环境变量</font></p><p>直接使用mqadmin指令会给出所有管理命令，可以通过mqadmin help + 具体指令查看使用方法</p><p>Dashboard也是查看集群服务状态的工具。只需要在之前搭建Dashboard时创建的配置文件中增加指定nameserver地址即可。（具体配置参见源码中的配置文件）</p><pre class=" language-java"><code class="language-java">rocketmq<span class="token operator">:</span>   config<span class="token operator">:</span>     namesrvAddrs<span class="token operator">:</span>       <span class="token operator">-</span> worker1<span class="token operator">:</span><span class="token number">9876</span>       <span class="token operator">-</span> worker2<span class="token operator">:</span><span class="token number">9876</span>      <span class="token operator">-</span> worker3<span class="token operator">:</span><span class="token number">9876</span></code></pre><p>在RocketMQ的这种主从架构的集群下，客户端发送的消息会分散保存到broker-a和broker-b两个服务上，然后每个服务都配有slave服务，可以备份对应master服务上的消息，这样就可以防止单点故障造成的消息丢失问题</p><p><strong>为什么要设计这种主从备份，但是不具备主从切换的集群？</strong></p><p>参考kafka的设计，主从切换期间可能导致数据丢失，解决办法简单暴力，不切换就好了</p><h2 id="升级高可用集群"><a href="#升级高可用集群" class="headerlink" title="升级高可用集群"></a>升级高可用集群</h2><p>主从架构的RocketMQ集群，由于给每个broker添加Slave备份，有效防止单点故障问题防止数据丢失。但是这种主从架构仍然存在问题。</p><p>当RocketMQ集群中的broker宕机后，整个集群会自动进行broker状态感知。后续客户端的各种请求，依然可以转发到其他正常的broker上。只不过，原本保存在当前broker上的消息，就无法正常读取了，需要等到当前broker服务重启后，才能重新被消息消费者读取。</p><p>当一个broker上的服务宕机后，我们可以从对应的slave服务上找到broker上所有的消息。但是很可惜，主从架构中各个<strong>服务的角色都是固定</strong>了的，slave服务虽然拥有全部的数据，但是它没办法升级成为master服务去响应客户端的请求，依然只是傻傻等待master服务重启后，继续做它的数据备份工作。</p><p>RocketMQ提供的<strong>Dledger集群</strong>，就是具备角色自动转换功能的高可用集群。</p><p>整个集群结构如下图所示：</p><p><img src="/images/mq/rocket-cluster-2.png" alt="rocket-cluster-2"></p><p>在Dledger集群中，就不再单独指定各个broker的服务，而是由这些broker服务自行进行选举，产生一个Leader角色的服务，响应客户端的各种请求。而其他的broker服务，就作为Follower角色，负责对Leader上的数据进行备份。</p><p>Dledger集群的选举是通过Raft协议进行的，Raft协议是一种多数同意机制。也就是每次选举需要有集群中超过半数的节点确认，才能形成整个集群的共同决定。同时，这也意味着在Dledger集群中，只要有超过半数的节点能够正常工作，那么整个集群就能正常工作。因此，在部署Dledger集群时，通常都是部署奇数台服务，这样可以让集群的容错性达到最大。</p><p>用之前准备的3台服务器，搭建一个3个节点的Dledger集群。在这个集群中，只需要有2台Broker服务正常运行，这个集群就能正常工作。</p><p><strong>第一步</strong>：部署nameserver</p><p>直接在三台服务器上启动nameserver服务</p><p><strong>第二步</strong>：对Broker服务进行集群配置。</p><p>在conf/dledger目录下，RocketMQ默认给出了三个配置文件，这三个配置文件可以在单机情况下直接部署成一个具有三个broker服务的Dledger集群，只需要按照这个配置进行修改即可。</p><blockquote><p>注：RocketMQ运行包的bin/dledger目录下，还提供了一个fast-try.sh脚本。这个脚本会指定conf/dledger目录下的配置文件，直接启动有三个broker服务的Dledger集群。每个集群指定的内存大小占用1G。</p></blockquote><p>接下来在三台机器的conf/dledger目录下，都创建一个broker.conf文件，对每个broker服务进行配置。</p><pre class=" language-java"><code class="language-java"># worker1的broker<span class="token punctuation">.</span>confbrokerClusterName <span class="token operator">=</span> RaftClusterbrokerName<span class="token operator">=</span>RaftNode00listenPort<span class="token operator">=</span><span class="token number">30911</span>namesrvAddr<span class="token operator">=</span>worker1<span class="token operator">:</span><span class="token number">9876</span><span class="token punctuation">;</span>worker2<span class="token operator">:</span><span class="token number">9876</span><span class="token punctuation">;</span>worker3<span class="token operator">:</span><span class="token number">9876</span>storePathRootDir<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>storePathCommitLog<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>commitlogstorePathConsumeQueue<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>consumequeuestorePathIndex<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>indexstoreCheckpoint<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>checkpointabortFile<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>abortenableDLegerCommitLog<span class="token operator">=</span><span class="token boolean">true</span>dLegerGroup<span class="token operator">=</span>RaftNode00dLegerPeers<span class="token operator">=</span>n0<span class="token operator">-</span>worker1<span class="token operator">:</span><span class="token number">40911</span><span class="token punctuation">;</span>n1<span class="token operator">-</span>worker2<span class="token operator">:</span><span class="token number">40911</span><span class="token punctuation">;</span>n2<span class="token operator">-</span>worker3<span class="token operator">:</span><span class="token number">40911</span>## must be uniquedLegerSelfId<span class="token operator">=</span>n0sendMessageThreadPoolNums<span class="token operator">=</span><span class="token number">16</span># worker2的broker<span class="token punctuation">.</span>confbrokerClusterName <span class="token operator">=</span> RaftClusterbrokerName<span class="token operator">=</span>RaftNode00listenPort<span class="token operator">=</span><span class="token number">30911</span>namesrvAddr<span class="token operator">=</span>worker1<span class="token operator">:</span><span class="token number">9876</span><span class="token punctuation">;</span>worker2<span class="token operator">:</span><span class="token number">9876</span><span class="token punctuation">;</span>worker3<span class="token operator">:</span><span class="token number">9876</span>storePathRootDir<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>storePathCommitLog<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>commitlogstorePathConsumeQueue<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>consumequeuestorePathIndex<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>indexstoreCheckpoint<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>checkpointabortFile<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>abortenableDLegerCommitLog<span class="token operator">=</span><span class="token boolean">true</span>dLegerGroup<span class="token operator">=</span>RaftNode00dLegerPeers<span class="token operator">=</span>n0<span class="token operator">-</span>worker1<span class="token operator">:</span><span class="token number">40911</span><span class="token punctuation">;</span>n1<span class="token operator">-</span>worker2<span class="token operator">:</span><span class="token number">40911</span><span class="token punctuation">;</span>n2<span class="token operator">-</span>worker3<span class="token operator">:</span><span class="token number">40911</span>## must be uniquedLegerSelfId<span class="token operator">=</span>n1sendMessageThreadPoolNums<span class="token operator">=</span><span class="token number">16</span># worker3的broker<span class="token punctuation">.</span>confbrokerClusterName <span class="token operator">=</span> RaftClusterbrokerName<span class="token operator">=</span>RaftNode00listenPort<span class="token operator">=</span><span class="token number">30911</span>namesrvAddr<span class="token operator">=</span>worker1<span class="token operator">:</span><span class="token number">9876</span><span class="token punctuation">;</span>worker2<span class="token operator">:</span><span class="token number">9876</span><span class="token punctuation">;</span>worker3<span class="token operator">:</span><span class="token number">9876</span>storePathRootDir<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>storePathCommitLog<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>commitlogstorePathConsumeQueue<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>consumequeuestorePathIndex<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>indexstoreCheckpoint<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>checkpointabortFile<span class="token operator">=</span><span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>storeDledger<span class="token operator">/</span>abortenableDLegerCommitLog<span class="token operator">=</span><span class="token boolean">true</span>dLegerGroup<span class="token operator">=</span>RaftNode00dLegerPeers<span class="token operator">=</span>n0<span class="token operator">-</span>worker1<span class="token operator">:</span><span class="token number">40911</span><span class="token punctuation">;</span>n1<span class="token operator">-</span>worker2<span class="token operator">:</span><span class="token number">40911</span><span class="token punctuation">;</span>n2<span class="token operator">-</span>worker3<span class="token operator">:</span><span class="token number">40911</span>## must be uniquedLegerSelfId<span class="token operator">=</span>n2sendMessageThreadPoolNums<span class="token operator">=</span><span class="token number">16</span></code></pre><p>重点关注配置项：</p><ul><li>enableDLegerCommitLog: 是否启动Dledger。true表示启动</li><li>namesrvAddr: 指定nameserver地址</li><li>dLedgerGroup: Dledger Raft Group的名字，建议跟brokerName保持一致。</li><li>dLedgerPeers: Dledger Group内各个服务节点的地址及端口信息。同一个Group内的各个节点配置必须要保持一致。</li><li>dLedgerSelfId: Dledger节点ID，必须属于dLedgerPeers中的一个。同一个Group内的各个节点必须不能重复。</li><li>sendMessageThreadPoolNums：dLedger内部发送消息的线程数，建议配置成cpu核心数。</li><li>store开头的一系列配置： 这些是配置dLedger集群的消息存盘目录。如果你是从主从架构升级成为dLedger架构，那么这个地址可以指向之前搭建住主从架构的地址。dLedger集群会兼容主从架构集群的消息格式，只不过主从架构的消息无法享受dLedger集群的两阶段同步功能。</li></ul><p><strong>第三步</strong>：启动broker服务</p><p>需要在启动broker服务时，指定配置文件</p><pre class=" language-java"><code class="language-java">cd <span class="token operator">/</span>app<span class="token operator">/</span>rocketmq<span class="token operator">/</span>rocketmq<span class="token operator">-</span>all<span class="token operator">-</span><span class="token number">4.9</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">-</span>bin<span class="token operator">-</span>release<span class="token operator">/</span>nohup bin<span class="token operator">/</span>mqbroker <span class="token operator">-</span>c conf<span class="token operator">/</span>dledger<span class="token operator">/</span>broker<span class="token punctuation">.</span>conf <span class="token operator">&amp;</span></code></pre><p><strong>第四步</strong>：检查集群服务状态</p><p> 可以在Dashboard控制台的集群菜单页看到Dledger集群的运行状况</p><p><strong>关于Dledger集群的一些补充</strong></p><p>Dledger集群机制是RocketMQ自4.5版本开始支持的一个重要特性。他其实是由OpenMessage组织带入RocketMQ的一个系列框架。他是一个为高可用、高性能、高可靠的分布式存储系统提供基础支持的组件。他做的事情主要有两个，一是在集群中<font color="red">选举产生master节点</font>。RocketMQ集群需要用这个master节点响应客户端的各种请求。二是在各种复杂的分布式场景下，<font color="red">保证CommitLog日志文件在集群中的强一致性</font>。</p><p>以下是ChatGPT对于Dledger的功能描述</p><blockquote><p>RocketMQ是一款分布式消息队列系统，主要用于处理大量数据的实时传输和处理。在RocketMQ中，DLedger是一个为高可用、高性能、高可靠的分布式存储系统提供基础支持的组件。DLedger集群主要具有以下功能：</p><ol><li>数据复制：DLedger集群通过raft协议来保证数据的一致性。在集群中，每个节点都维护一个相同的数据副本，以确保当某个节点出现故障时，数据不会丢失。</li><li>容错性：DLedger集群具有很高的容错性。即使集群中的部分节点发生故障，只要集群中有大多数节点（即超过半数）仍在正常工作，整个集群将继续提供服务。</li><li>高可用性：DLedger集群通过负载均衡和热备份等机制，确保在节点故障时能够快速切换到其他正常节点，提高整个系统的可用性。</li><li>分布式锁：DLedger集群提供分布式锁功能，可以解决分布式系统中的资源争用问题，实现跨节点的资源同步。</li><li>强一致性：DLedger集群通过使用Raft一致性协议，确保在多个副本节点之间同步数据，保证数据的强一致性。</li><li>高性能：DLedger集群支持水平扩展，可以通过增加节点来提高系统的吞吐量和存储能力，以满足不断增长的业务需求。</li><li>易于管理：DLedger集群提供了一系列管理和监控功能，使运维人员可以更方便地掌握系统的运行状况，及时发现和解决问题。</li></ol><p>总之，RocketMQ的DLedger集群具有高可用、高性能、高可靠等特点，为分布式消息队列系统提供了坚实的基础。</p></blockquote><p>其背后的核心就是Raft协议。这是一种强大的分布式选举算法，其核心是只要集群中<font color="red">超过半数</font>的节点作出的共同决议，就认为是集群最终的共同决议。</p><p>Raft协议一个很强大的地方，就是他解决了分布式集群中的脑裂问题。</p><p>关于脑裂问题，这是在集群选举过程中一个出现概率不高，但是让很多人头疼的问题。在分布式集群内，有可能会由于网络波动或者其他一些不稳定因素，造成集群内节点之间短时间通信不畅通。这时就容易在集群内形成多个包含多个节点的小集合。这些集合就会独立进行选举，各自产生新的Master节点。当网络恢复畅通后，集群中就有了多个Master节点。当集群中出现多个Master节点后，其他节点就不知道要听从谁的指令了，从而造成集群整体工作瘫痪。脑裂问题在以Zookeeper为代表的早前一代分布式一致性产品中，是一个非常头疼的问题。而Raft协议对于脑裂问题，会采用随机休眠的机制，彻底解决脑裂问题。RocketMQ是Raft协议的一个重要的成功示例。Kafka也在之后基于Raft协议，自行实现了Kraft集群机制。</p><p>同样，附上ChatGPT对于脑裂问题的介绍，供你参考：</p><blockquote><p>问题：Dledger集群如何防止集群脑裂问题？</p><p>DLedger集群通过使用Raft协议来防止集群脑裂（split-brain）问题。脑裂问题是指在分布式系统中，由于网络分区或其他原因导致集群被分割成两个或多个子集群，各自独立运行且无法感知到其他子集群的存在。这可能导致数据不一致和错误决策。Raft协议采用了一系列措施来避免脑裂问题的发生：</p><ol><li>选举机制：Raft协议的基础是选举出一个领导者（Leader），其他节点（Follower）都从领导者获取数据。选举过程要求候选人必须获得集群中大多数节点的支持才能成为领导者。这确保了集群中只能有一个领导者，从而避免了脑裂问题。</li><li>任期（Term）：Raft协议为每个选举周期设置了一个递增的任期编号。任期编号用于标识当前的领导者，确保旧的领导者不会再次被选为领导者。如果一个节点发现自己的任期小于其他节点，那么它会停止当前的工作并更新自己的任期。</li><li>心跳机制：领导者会定期向其他节点发送心跳消息，以保持与Follower节点的连接。当一个节点长时间未收到领导者的心跳时，它会认为当前领导者失效，并启动新一轮选举。这确保了当领导者出现故障时，系统能够快速地选出新的领导者。</li><li>日志复制：领导者负责将数据更新（日志条目）复制到其他节点。Follower节点只有在收到领导者的日志条目并将其写入本地日志后，才会响应客户端的请求。这确保了在发生脑裂情况下，不会出现多个节点试图同时修改同一份数据的情况。</li></ol><p>通过以上措施，DLedger集群利用Raft协议避免了脑裂问题的发生，保证了系统的高可用性和数据一致性。</p></blockquote><p>注：Dledger集群由于会接管RocketMQ原生的文件写入，所以，Dledger集群的文件写入速度比RocketMQ的原生写入方式是要慢一点的。这会对RocketMQ的性能产生一些影响。所以，当前版本的Dledger集群在企业中用得并不是太多。5.0版本对Dledger集群抽出了一种Dledger Controller模式，也就是只用Dledger集群的选举功能，而不用他的Commit文件写入功能，这样性能可以得到一定的提升。</p><h2 id="总结RocketMQ的运行架构"><a href="#总结RocketMQ的运行架构" class="headerlink" title="总结RocketMQ的运行架构"></a>总结RocketMQ的运行架构</h2><p>RocketMQ运行时的整体架构：</p><p><img src="/images/mq/rocket-cluster-all.png" alt="rocket-cluster-all"></p><p>RocketMQ中各个组件的作用：</p><p><strong>1、nameServer 命名服务</strong></p><p>nameServer不依赖于任何其他的服务，自己独立就能启动。并且，不管是broker还是客户端，都需要明确指定nameServer的服务地址。</p><p><strong>2、broker 核心服务</strong></p><p>broker是RocketMQ中最为娇贵的一个组件。RockeMQ提供了各种各样的重要设计来保护broker的安全。同时broker也是RocketMQ中配置最为繁琐的部分。RocketMQ最核心的消息存储、传递、查询等功能都要由broker提供。</p><p><strong>3、client 客户端</strong></p><p>Client包括消息生产者和消息消费者。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rocket-快速实战</title>
      <link href="/posts/rocket-family/1/"/>
      <url>/posts/rocket-family/1/</url>
      
        <content type="html"><![CDATA[<h2 id="MQ简介"><a href="#MQ简介" class="headerlink" title="MQ简介"></a>MQ简介</h2><p>MQ：MessageQueue，消息队列。是在互联网中使用非常广泛的一系列服务中间件。</p><p>Message：消息。消息是在<font color="red">不同进程之间传递的数据</font>。这些进程可以部署在同一台机器上，也可以分布在不同机器上。（数据形式：二进制压缩数据、RPC、http，都属于进程间通讯的机制）</p><p>Queue：队列。队列原意是指一种具有FIFO(先进先出)特性的数据结构，是用来缓存数据的。对于消息中间件产品来说，能不能保证FIFO特性，尚值得考量。但是，所有消息队列都是需要具备<font color="red">存储消息</font>，让消息排队的能力。</p><p>作用：</p><ul><li>异步，<font color="red">提高系统的响应速度、吞吐量。</font></li><li>解耦，减少服务之间的影响。提高系统整体的<font color="red">稳定性以及可扩展性。</font>另外，解耦后可以实现数据分发。生产者发送一个消息后，可以由一个或者多个消费者进行消费，并且消费者的增加或者减少对生产者没有影响。</li><li>消峰，<font color="red">以稳定的系统资源应对突发的流量冲击。</font></li></ul><span id="more"></span> <h2 id="RocketMQ产品特点"><a href="#RocketMQ产品特点" class="headerlink" title="RocketMQ产品特点"></a>RocketMQ产品特点</h2><h3 id="RocketMQ介绍"><a href="#RocketMQ介绍" class="headerlink" title="RocketMQ介绍"></a>RocketMQ介绍</h3><p> RocketMQ是阿里巴巴开源的一个消息中间件，在阿里内部历经了双十一等很多高并发场景的考验，能够处理亿万级别的消息。2016年开源后捐赠给Apache，现在是Apache的一个顶级项目。</p><p> 早期阿里使用ActiveMQ，但是，当消息开始逐渐增多后，ActiveMQ的IO性能很快达到了瓶颈。于是，阿里开始关注Kafka。但是Kafka是针对日志收集场景设计的，他的高级功能并不是很贴合阿里的业务场景。尤其当他的Topic过多时，由于Partition文件也会过多，这就会加大文件索引的耗时，会严重影响IO性能。于是阿里才决定自研中间件，最早叫做MetaQ，后来改名成为RocketMQ。最早他所希望解决的最大问题就是多Topic下的IO性能压力。但是产品在阿里内部的不断改进，RocketMQ开始体现出一些不一样的优势。</p><h3 id="RocketMQ特点"><a href="#RocketMQ特点" class="headerlink" title="RocketMQ特点"></a>RocketMQ特点</h3><p> 当今互联网MQ产品众多，其中，影响力和使用范围最大的当数Apache Kafka、RabbitMQ、Apache RocketMQ以及Apache Plusar。这几大产品虽然都是典型的MQ产品，但是由于设计和实现上的一些差异，造成他们适合于不同的细分场景。</p><table><thead><tr><th></th><th>优点</th><th>缺点</th><th>适合场景</th></tr></thead><tbody><tr><td>Apache Kafka</td><td>吞吐量非常大，性能非常好，集群高可用。</td><td>会有丢数据的可能，功能比较单一</td><td>日志分析、大数据采集</td></tr><tr><td>RabbitMQ</td><td>消息可靠性高，功能全面。</td><td>erlang语言不好定制。吞吐量比较低。</td><td>企业内部小规模服务调用</td></tr><tr><td>Apache Pulsar</td><td>基于Bookeeper构建，消息可靠性非常高。</td><td>周边生态还有差距，目前使用的公司比较少。</td><td>企业内部大规模服务调用</td></tr><tr><td>Apache RocketMQ</td><td>高吞吐、高性能、高可用。功能全面。客户端协议丰富。使用java语言开发，方便定制。</td><td>服务加载比较慢。</td><td>几乎全场景，特别适合金融场景</td></tr></tbody></table><p> 其中RocketMQ，孵化自阿里巴巴。历经阿里多年双十一的严格考验，RocketMQ可以说是从全世界最严苛的高并发场景中摸爬滚打出来的过硬产品，也是少数几个在金融场景比较适用的MQ产品。从横向对比来看，RocketMQ与Kafka和RabbitMQ相比。RocketMQ的消息吞吐量虽然和Kafka相比还是稍有差距，但是却比RabbitMQ高很多。在阿里内部，RocketMQ集群每天处理的请求数超过5万亿次，支持的核心应用超过3000个。而RocketMQ最大的优势就是他天生就为金融互联网而生。他的消息可靠性相比Kafka也有了很大的提升，而消息吞吐量相比RabbitMQ也有很大的提升。另外，RocketMQ的高级功能也越来越全面，广播消费、延迟队列、死信队列等等高级功能一应俱全，甚至某些业务功能比如事务消息，已经呈现出领先潮流的趋势。</p><h2 id="RocketMQ快速实战"><a href="#RocketMQ快速实战" class="headerlink" title="RocketMQ快速实战"></a>RocketMQ快速实战</h2><h3 id="快速搭建RocketMQ服务"><a href="#快速搭建RocketMQ服务" class="headerlink" title="快速搭建RocketMQ服务"></a>快速搭建RocketMQ服务</h3><p>RocketMQ的官网地址： <a href="https://rocketmq.apache.org/">https://rocketmq.apache.org</a></p><p>下载页面地址：<a href="https://rocketmq.apache.org/download">https://rocketmq.apache.org/download</a></p><p>当前最新的版本是5.x，这是一个着眼于云原生的新版本，给 RocketMQ 带来了非常多很亮眼的新特性。但是目前来看，企业中用得还比较少。因此，我们这里采用的还是更为稳定的4.9.5版本。</p><blockquote><p>注：在2020年下半年，RocketMQ新推出了5.0的大版本，这对于RocketMQ来说，是一个里程碑式的大版本。在这个大版本中，RocketMQ对整体功能做了一次大的升级。增加了很多非常有用的新特性，也对已有功能重新做了升级。</p><p> 比如在具体功能方面，在4.x版本中，对于定时消息，只能设定几个固定的延迟级别，而5.0版本中，已经可以指定具体的发送时间了。在客户端语言方面，4.x版本，RocketMQ原生只支持基于Netty框架的Java客户端。而在5.0版本中，增加了对Grpc协议的支持，这基本上就解除了对客户端语言的限制。在服务端架构方面，4.x版本只支持固定角色的普通集群和可以动态切换角色的Dledger集群，而在5.0版本中，增加了Dledger Controller混合集群模式，即可以混合使用Dledger的集群机制以及 Broker 本地的文件管理机制。</p><p> 但是功能强大，同时也意味着问题会很多。所以目前来看，企业中直接用新版本的还比较少。小部分使用新版本的企业，也大都是使用内部的改造优化版本。</p></blockquote><p>这里下载的是这个版本：</p><p><img src="/images/mq/rocket-1.png" alt="rocket-1"></p><p>上传到服务器并解压：（<code>unzip rocketmq-all-4.9.5-bin-release.zip</code>）</p><p><img src="/images/mq/rocket-2.png" alt="rocket-2"></p><p>RocketMQ建议的运行环境需要至少12G的内存，这是生产环境比较理想的资源配置。但是我买的云服务器是2核4g，所以需要修改启动配置：（<code>:set number</code>临时显示行号）</p><p><img src="/images/mq/rocket-3.png" alt="rocket-3"></p><p><img src="/images/mq/rocket-4.png" alt="rocket-4"></p><p>注意：生产环境不建议修改上面两个配置。</p><p>RocketMQ是基于Java开发的，所以依赖Java开发环境，安装JDK步骤省略，建议采用1.8版本</p><p>RocketMQ的后端服务分为nameserver和broker两个服务：</p><pre><code># 第一步：启动nameserver服务，进入安装目录执行命令nohup bin/mqnamesrv &amp;# 是否启动成功可以通过jps检查，启动成功或失败可以查看nohup.out文件# 为了方便测试在conf/broker.conf文件添加配置：autoCreateTopicEnable=true# 注意：如果是云服务器，还需要额外添加一行配置brokerIP1 = 你的公网IP# 第二步：启动broker服务，进入安装目录执行命令nohup bin/mqbroker &amp;</code></pre><p>注意：</p><p>1、在实际服务部署时，通常会将RocketMQ的部署地址添加到环境变量当中。例如使用<code>vi ~/.bash_profile</code>指令，添加以下内容</p><pre class=" language-java"><code class="language-java">export ROCKETMQ_HOME<span class="token operator">=</span><span class="token operator">/</span>home<span class="token operator">/</span>rocket<span class="token operator">/</span>rocketmq<span class="token operator">-</span>all<span class="token operator">-</span><span class="token number">4.9</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">-</span>bin<span class="token operator">-</span>release <span class="token comment" spellcheck="true">// 修改为你的安装目录</span>PATH<span class="token operator">=</span>$ROCKETMQ_HOME<span class="token operator">/</span>bin<span class="token operator">:</span>$PATHexport PATH</code></pre><p>2、停止RocketMQ服务可以通过mqshutdown指令进行，停止服务有短暂延迟，不建议kill杀进程</p><pre class=" language-java"><code class="language-java">mqshutdown namesrv # 关闭nameserver服务mqshutdown broker # 关闭broker服务</code></pre><h3 id="快速实现消息收发"><a href="#快速实现消息收发" class="headerlink" title="快速实现消息收发"></a>快速实现消息收发</h3><h4 id="1、命令行快速实现消息收发"><a href="#1、命令行快速实现消息收发" class="headerlink" title="1、命令行快速实现消息收发"></a>1、命令行快速实现消息收发</h4><p><strong>第一步</strong>：需要配置一个环境变量NAMESRV_ADDR，指向之前启动的nameserver服务。</p><p>通过<code>vi ~/.bash_profile</code>添加以下配置。然后使用<code>source ~/.bash_profile</code>让配置生效。</p><pre class=" language-java"><code class="language-java">export NAMESRV_ADDR<span class="token operator">=</span><span class="token string">'localhost:9876'</span></code></pre><p>修改后文件：</p><p><img src="/images/mq/rocket-5.png" alt="rocket-5"></p><p><strong>第二步</strong>：通过指令启动RocketMQ的消息生产者发送消息。默认往RocketMQ中发送1000条消息</p><pre class=" language-java"><code class="language-java">tools<span class="token punctuation">.</span>sh org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>example<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>Producer     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>消息发送日志SendResult <span class="token punctuation">[</span>sendStatus<span class="token operator">=</span>SEND_OK<span class="token punctuation">,</span> msgId<span class="token operator">=</span>7F0000018FBA1B6D358697CBE7FB03E7<span class="token punctuation">,</span> offsetMsgId<span class="token operator">=</span>C0A800DA00002A9F000000000005DA64<span class="token punctuation">,</span> messageQueue<span class="token operator">=</span>MessageQueue <span class="token punctuation">[</span>topic<span class="token operator">=</span>TopicTest<span class="token punctuation">,</span> brokerName<span class="token operator">=</span>hcss<span class="token operator">-</span>ecs<span class="token operator">-</span><span class="token number">3744</span><span class="token punctuation">,</span> queueId<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queueOffset<span class="token operator">=</span><span class="token number">499</span><span class="token punctuation">]</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">22.820</span> <span class="token punctuation">[</span>NettyClientSelector_1<span class="token punctuation">]</span> INFO RocketmqRemoting <span class="token operator">-</span> closeChannel<span class="token operator">:</span> close the connection to remote address<span class="token punctuation">[</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9876</span><span class="token punctuation">]</span> result<span class="token operator">:</span> <span class="token boolean">true</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">22.825</span> <span class="token punctuation">[</span>NettyClientSelector_1<span class="token punctuation">]</span> INFO RocketmqRemoting <span class="token operator">-</span> closeChannel<span class="token operator">:</span> close the connection to remote address<span class="token punctuation">[</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">9876</span><span class="token punctuation">]</span> result<span class="token operator">:</span> <span class="token boolean">true</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">22.825</span> <span class="token punctuation">[</span>NettyClientSelector_1<span class="token punctuation">]</span> INFO RocketmqRemoting <span class="token operator">-</span> closeChannel<span class="token operator">:</span> close the connection to remote address<span class="token punctuation">[</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.218</span><span class="token operator">:</span><span class="token number">10911</span><span class="token punctuation">]</span> result<span class="token operator">:</span> <span class="token boolean">true</span></code></pre><p><strong>第三步</strong>：可以启动消息消费者接收之前发送的消息</p><pre class=" language-java"><code class="language-java">tools<span class="token punctuation">.</span>sh org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token punctuation">.</span>example<span class="token punctuation">.</span>quickstart<span class="token punctuation">.</span>Consumer    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>消息消费日志ConsumeMessageThread_please_rename_unique_group_name_4_15 Receive New <span class="token class-name">Messages</span><span class="token operator">:</span> <span class="token punctuation">[</span>MessageExt <span class="token punctuation">[</span>brokerName<span class="token operator">=</span>hcss<span class="token operator">-</span>ecs<span class="token operator">-</span><span class="token number">3744</span><span class="token punctuation">,</span> queueId<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> storeSize<span class="token operator">=</span><span class="token number">192</span><span class="token punctuation">,</span> queueOffset<span class="token operator">=</span><span class="token number">199</span><span class="token punctuation">,</span> sysFlag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bornTimestamp<span class="token operator">=</span><span class="token number">1701312827986</span><span class="token punctuation">,</span> bornHost<span class="token operator">=</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.218</span><span class="token operator">:</span><span class="token number">32850</span><span class="token punctuation">,</span> storeTimestamp<span class="token operator">=</span><span class="token number">1701312827987</span><span class="token punctuation">,</span> storeHost<span class="token operator">=</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.218</span><span class="token operator">:</span><span class="token number">10911</span><span class="token punctuation">,</span> msgId<span class="token operator">=</span>C0A800DA00002A9F00000000000256D2<span class="token punctuation">,</span> commitLogOffset<span class="token operator">=</span><span class="token number">153298</span><span class="token punctuation">,</span> bodyCRC<span class="token operator">=</span><span class="token number">748130833</span><span class="token punctuation">,</span> reconsumeTimes<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> preparedTransactionOffset<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span>Message<span class="token punctuation">{</span>topic<span class="token operator">=</span><span class="token string">'TopicTest'</span><span class="token punctuation">,</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> properties<span class="token operator">=</span><span class="token punctuation">{</span>MIN_OFFSET<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> MAX_OFFSET<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span> CONSUME_START_TIME<span class="token operator">=</span><span class="token number">1701314617997</span><span class="token punctuation">,</span> UNIQ_KEY<span class="token operator">=</span>7F0000018E561B6D358697AEFE52031F<span class="token punctuation">,</span> CLUSTER<span class="token operator">=</span>DefaultCluster<span class="token punctuation">,</span> TAGS<span class="token operator">=</span>TagA<span class="token punctuation">}</span><span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">,</span> transactionId<span class="token operator">=</span><span class="token string">'null'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>注意：这个Consumer消费者的指令并不会主动结束，他会继续挂起，等待消费新的消息。可以使用<code>CTRL+C</code>停止该进程。</p><h4 id="2、搭建Maven客户端项目"><a href="#2、搭建Maven客户端项目" class="headerlink" title="2、搭建Maven客户端项目"></a>2、搭建Maven客户端项目</h4><p><strong>第一步</strong>：创建一个标准的maven项目，在pom.xml中引入以下核心依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>rocketmq<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>rocketmq<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.9</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>第二步</strong>：就可以直接创建一个简单的消息生产者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> MQClientException<span class="token punctuation">,</span> InterruptedException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化一个消息生产者</span>        DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"please_rename_unique_group_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定nameserver地址</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"192.168.232.128:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动消息生产者服务</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 创建消息。消息由Topic,Tag和body三个属性组成，其中Body就是消息内容</span>                Message msg <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello RocketMQ "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 发送消息，获取发送结果</span>                SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 消息发送完后，停止消息生产者服务。</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：对于生产者，需要指定对应的nameserver服务的地址，这个地址需要指向你自己的服务器。</p><p><strong>第三步</strong>：创建一个消息消费者接收RocketMQ中的消息。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> MQClientException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构建一个消息消费者</span>        DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"please_rename_unique_group_name_4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 指定nameserver地址</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"192.168.232.128:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span>ConsumeFromWhere<span class="token punctuation">.</span>CONSUME_FROM_LAST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 订阅一个感兴趣的话题，这个话题需要与消息的topic一致</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册一个消息回调函数，消费到消息后就会触发回调。</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> ConsumeConcurrentlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> msgs<span class="token punctuation">,</span> ConsumeConcurrentlyContext context<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                msgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>messageExt <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到消息:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动消费者服务</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Consumer Started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：对于消费者，同样需要指定nameserver的地址，另外消费者需要在RocketMQ中订阅具体的Topic，只有发送到这个Topic上的消息才会被这个消费者接收到</p><p><font color="red">生产消费报错：RemotingTooMuchRequestException: sendDefaultImpl call timeout</font></p><p>解决方法：<br>1、在<code>conf/broker.conf</code> 中加入配置：</p><pre class=" language-java"><code class="language-java">namesrvAddr <span class="token operator">=</span> 你的公网IP<span class="token operator">:</span><span class="token number">9876</span>brokerIP1 <span class="token operator">=</span> 你的公网IP</code></pre><p>2、重启broker，启动命令指定配置文件：</p><pre class=" language-java"><code class="language-java">nohup mqbroker <span class="token operator">-</span>n localhost<span class="token operator">:</span><span class="token number">9876</span> <span class="token operator">-</span>c conf<span class="token operator">/</span>broker<span class="token punctuation">.</span>conf <span class="token operator">&amp;</span></code></pre><p>重启完成，上面的生产者消费者测试代码通过</p>]]></content>
      
      
      
        <tags>
            
            <tag> Rocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-性能优化</title>
      <link href="/posts/redis-family/7/"/>
      <url>/posts/redis-family/7/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis缓存设计"><a href="#Redis缓存设计" class="headerlink" title="Redis缓存设计"></a>Redis缓存设计</h2><h3 id="缓存与数据库双写不一致"><a href="#缓存与数据库双写不一致" class="headerlink" title="缓存与数据库双写不一致"></a>缓存与数据库双写不一致</h3><p>在大并发下，同时操作数据库与缓存会存在数据不一致性问题</p><p>1、双写不一致情况，<font color="red">线程1写数据库，[线程2写数据库，并更新缓存]，线程1更新缓存，此时旧缓存覆盖了新的</font></p><p>2、读写并发不一致，<font color="red">线程1读数据库，[线程2写数据库，并删除缓存]，线程1更新缓存，此时的缓存不是最新的</font></p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>1、对于并发几率很小的数据(如个人维度的订单数据、用户数据等)，这种几乎不用考虑这个问题，很少会发生缓存不一致，可以给缓存数据加上过期时间，每隔一段时间触发读的主动更新即可。</p><p>2、就算并发很高，如果业务上能容忍短时间的缓存数据不一致(如商品名称，商品分类菜单等)，缓存加上过期时间依然可以解决大部分业务对于缓存的要求。</p><p>3、如果不能容忍缓存数据不一致，可以通过加<strong>分布式读写锁</strong>保证并发读写或写写的时候按顺序排好队，<strong>读读的时候相当于无锁</strong>。</p><p>4、也可以用阿里开源的canal通过监听数据库的binlog日志及时的去修改缓存，但是引入了新的中间件，增加了系统的复杂度。</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>以上针对的都是<strong>读多写少</strong>的情况加入缓存提高性能，如果<strong>写多读多</strong>的情况又不能容忍缓存数据不一致，那就没必要加缓存了，可以直接操作数据库。当然，如果数据库抗不住压力，还可以把缓存作为数据读写的主存储，异步将数据同步到数据库，数据库只是作为数据的备份。</p><p>放入缓存的数据应该是对实时性、一致性要求不是很高的数据。切记不要为了用缓存，同时又要保证绝对的一致性做大量的过度设计和控制，增加系统复杂性！</p><h2 id="开发规范与性能优化"><a href="#开发规范与性能优化" class="headerlink" title="开发规范与性能优化"></a>开发规范与性能优化</h2><hr><h3 id="一、键值设计"><a href="#一、键值设计" class="headerlink" title="一、键值设计"></a>一、键值设计</h3><h4 id="1、key名设计"><a href="#1、key名设计" class="headerlink" title="1、key名设计"></a>1、key名设计</h4><ul><li>(1)【建议】: 可读性和可管理性</li></ul><p>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id</p><blockquote><p>trade:order:1</p></blockquote><ul><li>(2)【建议】：简洁性</li></ul><p>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：</p><pre class=" language-java"><code class="language-java">user<span class="token operator">:</span><span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token operator">:</span>friends<span class="token operator">:</span>messages<span class="token operator">:</span><span class="token punctuation">{</span>mid<span class="token punctuation">}</span> 简化为u<span class="token operator">:</span><span class="token punctuation">{</span>uid<span class="token punctuation">}</span><span class="token operator">:</span>fr<span class="token operator">:</span>m<span class="token operator">:</span><span class="token punctuation">{</span>mid<span class="token punctuation">}</span></code></pre><ul><li>(3)【强制】：不要包含特殊字符</li></ul><p>反例：包含空格、换行、单双引号以及其他转义字符</p><h4 id="2、value设计"><a href="#2、value设计" class="headerlink" title="2、value设计"></a>2、value设计</h4><ul><li>(1)【强制】：拒绝bigkey(防止网卡流量、慢查询)</li></ul><p>在Redis中，一个字符串最大512MB，一个二级数据结构（例如hash、list、set、zset）可以存储大约40亿个(2^32-1)个元素，但实际中如果下面两种情况，我就会认为它是bigkey。</p><ol><li>字符串类型：它的big体现在单个value值很大，一般认为超过10KB就是bigkey。</li><li>非字符串类型：哈希、列表、集合、有序集合，它们的big体现在元素个数太多。</li></ol><p>一般来说，string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。</p><p>反例：一个包含200万个元素的list。</p><p>非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞）</p><h4 id="bigkey的危害："><a href="#bigkey的危害：" class="headerlink" title="bigkey的危害："></a>bigkey的危害：</h4><p>1、导致redis阻塞</p><p>2、网络拥塞</p><p>bigkey也就意味着每次获取要产生的网络流量较大，假[[设一个bigkey为1MB，客户端每秒访问量为1000，那么每秒产生1000MB的流量，对于普通的千兆网卡(按照字节算是128MB/s)的服务器来说简直是灭顶之灾，而且一般服务器会采用单机多实例的方式来部署，也就是说一个bigkey可能会对其他实例也造成影响，其后果不堪设想。</p><p>3、过期删除</p><p>有个bigkey，它安分守己（只执行简单的命令，例如hget、lpop、zscore等），但它设置了过期时间，当它过期后，会被删除，如果没有使用Redis 4.0的过期异步删除(<strong>lazyfree-lazy-expire yes</strong>)，就会存在阻塞Redis的可能性。</p><h4 id="bigkey的产生："><a href="#bigkey的产生：" class="headerlink" title="bigkey的产生："></a>bigkey的产生：</h4><p>一般来说，bigkey的产生都是由于程序设计不当，或者对于数据规模预料不清楚造成的，来看几个例子：</p><p>(1) 社交类：粉丝列表，如果某些明星或者大v不精心设计下，必是bigkey。</p><p>(2) 统计类：例如按天存储某项功能或者网站的用户集合，除非没几个人用，否则必是bigkey。</p><p>(3) 缓存类：将数据从数据库load出来序列化放到Redis里，这个方式非常常用，但有两个地方需要注意，第一，是不是有必要把所有字段都缓存；第二，有没有相关关联的数据，有的同学为了图方便把相关数据都存一个key下，产生bigkey。</p><h4 id="如何优化bigkey"><a href="#如何优化bigkey" class="headerlink" title="如何优化bigkey"></a>如何优化bigkey</h4><p>1、拆</p><p>big list： list1、list2、…listN</p><p>big hash：可以将数据分段存储，比如一个大的key，假设存了1百万的用户数据，可以拆分成200个key，每个key下面存放5000个用户数据</p><p>2、如果bigkey不可避免，也要思考一下要不要每次把所有元素都取出来(例如有时候仅仅需要hmget，而不是hgetall)，删除也是一样，尽量使用优雅的方式来处理。</p><ul><li>(2)【推荐】：选择适合的数据类型。</li></ul><p>例如：实体类型(要合理控制和使用数据结构，但也要注意节省内存和性能之间的平衡)</p><p>反例：</p><blockquote><p>set user:1:name tom set user:1:age 19 set user:1:favor football</p></blockquote><p>正例:</p><blockquote><p>hmset user:1 name tom age 19 favor football</p></blockquote><p>3、【推荐】：控制key的生命周期，redis不是垃圾桶。</p><p>建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)。</p><h3 id="二、命令使用"><a href="#二、命令使用" class="headerlink" title="二、命令使用"></a>二、命令使用</h3><p>1、【推荐】 O(N)命令关注N的数量</p><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p><p>2、【推荐】：禁用命令</p><p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</p><p>3、【推荐】合理使用select</p><p>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p><p>4、【推荐】使用批量操作提高效率</p><p>原生命令：例如mget、mset。 非原生命令：可以使用pipeline提高效率。</p><p>但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。</p><p>注意两者不同：</p><p>a）原生命令是原子操作，pipeline是非原子操作。</p><p>b）pipeline可以打包不同的命令，原生命令做不到</p><p>c）pipeline需要客户端和服务端同时支持。              </p><p>5、【建议】Redis事务功能较弱，不建议过多使用，可以用lua替代</p><h3 id="三、客户端使用"><a href="#三、客户端使用" class="headerlink" title="三、客户端使用"></a>三、客户端使用</h3><p>1、【推荐】</p><p>避免多个应用使用一个Redis实例</p><p>正例：不相干的业务拆分，公共数据做服务化。</p><p>2、【推荐】</p><p>使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：</p><pre class=" language-java"><code class="language-java">JedisPoolConfig jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setTestOnBorrow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JedisPool jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">,</span> <span class="token string">"192.168.0.60"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//具体的命令</span>    jedis<span class="token punctuation">.</span><span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"op key {} error: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span>         jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>连接池参数含义：</p><table><thead><tr><th>序号</th><th>参数名</th><th>含义</th><th>默认值</th><th>使用建议</th></tr></thead><tbody><tr><td>1</td><td>maxTotal</td><td>资源池中最大连接数</td><td>8</td><td>设置建议见下面</td></tr><tr><td>2</td><td>maxIdle</td><td>资源池允许最大空闲的连接数</td><td>8</td><td>设置建议见下面</td></tr><tr><td>3</td><td>minIdle</td><td>资源池确保最少空闲的连接数</td><td>0</td><td>设置建议见下面</td></tr><tr><td>4</td><td>blockWhenExhausted</td><td>当资源池用尽后，调用者是否要等待。只有当为true时，下面的maxWaitMillis才会生效</td><td>true</td><td>建议使用默认值</td></tr><tr><td>5</td><td>maxWaitMillis</td><td>当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)</td><td>-1：表示永不超时</td><td>不建议使用默认值</td></tr><tr><td>6</td><td>testOnBorrow</td><td>向资源池借用连接时是否做连接有效性检测(ping)，无效连接会被移除</td><td>false</td><td>业务量很大时候建议设置为false(多一次ping的开销)。</td></tr><tr><td>7</td><td>testOnReturn</td><td>向资源池归还连接时是否做连接有效性检测(ping)，无效连接会被移除</td><td>false</td><td>业务量很大时候建议设置为false(多一次ping的开销)。</td></tr><tr><td>8</td><td>jmxEnabled</td><td>是否开启jmx监控，可用于监控</td><td>true</td><td>建议开启，但应用本身也要开启</td></tr></tbody></table><h4 id="优化建议："><a href="#优化建议：" class="headerlink" title="优化建议："></a>优化建议：</h4><p>1）<strong>maxTotal</strong>：最大连接数，早期的版本叫maxActive</p><p>实际上这个是一个很难回答的问题，考虑的因素比较多：</p><ul><li>业务希望Redis并发量</li><li>客户端执行命令时间</li><li>Redis资源：例如 nodes(例如应用个数) * maxTotal 是不能超过redis的最大连接数maxclients。</li><li>资源开销：例如虽然希望控制<strong>空闲连接</strong>(连接池此刻可马上使用的连接)，但是不希望因为连接池的频繁释放创建连接造成不必靠开销。</li></ul><p><strong>以一个例子说明</strong>，假设:</p><ul><li>一次命令时间（borrow|return resource + Jedis执行命令(含网络) ）的平均耗时约为1ms，一个连接的QPS大约是1000</li><li>业务期望的QPS是50000</li></ul><p>那么理论上需要的资源池大小是50000 / 1000 = 50个。但事实上这是个理论值，还要考虑到要比理论值预留一些资源，通常来讲maxTotal可以比理论值大一些。</p><p>但这个值不是越大越好，一方面连接太多占用客户端和服务端资源，另一方面对于Redis这种高QPS的服务器，一个大命令的阻塞即使设置再大资源池仍然会无济于事。</p><p>2）<strong>maxIdle和minIdle</strong></p><p>maxIdle实际上才是业务需要的最大连接数，maxTotal是为了<strong>给出余量</strong>，所以maxIdle不要设置过小，否则会有new Jedis(新连接)开销。</p><p><strong>连接池的最佳性能是maxTotal = maxIdle</strong>，这样就避免连接池伸缩带来的性能干扰。但是如果并发量不大或者maxTotal设置过高，会导致不必要的连接资源浪费。一般推荐maxIdle可以设置为按上面的业务期望QPS计算出来的理论连接数，maxTotal可以再放大一倍。</p><p>minIdle（最小空闲连接数），与其说是最小空闲连接数，不如说是”<strong>至少需要保持的空闲连接数</strong>“，在使用连接的过程中，如果连接数超过了minIdle，那么继续建立连接，如果超过了maxIdle，当超过的连接执行完业务后会慢慢被移出连接池释放掉。</p><p>如果系统启动完马上就会有很多的请求过来，那么可以给redis连接池做<strong>预热</strong>，比如快速的创建一些redis连接，执行简单命令，类似ping()，快速的将连接池里的空闲连接提升到minIdle的数量。</p><p><strong>连接池预热</strong>示例代码：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Jedis<span class="token operator">></span> minIdleJedisList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Jedis<span class="token operator">></span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jedisPoolConfig<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span>     <span class="token punctuation">{</span>        jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minIdleJedisList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jedis<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//注意，这里不能马上close将连接还回连接池，否则最后连接池里只会建立1个连接。。</span>        <span class="token comment" spellcheck="true">//jedis.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//统一将预热的连接还回连接池</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jedisPoolConfig<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span>     <span class="token punctuation">{</span>        jedis <span class="token operator">=</span> minIdleJedisList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将连接归还回连接池</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span>     <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>总之，要根据实际系统的QPS和调用redis客户端的规模整体评估每个节点所使用的连接池大小。</p><p>3、【建议】</p><p>高并发下建议客户端添加熔断功能(例如sentinel、hystrix)</p><p>4、【推荐】</p><p>设置合理的密码，如有必要可以使用SSL加密访问</p><p>5、【建议】</p><p><strong>Redis对于过期键有三种清除策略：</strong></p><ol><li>被动删除：当读/写一个已经过期的key时，会触发惰性删除策略，直接删除掉这个过期key</li><li>主动删除：由于惰性删除策略无法保证冷数据被及时删掉，所以Redis会定期(默认每100ms)主动淘汰一批<strong>已过期</strong>的key，这里的一批只是部分过期key，所以可能会出现部分key已经过期但还没有被清理掉的情况，导致内存并没有被释放</li><li>当前已用内存超过maxmemory限定时，触发<strong>主动清理策略</strong></li></ol><p><strong>主动清理策略</strong>在Redis 4.0 之前一共实现了 6 种内存淘汰策略，在 4.0 之后，又增加了 2 种策略，总共8种：</p><p><strong>a) 针对设置了过期时间的key做处理：</strong></p><ol><li>volatile-ttl：在筛选时，会针对设置了过期时间的键值对，根据过期时间的先后进行删除，越早过期的越先被删除。</li><li>volatile-random：就像它的名称一样，在设置了过期时间的键值对中，进行随机删除。</li><li>volatile-lru：会使用 LRU 算法筛选设置了过期时间的键值对删除。</li><li>volatile-lfu：会使用 LFU 算法筛选设置了过期时间的键值对删除。</li></ol><p><strong>b) 针对所有的key做处理：</strong></p><ol><li>allkeys-random：从所有键值对中随机选择并删除数据。</li><li>allkeys-lru：使用 LRU 算法在所有数据中进行筛选删除。</li><li>allkeys-lfu：使用 LFU 算法在所有数据中进行筛选删除。</li></ol><p><strong>c) 不处理：</strong></p><ol><li>noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息”(error) OOM command not allowed when used memory”，此时Redis只响应读操作。</li></ol><p><strong>LRU 算法（Least Recently Used，最近最少使用）</strong></p><p>淘汰很久没被访问过的数据，以<strong>最近一次访问时间</strong>作为参考。</p><p><strong>LFU 算法（Least Frequently Used，最不经常使用）</strong></p><p>淘汰最近一段时间被访问次数最少的数据，以<strong>次数</strong>作为参考。</p><p>当存在热点数据时，LRU的效率很好，但偶发性的、周期性的批量操作会导致LRU命中率急剧下降，缓存污染情况比较严重。这时使用LFU可能更好点。</p><p>根据自身业务类型，配置好maxmemory-policy(默认是noeviction)，推荐使用volatile-lru。如果不设置最大内存，当 Redis 内存超出物理内存限制时，内存的数据会开始和磁盘产生频繁的交换 (swap)，会让 Redis 的性能急剧下降。</p><p>当Redis运行在主从模式时，只有主结点才会执行过期删除策略，然后把删除操作”del key”同步到从结点删除数据。</p><h3 id="四、系统内核参数优化"><a href="#四、系统内核参数优化" class="headerlink" title="四、系统内核参数优化"></a>四、系统内核参数优化</h3><h4 id="vm-swapiness"><a href="#vm-swapiness" class="headerlink" title="vm.swapiness"></a>vm.swapiness</h4><p>swap对于操作系统来说比较重要，当物理内存不足时，可以将一部分内存页进行swap到硬盘上，以解燃眉之急。但世界上没有免费午餐，swap空间由硬盘提供，对于需要高并发、高吞吐的应用来说，磁盘IO通常会成为系统瓶颈。在Linux中，并不是要等到所有物理内存都使用完才会使用到swap，系统参数swppiness会决定操作系统使用swap的倾向程度。swappiness的取值范围是0~100，swappiness的值越大，说明操作系统可能使用swap的概率越高，swappiness值越低，表示操作系统更加倾向于使用物理内存。swappiness的取值越大，说明操作系统可能使用swap的概率越高，越低则越倾向于使用物理内存。</p><p>如果linux内核版本&lt;3.5，那么swapiness设置为0，这样系统宁愿swap也不会oom killer（杀掉进程）</p><p>如果linux内核版本&gt;=3.5，那么swapiness设置为1，这样系统宁愿swap也不会oom killer</p><p>一般需要保证redis不会被kill掉：</p><pre class=" language-java"><code class="language-java">cat <span class="token operator">/</span>proc<span class="token operator">/</span>version  #查看linux内核版本echo <span class="token number">1</span> <span class="token operator">></span> <span class="token operator">/</span>proc<span class="token operator">/</span>sys<span class="token operator">/</span>vm<span class="token operator">/</span>swappinessecho vm<span class="token punctuation">.</span>swapiness<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">>></span> <span class="token operator">/</span>etc<span class="token operator">/</span>sysctl<span class="token punctuation">.</span>conf</code></pre><p>PS：OOM killer 机制是指Linux操作系统发现可用内存不足时，强制杀死一些用户进程（非内核进程），来保证系统有足够的可用内存进行分配。</p><h4 id="vm-overcommit-memory-默认0"><a href="#vm-overcommit-memory-默认0" class="headerlink" title="vm.overcommit_memory(默认0)"></a>vm.overcommit_memory(默认0)</h4><p>0：表示内核将检查是否有足够的可用物理内存(实际不一定用满)供应用进程使用；如果有足够的可用物理内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程　</p><p>1：表示内核允许分配所有的物理内存，而不管当前的内存状态如何</p><p>如果是0的话，可能导致类似fork等操作执行失败，申请不到足够的内存空间</p><p>Redis建议把这个值设置为1，就是为了让fork操作能够在低内存下也执行成功。</p><pre class=" language-java"><code class="language-java">cat <span class="token operator">/</span>proc<span class="token operator">/</span>sys<span class="token operator">/</span>vm<span class="token operator">/</span>overcommit_memoryecho <span class="token string">"vm.overcommit_memory=1"</span> <span class="token operator">>></span> <span class="token operator">/</span>etc<span class="token operator">/</span>sysctl<span class="token punctuation">.</span>confsysctl vm<span class="token punctuation">.</span>overcommit_memory<span class="token operator">=</span><span class="token number">1</span></code></pre><h4 id="合理设置文件句柄数"><a href="#合理设置文件句柄数" class="headerlink" title="合理设置文件句柄数"></a>合理设置文件句柄数</h4><p>操作系统进程试图打开一个文件(或者叫句柄)，但是现在进程打开的句柄数已经达到了上限，继续打开会报错：“Too many open files”</p><pre class=" language-java"><code class="language-java">ulimit <span class="token operator">-</span>a  #查看系统文件句柄数，看open files那项ulimit <span class="token operator">-</span>n <span class="token number">65535</span>  #设置系统文件句柄数</code></pre><h4 id="慢查询日志：slowlog"><a href="#慢查询日志：slowlog" class="headerlink" title="慢查询日志：slowlog"></a>慢查询日志：slowlog</h4><pre class=" language-java"><code class="language-java">Redis慢日志命令说明<span class="token operator">:</span>config get slow<span class="token operator">*</span> #查询有关慢日志的配置信息config set slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than <span class="token number">20000</span>  #设置慢日志使时间阈值<span class="token punctuation">,</span>单位微秒，此处为<span class="token number">20</span>毫秒，即超过<span class="token number">20</span>毫秒的操作都会记录下来，生产环境建议设置<span class="token number">1000</span>，也就是1ms，这样理论上redis并发至少达到<span class="token number">1000</span>，如果要求单机并发达到<span class="token number">1</span>万以上，这个值可以设置为<span class="token number">100</span>config set slowlog<span class="token operator">-</span>max<span class="token operator">-</span>len <span class="token number">1024</span>  #设置慢日志记录保存数量，如果保存数量已满，会删除最早的记录，最新的记录追加进来。记录慢查询日志时Redis会对长命令做截断操作，并不会占用大量内存，建议设置稍大些，防止丢失日志config rewrite #将服务器当前所使用的配置保存到redis<span class="token punctuation">.</span>confslowlog len #获取慢查询日志列表的当前长度slowlog get <span class="token number">5</span> #获取最新的<span class="token number">5</span>条慢查询日志。慢查询日志由四个属性组成：标识ID，发生时间戳，命令耗时，执行命令和参数slowlog reset #重置慢查询日志</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-缓存高可用集群</title>
      <link href="/posts/redis-family/6/"/>
      <url>/posts/redis-family/6/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis缓存设计"><a href="#Redis缓存设计" class="headerlink" title="Redis缓存设计"></a>Redis缓存设计</h2><p><strong>缓存穿透</strong></p><p>缓存穿透是指查询一个根本不存在的数据， 缓存层和存储层都不会命中， 通常出于容错的考虑， 如果从存储层查不到数据则不写入缓存层。</p><p>缓存穿透将导致不存在的数据每次请求都要到存储层去查询， 失去了缓存保护后端存储的意义。</p><p>造成缓存穿透的基本原因有两个：</p><p>第一， 自身业务代码或者数据出现问题。</p><p>第二， 一些恶意攻击、 爬虫等造成大量空命中。 </p><p>缓存穿透问题解决方案：</p><p>1、缓存空对象</p><pre class=" language-java"><code class="language-java">String <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从缓存中获取数据</span>    String cacheValue <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 缓存为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>cacheValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从存储中获取</span>        String storageValue <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> storageValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果存储数据为空， 需要设置一个过期时间(300秒)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>storageValue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cache<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> storageValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 缓存非空</span>        <span class="token keyword">return</span> cacheValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​           </p><p>2、布隆过滤器</p><p>对于恶意攻击，向服务器请求大量不存在的数据造成的缓存穿透，还可以用布隆过滤器先做一次过滤，对于不存在的数据布隆过滤器一般都能够过滤掉，不让请求再往后端发送。当布隆过滤器说<strong>某个值存在时，这个值可能不存在；当它说不存在时，那就肯定不存在。</strong></p><p><img src="/images/redis/bloomFilter.png" alt="bloomFilter"></p><p>布隆过滤器就是<strong>一个大型的位数组和几个不一样的无偏 hash 函数</strong>。所谓无偏就是能够把元素的 hash 值算得比较均匀。</p><p>向布隆过滤器中添加 key 时，会使用多个 hash 函数对 key 进行 hash 算得一个整数索引值然后对位数组长度进行取模运算得到一个位置，每个 hash 函数都会算得一个不同的位置。再把位数组的这几个位置都置为 1 就完成了 add 操作。</p><p>向布隆过滤器询问 key 是否存在时，跟 add 一样，也会把 hash 的几个位置都算出来，看看位数组中这几个位置是否都为 1，只要有一个位为 0，那么说明布隆过滤器中这个key 不存在。如果都是 1，这并不能说明这个 key 就一定存在，只是极有可能存在，因为这些位被置为 1 可能是因为其它的 key 存在所致。如果这个位数组长度比较大，存在概率就会很大，如果这个位数组长度比较小，存在概率就会降低。</p><p>这种方法适用于数据命中不高、 数据相对固定、 实时性低（通常是数据集较大） 的应用场景， 代码维护较为复杂， 但是<strong>缓存空间占用很少</strong>。</p><p>可以用redisson实现布隆过滤器，引入依赖：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>redisson<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>redisson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>   <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>示例伪代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>redisson<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>Redisson<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RBloomFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RedissonClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonBloomFilter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造Redisson</span>        RedissonClient redisson <span class="token operator">=</span> Redisson<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        RBloomFilter<span class="token operator">&lt;</span>String<span class="token operator">></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">"nameList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化布隆过滤器：预计元素为100000000L,误差率为3%,根据这两个参数会计算出底层的bit数组大小</span>        bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span>100000000L<span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将liu插入到布隆过滤器中</span>        bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"liu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断下面号码是否在布隆过滤器中</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"zhang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"guan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"liu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用布隆过滤器需要把所有数据提前放入布隆过滤器，并且在增加数据时也要往布隆过滤器里放，布隆过滤器缓存过滤伪代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//初始化布隆过滤器</span>RBloomFilter<span class="token operator">&lt;</span>String<span class="token operator">></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">"nameList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化布隆过滤器：预计元素为100000000L,误差率为3%</span>bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span>100000000L<span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把所有数据存入布隆过滤器</span><span class="token keyword">void</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>key<span class="token operator">:</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>keys<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>bloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">get</span><span class="token punctuation">(</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>key<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;从布隆过滤器这一级缓存判断下key是否存在</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Boolean<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>exist<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exist<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;从缓存中获取数据</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>cacheValue<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;缓存为空</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>cacheValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;从存储中获取</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>storageValue<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>storageValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;如果存储数据为空，&amp;nbsp;需要设置一个过期时间(300秒)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">(</span>storageValue<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">==</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>cache<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">60</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>storageValue<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;缓存非空</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>cacheValue<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：布隆过滤器不能删除数据，如果要删除得重新初始化数据。</p><p><strong>缓存失效(击穿)</strong></p><p>由于大批量缓存在同一时间失效可能导致大量请求同时穿透缓存直达数据库，可能会造成数据库瞬间压力过大甚至挂掉，对于这种情况我们在批量增加缓存时最好将这一批数据的缓存过期时间设置为一个时间段内的不同时间。</p><p>示例伪代码：</p><pre class=" language-java"><code class="language-java">String <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从缓存中获取数据</span>    String cacheValue <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 缓存为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>cacheValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从存储中获取</span>        String storageValue <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> storageValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置一个过期时间(300到600之间的一个随机数)</span>        <span class="token keyword">int</span> expireTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token number">300</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>storageValue <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cache<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> storageValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 缓存非空</span>        <span class="token keyword">return</span> cacheValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>缓存雪崩</strong></p><p>缓存雪崩指的是缓存层支撑不住或宕掉后， 流量会像奔逃的野牛一样， 打向后端存储层。</p><p>由于缓存层承载着大量请求， 有效地保护了存储层， 但是如果缓存层由于某些原因不能提供服务(比如超大并发过来，缓存层支撑不住，或者由于缓存设计不好，类似大量请求访问bigkey，导致缓存能支撑的并发急剧下降)， 于是大量请求都会打到存储层， 存储层的调用量会暴增， 造成存储层也会级联宕机的情况。 </p><p>预防和解决缓存雪崩问题， 可以从以下三个方面进行着手。</p><p>1） 保证缓存层服务高可用性，比如使用Redis Sentinel或Redis Cluster。</p><p>2） 依赖隔离组件为后端限流熔断并降级。比如使用Sentinel或Hystrix限流降级组件。</p><p>比如服务降级，我们可以针对不同的数据采取不同的处理方式。当业务应用访问的是非核心数据（例如电商商品属性，用户信息等）时，暂时停止从缓存中查询这些数据，而是直接返回预定义的默认降级信息、空值或是错误提示信息；当业务应用访问的是核心数据（例如电商商品库存）时，仍然允许查询缓存，如果缓存缺失，也可以继续通过数据库读取。</p><p>3） 提前演练。 在项目上线前， 演练缓存层宕掉后， 应用以及后端的负载情况以及可能出现的问题， 在此基础上做一些预案设定。</p><p><strong>热点缓存key重建优化</strong></p><p>开发人员使用“缓存+过期时间”的策略既可以加速数据读写， 又保证数据的定期更新， 这种模式基本能够满足绝大部分需求。 但是有两个问题如果同时出现， 可能就会对应用造成致命的危害：</p><ul><li>当前key是一个热点key（例如一个热门的娱乐新闻），并发量非常大。</li><li>重建缓存不能在短时间完成， 可能是一个复杂计算， 例如复杂的SQL、 多次IO、 多个依赖等。</li></ul><p>在缓存失效的瞬间， 有大量线程来重建缓存， 造成后端负载加大， 甚至可能会让应用崩溃。</p><p>要解决这个问题主要就是要避免大量线程同时重建缓存。</p><p>我们可以利用互斥锁来解决，此方法只允许一个线程重建缓存， 其他线程等待重建缓存的线程执行完， 重新从缓存获取数据即可。</p><p>示例伪代码：</p><pre class=" language-java"><code class="language-java">String <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从Redis中获取数据</span>    String value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果value为空， 则开始重构缓存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 只允许一个线程重建缓存， 使用nx， 并设置过期时间ex</span>        String mutexKey <span class="token operator">=</span> <span class="token string">"mutext:key:"</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>mutexKey<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"ex 180"</span><span class="token punctuation">,</span> <span class="token string">"nx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 从数据源获取数据</span>            value <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 回写Redis， 并设置过期时间</span>            redis<span class="token punctuation">.</span><span class="token function">setex</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 删除key_mutex</span>            redis<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>mutexKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 其他线程休息50毫秒后重试</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-缓存高可用集群</title>
      <link href="/posts/redis-family/5/"/>
      <url>/posts/redis-family/5/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis集群方案比较"><a href="#Redis集群方案比较" class="headerlink" title="Redis集群方案比较"></a>Redis集群方案比较</h2><ul><li><p>哨兵模式</p><p>性能和高可用性等各方面表现一般，特别是在主从切换的瞬间存在<font color="red">访问瞬断</font>的情况。另外哨兵模式只有一个主节点对外提供服务，没法支持很高的并发，且单个主节点内存也不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率</p></li><li><p>高可用集群模式</p><p><img src="/images/redis/jedis-cluster.png" alt="jedis-cluster"></p><p>Redis集群是由多个<font color="red">主从节点群组成的分布式服务器群</font>，它具有<font color="red">复制、高可用和分片</font>特性。Redis集群不需要sentinel哨兵也能完成节点移除和故障转移的功能。需要将每个节点设置成集群模式，这种集群模式没有中心节点，可水平扩展，据官方文档称可以线性扩展到上万个节点(<strong>官方推荐不超过1000个节点</strong>)。Redis集群的性能和高可用性均优于之前版本的哨兵模式，且集群配置非常简单</p></li></ul><h2 id="Redis高可用集群搭建"><a href="#Redis高可用集群搭建" class="headerlink" title="Redis高可用集群搭建"></a>Redis高可用集群搭建</h2><h3 id="redis集群搭建"><a href="#redis集群搭建" class="headerlink" title="redis集群搭建"></a>redis集群搭建</h3><p>redis集群需要<font color="red">至少三个master节点</font>，我们这里搭建三个master节点，并且给每个master再搭建一个slave节点，总共6个redis节点，这里用三台机器部署6个redis实例，每台机器一主一从，搭建集群的步骤如下：</p><pre class=" language-java"><code class="language-java">第一步：在第一台机器的<span class="token operator">/</span>usr<span class="token operator">/</span>local下创建文件夹redis<span class="token operator">-</span>cluster，然后在其下面分别创建<span class="token number">2</span>个文件夾如下（<span class="token number">1</span>）mkdir <span class="token operator">-</span>p <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">-</span>cluster（<span class="token number">2</span>）mkdir <span class="token number">8001</span> <span class="token number">8004</span>第一步：把之前的redis<span class="token punctuation">.</span>conf配置文件copy到<span class="token number">8001</span>下，修改如下内容：（<span class="token number">1</span>）daemonize yes（<span class="token number">2</span>）port <span class="token number">8001</span>（分别对每个机器的端口号进行设置）（<span class="token number">3</span>）pidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis_8001<span class="token punctuation">.</span>pid  # 把pid进程号写入pidfile配置的文件（<span class="token number">4</span>）dir <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">-</span>cluster<span class="token operator">/</span><span class="token number">8001</span><span class="token operator">/</span>（指定数据文件存放位置，必须要指定不同的目录位置，不然会丢失数据）（<span class="token number">5</span>）cluster<span class="token operator">-</span>enabled yes（启动集群模式）（<span class="token number">6</span>）cluster<span class="token operator">-</span>config<span class="token operator">-</span>file nodes<span class="token operator">-</span><span class="token number">8001</span><span class="token punctuation">.</span>conf（集群节点信息文件，这里800x最好和port对应上）（<span class="token number">7</span>）cluster<span class="token operator">-</span>node<span class="token operator">-</span>timeout <span class="token function">10000</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span># bind <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>（bind绑定的是自己机器网卡的ip，如果有多块网卡可以配多个ip，代表允许客户端通过机器的哪些网卡ip去访问，内网一般可以不配置bind，注释掉即可） <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">protected</span><span class="token operator">-</span>mode  no   （关闭保护模式） <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>appendonly yes如果要设置密码需要增加如下配置： <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>requirepass <span class="token function">123456</span>     <span class="token punctuation">(</span>设置redis访问密码<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>masterauth <span class="token function">123456</span>      <span class="token punctuation">(</span>设置集群节点间访问密码，跟上面一致<span class="token punctuation">)</span>第三步：把修改后的配置文件，copy到<span class="token number">8004</span>，修改第<span class="token number">2</span>、<span class="token number">3</span>、<span class="token number">4</span>、<span class="token number">6</span>项里的端口号，可以用批量替换：<span class="token operator">:</span><span class="token operator">%</span>s<span class="token operator">/</span>源字符串<span class="token operator">/</span>目的字符串<span class="token operator">/</span>g 第四步：另外两台机器也需要做上面几步操作，第二台机器用<span class="token number">8002</span>和<span class="token number">8005</span>，第三台机器用<span class="token number">8003</span>和<span class="token number">8006</span>第五步：分别启动<span class="token number">6</span>个redis实例，然后检查是否启动成功（<span class="token number">1</span>）<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">-</span>cluster<span class="token operator">/</span><span class="token number">800</span><span class="token operator">*</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>conf（<span class="token number">2</span>）ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep redis 查看是否启动成功    第六步：用redis<span class="token operator">-</span>cli创建整个redis集群<span class="token punctuation">(</span>redis5以前的版本集群是依靠ruby脚本redis<span class="token operator">-</span>trib<span class="token punctuation">.</span>rb实现<span class="token punctuation">)</span># 下面命令里的<span class="token number">1</span>代表为每个创建的主服务器节点创建一个从服务器节点# 执行这条命令需要确认三台机器之间的redis实例要能相互访问，可以先简单把所有机器防火墙关掉，如果不关闭防火墙则需要打开redis服务端口和集群节点gossip通信端口<span class="token function">16379</span><span class="token punctuation">(</span>默认是在redis端口号上加1W<span class="token punctuation">)</span># 关闭防火墙# systemctl stop firewalld # 临时关闭防火墙# systemctl disable firewalld # 禁止开机启动# 注意：下面这条创建集群的命令大家不要直接复制，里面的空格编码可能有问题导致创建集群不成功（<span class="token number">1</span>）<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>a <span class="token number">123456</span> <span class="token operator">--</span>cluster create <span class="token operator">--</span>cluster<span class="token operator">-</span>replicas <span class="token number">1</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.61</span><span class="token operator">:</span><span class="token number">8001</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.62</span><span class="token operator">:</span><span class="token number">8002</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.63</span><span class="token operator">:</span><span class="token number">8003</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.61</span><span class="token operator">:</span><span class="token number">8004</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.62</span><span class="token operator">:</span><span class="token number">8005</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.63</span><span class="token operator">:</span><span class="token number">8006</span> 第七步：验证集群：（<span class="token number">1</span>）连接任意一个客户端即可：<span class="token punctuation">.</span>/redis<span class="token operator">-</span>cli <span class="token operator">-</span>c <span class="token operator">-</span>h <span class="token operator">-</span><span class="token function">p</span> <span class="token punctuation">(</span><span class="token operator">-</span>a访问服务端密码，<span class="token operator">-</span>c表示集群模式，指定ip地址和端口号）    如：<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>a <span class="token number">123456</span> <span class="token operator">-</span>c <span class="token operator">-</span>h <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.61</span> <span class="token operator">-</span>p <span class="token number">800</span><span class="token operator">*</span>（<span class="token number">2</span>）进行验证： cluster info（查看集群信息）、cluster nodes（查看节点列表）（<span class="token number">3</span>）进行数据操作验证（<span class="token number">4</span>）关闭集群则需要逐个进行关闭，使用命令：<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>a <span class="token number">123456</span> <span class="token operator">-</span>c <span class="token operator">-</span>h <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token operator">-</span>p <span class="token number">800</span><span class="token operator">*</span> shutdown</code></pre><h2 id="Java操作redis集群"><a href="#Java操作redis集群" class="headerlink" title="Java操作redis集群"></a>Java操作redis集群</h2><p>redis的java客户端jedis，引入相关依赖：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>pool2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>访问代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisClusterTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>HostAndPort<span class="token operator">></span> jedisClusterNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>HostAndPort<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisClusterNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.0.61"</span><span class="token punctuation">,</span> <span class="token number">8001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisClusterNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.0.62"</span><span class="token punctuation">,</span> <span class="token number">8002</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisClusterNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.0.63"</span><span class="token punctuation">,</span> <span class="token number">8003</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisClusterNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.0.61"</span><span class="token punctuation">,</span> <span class="token number">8004</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisClusterNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.0.62"</span><span class="token punctuation">,</span> <span class="token number">8005</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisClusterNode<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.0.63"</span><span class="token punctuation">,</span> <span class="token number">8006</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JedisCluster jedisCluster <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//connectionTimeout：指的是连接一个url的连接等待时间</span>            <span class="token comment" spellcheck="true">//soTimeout：指的是连接上一个url，获取response的返回等待时间</span>            jedisCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisCluster</span><span class="token punctuation">(</span>jedisClusterNode<span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedisCluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"cluster"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedisCluster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"cluster"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jedisCluster <span class="token operator">!=</span> null<span class="token punctuation">)</span>                jedisCluster<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行效果如下：OK<span class="token number">123456</span></code></pre><p>集群的Spring Boot整合Redis，引入相关依赖：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>pool2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>springboot项目核心配置：</p><pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8080</span>spring<span class="token operator">:</span>  redis<span class="token operator">:</span>    database<span class="token operator">:</span> <span class="token number">0</span>    timeout<span class="token operator">:</span> <span class="token number">3000</span>    password<span class="token operator">:</span> <span class="token number">123456</span>    cluster<span class="token operator">:</span>      nodes<span class="token operator">:</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.61</span><span class="token operator">:</span><span class="token number">8001</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.62</span><span class="token operator">:</span><span class="token number">8002</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.63</span><span class="token operator">:</span><span class="token number">8003</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.61</span><span class="token operator">:</span><span class="token number">8004</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.62</span><span class="token operator">:</span><span class="token number">8005</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.63</span><span class="token operator">:</span><span class="token number">8006</span>   lettuce<span class="token operator">:</span>      pool<span class="token operator">:</span>        max<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">50</span>        min<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">10</span>        max<span class="token operator">-</span>active<span class="token operator">:</span> <span class="token number">100</span>        max<span class="token operator">-</span>wait<span class="token operator">:</span> <span class="token number">1000</span></code></pre><p>访问代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>IndexController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test_cluster"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>       stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"gc"</span><span class="token punctuation">,</span> <span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"gc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Redis集群原理分析"><a href="#Redis集群原理分析" class="headerlink" title="Redis集群原理分析"></a>Redis集群原理分析</h2><p>Redis Cluster 将所有数据划分为 16384 个 slots(槽位)，每个节点负责其中一部分槽位。槽位的信息存储于每个节点中。</p><p>当 Redis Cluster 的客户端来连接集群时，它也会得到一份集群的槽位配置信息并将其缓存在客户端本地。这样当客户端要查找某个 key 时，可以直接定位到目标节点。同时因为槽位的信息可能会存在客户端与服务器不一致的情况，还需要纠正机制来实现槽位信息的校验调整。</p><h3 id="槽位定位算法"><a href="#槽位定位算法" class="headerlink" title="槽位定位算法"></a>槽位定位算法</h3><p>Cluster 默认会对 key 值使用 crc16 算法进行 hash 得到一个整数值，然后用这个整数值对 16384 进行取模来得到具体槽位。</p><p><font color="red">HASH_SLOT = CRC16(key) mod 16384</font></p><h3 id="跳转重定位"><a href="#跳转重定位" class="headerlink" title="跳转重定位"></a>跳转重定位</h3><p>当客户端向一个错误的节点发出了指令，该节点会发现指令的 key 所在的槽位并不归自己管理，这时它会向客户端发送一个特殊的跳转指令携带目标操作的节点地址，告诉客户端去连这个节点去获取数据。客户端收到指令后除了跳转到正确的节点上去操作，还会同步更新纠正本地的槽位映射表缓存，后续所有 key 将使用新的槽位映射表。</p><h3 id="Redis集群节点间的通信机制"><a href="#Redis集群节点间的通信机制" class="headerlink" title="Redis集群节点间的通信机制"></a>Redis集群节点间的通信机制</h3><p>redis cluster节点间采取gossip协议进行通信 </p><p>维护集群的元数据(集群节点信息，主从角色，节点数量，各节点共享的数据等)有两种方式：集中式和gossip </p><p><strong>集中式：</strong> </p><p>优点在于元数据的更新和读取，时效性非常好，一旦元数据出现变更立即就会更新到集中式的存储中，其他节点读取的时候立即就可以立即感知到；不足在于所有的元数据的更新压力全部集中在一个地方，可能导致元数据的存储压力。 很多中间件都会借助zookeeper集中式存储元数据。</p><p><strong>gossip：</strong></p><p><img src="/images/redis/gossip.gif" alt="gossip"></p><p>gossip协议包含多种消息，包括ping，pong，meet，fail等等。 </p><p><font color="red">meet：</font>某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点进行通信；</p><p><font color="red">ping：</font>每个节点都会频繁给其他节点发送ping，其中包含自己的状态还有自己维护的集群元数据，互相通过ping交换元数据(类似自己感知到的集群节点增加和移除，hash slot信息等)； </p><p><font color="red">pong：</font>对ping和meet消息的返回，包含自己的状态和其他信息，也可以用于信息广播和更新； </p><p><font color="red">fail：</font>某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了。</p><p>gossip协议的优点在于元数据的更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上去更新，有一定的延时，降低了压力；缺点在于元数据更新有延时可能导致集群的一些操作会有一些滞后。</p><p><strong>gossip通信的10000端口</strong> </p><p>每个节点都有一个专门用于节点间gossip通信的端口，就是自己提供服务的端口号+10000，比如7001，那么用于节点间通信的就是17001端口。 每个节点每隔一段时间都会往另外几个节点发送ping消息，同时其他几点接收到ping消息之后返回pong消息。</p><p><strong>网络抖动</strong></p><p>真实世界的机房网络往往并不是风平浪静的，它们经常会发生各种各样的小问题。比如网络抖动就是非常常见的一种现象，突然之间部分连接变得不可访问，然后很快又恢复正常。</p><p>为解决这种问题，Redis Cluster 提供了一种选项<code>cluster-node-timeout</code>，表示当某个节点持续 timeout 的时间失联时，才可以认定该节点出现故障，需要进行主从切换。如果没有这个选项，网络抖动会导致主从频繁切换 (数据的重新复制)。</p><p><strong>Redis集群选举原理分析</strong></p><p>当slave发现自己的master变为FAIL状态时，便尝试进行Failover，期望成为新的master。由于挂掉的master可能会有多个slave，从而存在多个slave竞争成为master节点的过程， 其过程如下：</p><p>1、slave发现自己的master变为FAIL</p><p>2、将自己记录的集群currentEpoch加1，并广播FAILOVER_AUTH_REQUEST 信息</p><p>3、其他节点收到该信息，只有master响应，判断请求者的合法性，并发送FAILOVER_AUTH_ACK，对每一个epoch只发送一次ack</p><p>4、尝试failover的slave收集master返回的FAILOVER_AUTH_ACK</p><p>5、slave收到<font color="red">超过半数master的ack</font>后变成新Master(这里解释了集群为什么至少需要三个主节点，如果只有两个，当其中一个挂了，只剩一个主节点是不能选举成功的)</p><p>6、slave广播Pong消息通知其他集群节点。</p><p>从节点并不是在主节点一进入 FAIL 状态就马上尝试发起选举，而是有一定延迟，一定的延迟确保我们等待FAIL状态在集群中传播，slave如果立即尝试选举，其它masters或许尚未意识到FAIL状态，可能会拒绝投票</p><p>延迟计算公式：<code>                DELAY = 500ms + random(0 ~ 500ms) + SLAVE_RANK * 1000ms             </code></p><p>SLAVE_RANK表示此slave已经从master复制数据的总量的rank。Rank越小代表已复制的数据越新。这种方式下，持有最新数据的slave将会首先发起选举（理论上）</p><p><strong>集群脑裂数据丢失问题</strong></p><p>redis集群没有过半机制会有脑裂问题，网络分区导致脑裂后多个主节点对外提供写服务，一旦网络分区恢复，会将其中一个主节点变为从节点，这时会有大量数据丢失。</p><p>规避方法可以在redis配置里加上参数(这种方法不可能百分百避免数据丢失，参考集群leader选举机制)：</p><pre class=" language-java"><code class="language-java">min<span class="token operator">-</span>slaves<span class="token operator">-</span>to<span class="token operator">-</span>write <span class="token number">1</span> <span class="token comment" spellcheck="true">//写数据成功最少同步的slave数量，这个数量可以模仿大于半数机制配置，比如集群总共三个节点可以配置1，加上leader就是2，超过了半数，该参数在redis最新版本里名字已经换成了min-replicas-to-write</span></code></pre><p><strong>注意</strong>：这个配置在一定程度上会影响集群的可用性，比如slave要是少于1个，这个集群就算leader正常也不能提供服务了，需要具体场景权衡选择。</p><p><strong>集群是否完整才能对外提供服务</strong></p><p>当redis.conf的配置cluster-require-full-coverage为no时，表示当负责一个插槽的主库下线且没有相应的从库进行故障恢复时，集群仍然可用，如果为yes则集群不可用。</p><p><strong>Redis集群为什么至少需要三个master节点，并且推荐节点数为奇数？</strong></p><p>因为新master的选举需要大于半数的集群master节点同意才能选举成功，如果只有两个master节点，当其中一个挂了，是达不到选举新master的条件的。</p><p>奇数个master节点可以在满足选举该条件的基础上节省一个节点，比如三个master节点和四个master节点的集群相比，大家如果都挂了一个master节点都能选举新master节点，如果都挂了两个master节点都没法选举新master节点了，所以奇数的master节点更多的是<strong>从节省机器资源角度出发</strong>说的。</p><p><strong>Redis集群对批量操作命令的支持</strong></p><p>对于类似mset，mget这样的多个key的原生批量操作命令，redis集群只支持所有key落在同一slot的情况，如果有多个key一定要用mset命令在redis集群上操作，则可以在key的前面加上{XX}，这样参数数据分片hash计算的只会是大括号里的值，这样能确保不同的key能落到同一slot里去，示例如下：</p><pre class=" language-java"><code class="language-java">mset <span class="token punctuation">{</span>user1<span class="token punctuation">}</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>name gc <span class="token punctuation">{</span>user1<span class="token punctuation">}</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span>age <span class="token number">18</span>              </code></pre><p>假设name和age计算的hash slot值不一样，但是这条命令在集群下执行，redis只会用大括号里的 user1 做hash slot计算，所以算出来的slot值肯定相同，最后都能落在同一slot。</p><p><strong>哨兵leader选举流程</strong></p><p>当一个master服务器被某sentinel视为下线状态后，该sentinel会与其他sentinel协商选出sentinel的leader进行故障转移工作。每个发现master服务器进入下线的sentinel都可以要求其他sentinel选自己为sentinel的leader，选举是先到先得。同时每个sentinel每次选举都会自增配置纪元(选举周期)，每个纪元中只会选择一个sentinel的leader。如果所有超过一半的sentinel选举某sentinel作为leader。之后该sentinel进行故障转移操作，从存活的slave中选举出新的master，这个选举过程跟集群的master选举很类似。</p><p>哨兵集群只有一个哨兵节点，redis的主从也能正常运行以及选举master，如果master挂了，那唯一的那个哨兵节点就是哨兵leader了，可以正常选举新master。</p><p>不过为了高可用一般都推荐至少部署三个哨兵节点。为什么推荐奇数个哨兵节点原理跟集群奇数个master节点类似。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-主从与哨兵架构</title>
      <link href="/posts/redis-family/4/"/>
      <url>/posts/redis-family/4/</url>
      
        <content type="html"><![CDATA[<h2 id="Jedis使用"><a href="#Jedis使用" class="headerlink" title="Jedis使用"></a>Jedis使用</h2><h4 id="Jedis连接代码示例："><a href="#Jedis连接代码示例：" class="headerlink" title="Jedis连接代码示例："></a>Jedis连接代码示例：</h4><p>1、引入依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>redis<span class="token punctuation">.</span>clients<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jedis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>2、访问代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisSingleTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        JedisPoolConfig jedisPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedisPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// timeout，这里既是连接超时又是读写超时，从Jedis 2.8开始有区分connectionTimeout和soTimeout的构造函数</span>        JedisPool jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">,</span> <span class="token string">"192.168.0.4"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                Jedis jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"single"</span><span class="token punctuation">,</span> <span class="token string">"gc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// OK</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"single"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// gc</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：如果是购买的云服务器，需要在安全组添加端口规则</p><span id="more"></span> <h4 id="管道（Pipeline）"><a href="#管道（Pipeline）" class="headerlink" title="管道（Pipeline）"></a>管道（Pipeline）</h4><p>客户端可以一次性发送多个请求而不用等待服务器的响应，待所有命令都发送完后再一次性读取服务的响应，这样可以极大的降低多条命令执行的网络传输开销，管道执行多条命令的网络开销实际上只相当于一次命令执行的网络开销。需要注意到是用pipeline方式打包命令发送，redis必须在<strong>处理完所有命令前先缓存起所有命令的处理结果</strong>。打包的命令越多，缓存消耗内存也越多。所以并不是打包的命令越多越好。</p><p>pipeline中发送的每个command都会被server立即执行，如果执行失败，将会在此后的响应中得到信息；也就是pipeline并不是表达“所有command都一起成功”的语义，管道中前面命令失败，后面命令不会有影响，继续执行</p><pre class=" language-java"><code class="language-java">Pipeline pl <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">pipelined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pl<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">"pipelineKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"gc"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟管道报错</span>    <span class="token comment" spellcheck="true">// pl.setbit("gc", -1, true);</span><span class="token punctuation">}</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span> results <span class="token operator">=</span> pl<span class="token punctuation">.</span><span class="token function">syncAndReturnAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> OK<span class="token punctuation">]</span>报错输出：<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>JedisDataException<span class="token operator">:</span> ERR bit offset is not an integer or out of range<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> OK<span class="token punctuation">,</span> 省略<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><h4 id="Redis-Lua脚本"><a href="#Redis-Lua脚本" class="headerlink" title="Redis Lua脚本"></a>Redis Lua脚本</h4><p>Redis在2.6推出了脚本功能，允许开发者使用Lua语言编写脚本传到Redis中执行。使用脚本的好处:</p><p>1、<strong>减少网络开销</strong>：本来5次网络请求的操作，可以用一个请求完成，原先5次请求的逻辑放在redis服务器上完成。使用脚本，减少了网络往返时延。<strong>这点跟管道类似</strong>。</p><p>2、<strong>原子操作</strong>：Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。<strong>管道不是原子的，不过redis的批量操作命令(类似mset)是原子的。</strong></p><p>3、<strong>替代redis的事务功能</strong>：redis自带的事务功能很鸡肋，而redis的lua脚本几乎实现了常规的事务功能，官方推荐如果要使用redis的事务功能可以用redis lua替代。</p><p><strong>官网文档描述：</strong></p><blockquote><p>A Redis script is transactional by definition, so everything you can do with a Redis transaction, you can also do with a script,  and usually the script will be both simpler and faster.       </p></blockquote><p>从Redis2.6.0版本开始，通过内置的Lua解释器，可以使用EVAL命令对Lua脚本进行求值。语法：</p><pre class=" language-java"><code class="language-java">EVAL script numkeys key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> arg <span class="token punctuation">[</span>arg <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span></code></pre><p>script参数是一段Lua脚本程序，它会被运行在Redis服务器上下文中，这段脚本<strong>不必(也不应该)定义为一个Lua函数</strong>。</p><p>numkeys参数用于指定键名参数的个数。</p><p>键名参数 key [key …]，可以在Lua中通过全局变量KEYS数组访问：KEYS[1]，KEYS[2]，以此类推。</p><p>附加参数 arg [arg …]，可以在Lua中通过全局变量<strong>ARGV</strong>数组访问，ARGV[1] 、 ARGV[2] ，以此类推</p><pre class=" language-java"><code class="language-java"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">></span> eval <span class="token string">"return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}"</span> <span class="token number">2</span> key1 key2 first second<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"key1"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"key2"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"first"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"second"</span></code></pre><p>在 Lua 脚本中，可以使用**redis.call()**函数来执行Redis命令</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// lua脚本模拟一个商品减库存的原子操作</span><span class="token comment" spellcheck="true">// lua脚本命令执行方式：redis-cli --eval /tmp/test.lua , 10</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"product_count_10016"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化商品10016的库存</span>String script <span class="token operator">=</span> <span class="token string">" local count = redis.call('get', KEYS[1]) "</span> <span class="token operator">+</span>    <span class="token string">" local a = tonumber(count) "</span> <span class="token operator">+</span>    <span class="token string">" local b = tonumber(ARGV[1]) "</span> <span class="token operator">+</span>    <span class="token string">" if a >= b then "</span> <span class="token operator">+</span>    <span class="token string">"   redis.call('set', KEYS[1], a-b) "</span> <span class="token operator">+</span>    <span class="token string">"   return 1 "</span> <span class="token operator">+</span>    <span class="token string">" end "</span> <span class="token operator">+</span>    <span class="token string">" return 0 "</span><span class="token punctuation">;</span>Object obj <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"product_count_10016"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><strong>注意，不要在Lua脚本中出现死循环和耗时的运算，否则redis会阻塞，将不接受其他的命令， 所以使用时要注意不能出现死循环、耗时的运算。redis是单进程、单线程执行脚本。管道不会阻塞redis。</strong></p><h2 id="Redis哨兵高可用架构"><a href="#Redis哨兵高可用架构" class="headerlink" title="Redis哨兵高可用架构"></a>Redis哨兵高可用架构</h2><p><img src="/images/redis/redis-sentinel.png" alt="redis-sentinel"></p><p>sentinel哨兵是特殊的redis服务，不提供读写服务，主要用来监控redis实例节点。</p><p>哨兵架构下client端第一次从哨兵找出redis的主节点，后续就直接访问redis的主节点，不会每次都通过sentinel代理访问redis的主节点，当redis的主节点发生变化，哨兵会第一时间感知到，并且将新的redis主节点通知给client端(这里面redis的client端一般都实现了订阅功能，订阅sentinel发布的节点变动消息)</p><h3 id="redis哨兵架构搭建步骤"><a href="#redis哨兵架构搭建步骤" class="headerlink" title="redis哨兵架构搭建步骤"></a>redis哨兵架构搭建步骤</h3><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、复制一份sentinel<span class="token punctuation">.</span>conf文件cp sentinel<span class="token punctuation">.</span>conf sentinel<span class="token operator">-</span><span class="token number">26379</span><span class="token punctuation">.</span>conf<span class="token number">2</span>、将相关配置修改为如下值：port <span class="token number">26379</span>daemonize yespidfile <span class="token string">"/var/run/redis-sentinel-26379.pid"</span>logfile <span class="token string">"26379.log"</span>dir <span class="token string">"/usr/local/redis-5.0.3/data"</span># sentinel monitor <span class="token operator">&lt;</span>master<span class="token operator">-</span>redis<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>master<span class="token operator">-</span>redis<span class="token operator">-</span>ip<span class="token operator">></span> <span class="token operator">&lt;</span>master<span class="token operator">-</span>redis<span class="token operator">-</span>port<span class="token operator">></span> <span class="token operator">&lt;</span>quorum<span class="token operator">></span># quorum是一个数字，指明当有多少个sentinel认为一个master失效时<span class="token punctuation">(</span>值一般为：sentinel总数<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>，master才算真正失效sentinel monitor mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">6379</span> <span class="token number">2</span>   # mymaster这个名字随便取，客户端访问时会用到<span class="token number">3</span>、启动sentinel哨兵实例src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel<span class="token operator">-</span><span class="token number">26379</span><span class="token punctuation">.</span>conf<span class="token number">4</span>、查看sentinel的info信息src<span class="token operator">/</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>p <span class="token number">26379</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">26379</span><span class="token operator">></span>info可以看到Sentinel的info里已经识别出了redis的主从<span class="token number">5</span>、可以自己再配置两个sentinel，端口<span class="token number">26380</span>和<span class="token number">26381</span>，注意上述配置文件里的对应数字都要修改</code></pre><p>云服务器的配置项<code>&lt;master-redis-ip&gt;</code>修改为公网IP后测试成功</p><p>sentinel集群都启动完毕后，会将哨兵集群的元数据信息写入所有sentinel的配置文件里去(追加在文件的最下面)，我们查看下如下配置文件sentinel-26379.conf，如下所示：</p><pre class=" language-java"><code class="language-java">sentinel known<span class="token operator">-</span>replica mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">6381</span>#代表主节点的从节点信息sentinel known<span class="token operator">-</span>replica mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">6380</span>#代表主节点的从节点信息sentinel known<span class="token operator">-</span>sentinel mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">26381</span> 569cb30eefa70d33927d8dfd79360bd11b58b9de #代表感知到的其它哨兵节点sentinel known<span class="token operator">-</span>sentinel mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">26380</span> a38226cc8e7f3f71427eaa1bb2b50de07eadd21d #代表感知到的其它哨兵节点</code></pre><p>如果哨兵节点之间互相感应不到，检查<font color="red">配置文件中，用于标识哨兵唯一性的myid是不是重复的</font></p><p><img src="/images/redis/sentinel-1.png" alt="sentinel-1"></p><p><strong>注意：</strong>如果哨兵节点已经启动了，然后再复制一份修改为其他的哨兵节点，这种情况如果没有删除已经生成的myid，就会导致哨兵节点之间不想感应不到，因为它们的myid是相同的</p><p>当redis主节点如果挂了，哨兵集群会重新选举出新的redis主节点，同时会修改所有sentinel节点配置文件的集群元数据信息，比如6379的redis如果挂了，假设选举出的新主节点是6380，则sentinel文件里的集群元数据信息会变成如下所示：</p><pre class=" language-java"><code class="language-java">sentinel known<span class="token operator">-</span>replica mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">6379</span>#代表主节点的从节点信息sentinel known<span class="token operator">-</span>replica mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">6381</span>#代表主节点的从节点信息sentinel known<span class="token operator">-</span>sentinel mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">26381</span> 569cb30eefa70d33927d8dfd79360bd11b58b9de #代表感知到的其它哨兵节点sentinel known<span class="token operator">-</span>sentinel mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">26380</span> a38226cc8e7f3f71427eaa1bb2b50de07eadd21d #代表感知到的其它哨兵节点</code></pre><p>同时还会修改sentinel文件里之前配置的mymaster对应的6379端口，改为6380</p><pre class=" language-java"><code class="language-java">sentinel monitor mymaster <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">6380</span> <span class="token number">2</span></code></pre><p>当6379的redis实例再次启动时，哨兵集群根据集群元数据信息就可以将6379端口的redis节点作为从节点加入集群</p><p>测试代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisSingleTest2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        JedisPoolConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String masterName <span class="token operator">=</span> <span class="token string">"mymaster"</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> sentinels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.0.60"</span><span class="token punctuation">,</span> <span class="token number">26379</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.0.60"</span><span class="token punctuation">,</span> <span class="token number">26380</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HostAndPort</span><span class="token punctuation">(</span><span class="token string">"192.168.0.60"</span><span class="token punctuation">,</span> <span class="token number">26381</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// JedisSentinelPool其实本质跟JedisPool类似，都是与redis主节点建立的连接池</span>        <span class="token comment" spellcheck="true">// JedisSentinelPool并不是说与sentinel建立的连接池，而是通过sentinel发现redis主节点并与其建立连接</span>        JedisSentinelPool jedisSentinelPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisSentinelPool</span><span class="token punctuation">(</span>masterName<span class="token punctuation">,</span> sentinels<span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            jedis <span class="token operator">=</span> jedisSentinelPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"sentinel"</span><span class="token punctuation">,</span> <span class="token string">"gc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sentinel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span>                jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="哨兵的Spring-Boot整合Redis连接"><a href="#哨兵的Spring-Boot整合Redis连接" class="headerlink" title="哨兵的Spring Boot整合Redis连接"></a>哨兵的Spring Boot整合Redis连接</h3><p>1、引入相关依赖：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>   <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>   <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>commons<span class="token operator">-</span>pool2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>2、springboot项目核心配置：</p><pre class=" language-java"><code class="language-java">server<span class="token operator">:</span>  port<span class="token operator">:</span> <span class="token number">8080</span>spring<span class="token operator">:</span>  redis<span class="token operator">:</span>    database<span class="token operator">:</span> <span class="token number">0</span>    timeout<span class="token operator">:</span> <span class="token number">3000</span>    sentinel<span class="token operator">:</span>    #哨兵模式      master<span class="token operator">:</span> mymaster #主服务器所在集群名称      nodes<span class="token operator">:</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span><span class="token operator">:</span><span class="token number">26379</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span><span class="token operator">:</span><span class="token number">26380</span><span class="token punctuation">,</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span><span class="token operator">:</span><span class="token number">26381</span>   lettuce<span class="token operator">:</span>      pool<span class="token operator">:</span>        max<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">50</span>        min<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">10</span>        max<span class="token operator">-</span>active<span class="token operator">:</span> <span class="token number">100</span>        max<span class="token operator">-</span>wait<span class="token operator">:</span> <span class="token number">1000</span></code></pre><p>访问代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>IndexController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试节点挂了哨兵重新选举新的master节点，客户端是否能动态感知到     * 新的master选举出来后，哨兵会把消息发布出去，客户端实际上是实现了一个消息监听机制，     * 当哨兵把新master的消息发布出去，客户端会立马感知到新master的信息，从而动态切换访问的masterip     *     * @throws InterruptedException     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test_sentinel"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSentinel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"gc"</span><span class="token operator">+</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置key："</span><span class="token operator">+</span> <span class="token string">"gc"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"错误："</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="StringRedisTemplate与RedisTemplate详解"><a href="#StringRedisTemplate与RedisTemplate详解" class="headerlink" title="StringRedisTemplate与RedisTemplate详解"></a>StringRedisTemplate与RedisTemplate详解</h3><p>spring 封装了 RedisTemplate 对象来进行对redis的各种操作，它支持所有的 redis 原生的 api。在RedisTemplate中提供了几个常用的接口方法的使用，分别是：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ValueOperations<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> valueOps<span class="token punctuation">;</span><span class="token keyword">private</span> HashOperations<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> hashOps<span class="token punctuation">;</span><span class="token keyword">private</span> ListOperations<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> listOps<span class="token punctuation">;</span><span class="token keyword">private</span> SetOperations<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> setOps<span class="token punctuation">;</span><span class="token keyword">private</span> ZSetOperations<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> zSetOps<span class="token punctuation">;</span></code></pre><p>RedisTemplate中定义了对5种数据结构操作：</p><pre class=" language-java"><code class="language-java">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作字符串</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作hash</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作list</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作set</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作有序set</span></code></pre><p>StringRedisTemplate继承自RedisTemplate，也一样拥有上面这些操作。</p><p>StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。</p><p>RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。</p><h3 id="Redis客户端命令对应的RedisTemplate中的方法列表："><a href="#Redis客户端命令对应的RedisTemplate中的方法列表：" class="headerlink" title="Redis客户端命令对应的RedisTemplate中的方法列表："></a>Redis客户端命令对应的RedisTemplate中的方法列表：</h3><table><thead><tr><th><strong>String类型结构</strong></th><th></th></tr></thead><tbody><tr><td>Redis</td><td>RedisTemplate rt</td></tr><tr><td>set key value</td><td>rt.opsForValue().set(“key”,”value”)</td></tr><tr><td>get key</td><td>rt.opsForValue().get(“key”)</td></tr><tr><td>del key</td><td>rt.delete(“key”)</td></tr><tr><td>strlen key</td><td>rt.opsForValue().size(“key”)</td></tr><tr><td>getset key value</td><td>rt.opsForValue().getAndSet(“key”,”value”)</td></tr><tr><td>getrange key start end</td><td>rt.opsForValue().get(“key”,start,end)</td></tr><tr><td>append key value</td><td>rt.opsForValue().append(“key”,”value”)</td></tr><tr><td></td><td></td></tr><tr><td><strong>Hash结构</strong></td><td></td></tr><tr><td>hmset key field1 value1 field2 value2…</td><td>rt.opsForHash().putAll(“key”,map) //map是一个集合对象</td></tr><tr><td>hset key field value</td><td>rt.opsForHash().put(“key”,”field”,”value”)</td></tr><tr><td>hexists key field</td><td>rt.opsForHash().hasKey(“key”,”field”)</td></tr><tr><td>hgetall key</td><td>rt.opsForHash().entries(“key”) //返回Map对象</td></tr><tr><td>hvals key</td><td>rt.opsForHash().values(“key”) //返回List对象</td></tr><tr><td>hkeys key</td><td>rt.opsForHash().keys(“key”) //返回List对象</td></tr><tr><td>hmget key field1 field2…</td><td>rt.opsForHash().multiGet(“key”,keyList)</td></tr><tr><td>hsetnx key field value</td><td>rt.opsForHash().putIfAbsent(“key”,”field”,”value”</td></tr><tr><td>hdel key field1 field2</td><td>rt.opsForHash().delete(“key”,”field1”,”field2”)</td></tr><tr><td>hget key field</td><td>rt.opsForHash().get(“key”,”field”)</td></tr><tr><td></td><td></td></tr><tr><td><strong>List结构</strong></td><td></td></tr><tr><td>lpush list node1 node2 node3…</td><td>rt.opsForList().leftPush(“list”,”node”)</td></tr><tr><td>rt.opsForList().leftPushAll(“list”,list) //list是集合对象</td><td></td></tr><tr><td>rpush list node1 node2 node3…</td><td>rt.opsForList().rightPush(“list”,”node”)</td></tr><tr><td>rt.opsForList().rightPushAll(“list”,list) //list是集合对象</td><td></td></tr><tr><td>lindex key index</td><td>rt.opsForList().index(“list”, index)</td></tr><tr><td>llen key</td><td>rt.opsForList().size(“key”)</td></tr><tr><td>lpop key</td><td>rt.opsForList().leftPop(“key”)</td></tr><tr><td>rpop key</td><td>rt.opsForList().rightPop(“key”)</td></tr><tr><td>lpushx list node</td><td>rt.opsForList().leftPushIfPresent(“list”,”node”)</td></tr><tr><td>rpushx list node</td><td>rt.opsForList().rightPushIfPresent(“list”,”node”)</td></tr><tr><td>lrange list start end</td><td>rt.opsForList().range(“list”,start,end)</td></tr><tr><td>lrem list count value</td><td>rt.opsForList().remove(“list”,count,”value”)</td></tr><tr><td>lset key index value</td><td>rt.opsForList().set(“list”,index,”value”)</td></tr><tr><td></td><td></td></tr><tr><td><strong>Set结构</strong></td><td></td></tr><tr><td>sadd key member1 member2…</td><td>rt.boundSetOps(“key”).add(“member1”,”member2”,…)</td></tr><tr><td>rt.opsForSet().add(“key”, set) //set是一个集合对象</td><td></td></tr><tr><td>scard key</td><td>rt.opsForSet().size(“key”)</td></tr><tr><td>sidff key1 key2</td><td>rt.opsForSet().difference(“key1”,”key2”) //返回一个集合对象</td></tr><tr><td>sinter key1 key2</td><td>rt.opsForSet().intersect(“key1”,”key2”)//同上</td></tr><tr><td>sunion key1 key2</td><td>rt.opsForSet().union(“key1”,”key2”)//同上</td></tr><tr><td>sdiffstore des key1 key2</td><td>rt.opsForSet().differenceAndStore(“key1”,”key2”,”des”)</td></tr><tr><td>sinter des key1 key2</td><td>rt.opsForSet().intersectAndStore(“key1”,”key2”,”des”)</td></tr><tr><td>sunionstore des key1 key2</td><td>rt.opsForSet().unionAndStore(“key1”,”key2”,”des”)</td></tr><tr><td>sismember key member</td><td>rt.opsForSet().isMember(“key”,”member”)</td></tr><tr><td>smembers key</td><td>rt.opsForSet().members(“key”)</td></tr><tr><td>spop key</td><td>rt.opsForSet().pop(“key”)</td></tr><tr><td>srandmember key count</td><td>rt.opsForSet().randomMember(“key”,count)</td></tr><tr><td>srem key member1 member2…</td><td>rt.opsForSet().remove(“key”,”member1”,”member2”,…)</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-持久化</title>
      <link href="/posts/redis-family/3/"/>
      <url>/posts/redis-family/3/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h3 id="RDB快照（snapshot）"><a href="#RDB快照（snapshot）" class="headerlink" title="RDB快照（snapshot）"></a>RDB快照（snapshot）</h3><p>Redis 的内存数据库快照默认保存在 <code>dump.rdb</code> 二进制文件中。</p><p><code>redis.conf</code>配置文件描述如下：</p><pre class=" language-java"><code class="language-java"># Save the DB to disk<span class="token punctuation">.</span>## save <span class="token operator">&lt;</span>seconds<span class="token operator">></span> <span class="token operator">&lt;</span>changes<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>seconds<span class="token operator">></span> <span class="token operator">&lt;</span>changes<span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>## Redis will save the DB <span class="token keyword">if</span> the given number of seconds elapsed and it# surpassed the given number of write operations against the DB<span class="token punctuation">.</span>## Snapshotting can be completely disabled with a single empty string argument# as in following example<span class="token operator">:</span>## save <span class="token string">""</span>## Unless specified otherwise<span class="token punctuation">,</span> by <span class="token keyword">default</span> Redis will save the DB<span class="token operator">:</span>#   <span class="token operator">*</span> After <span class="token number">3600</span> <span class="token function">seconds</span> <span class="token punctuation">(</span>an hour<span class="token punctuation">)</span> <span class="token keyword">if</span> at least <span class="token number">1</span> change was performed#   <span class="token operator">*</span> After <span class="token number">300</span> <span class="token function">seconds</span> <span class="token punctuation">(</span><span class="token number">5</span> minutes<span class="token punctuation">)</span> <span class="token keyword">if</span> at least <span class="token number">100</span> changes were performed#   <span class="token operator">*</span> After <span class="token number">60</span> seconds <span class="token keyword">if</span> at least <span class="token number">10000</span> changes were performed## You can set these explicitly by uncommenting the following line<span class="token punctuation">.</span>## save <span class="token number">3600</span> <span class="token number">1</span> <span class="token number">300</span> <span class="token number">100</span> <span class="token number">60</span> <span class="token number">10000</span></code></pre><p>生成RDB快照命令：<strong>save</strong>或<strong>bgsave</strong>（redis客户端执行命令，每次执行生成新的rdb文件，覆盖原有的）</p><p><strong>bgsave的写时复制(COW)机制</strong></p><p>Redis 借助操作系统提供的写时复制技术（Copy-On-Write, COW），在生成快照的同时，依然可以正常处理写命令。bgsave 子进程是由主线程 <font color="red">fork 生成</font>的，可以共享主线程的所有内存数据。bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。</p><p><strong>save与bgsave对比：</strong></p><table><thead><tr><th>命令</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>是否阻塞redis其它命令</td><td>是</td><td>否（在生成子进程调用fork函数时会有短暂阻塞）</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fork子进程，消耗内存</td></tr></tbody></table><p> <font color="red">配置自动生成rdb文件后台使用的是bgsave方式</font></p><span id="more"></span> <h3 id="AOF（append-only-file）"><a href="#AOF（append-only-file）" class="headerlink" title="AOF（append-only file）"></a>AOF（append-only file）</h3><p>快照功能并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、且仍未保存到快照中的那些数据</p><p>从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化，将<font color="red">修改的每一条指令</font>记录进文件appendonly.aof中（先写入os cache，每隔一段时间fsync到磁盘）</p><p>aof文件示例：</p><pre class=" language-java"><code class="language-java">执行set a aacv 和 expire a <span class="token number">1000</span> 两条命令：<span class="token operator">*</span><span class="token number">3</span>$<span class="token number">3</span>set$<span class="token number">1</span>a$<span class="token number">4</span>aacv<span class="token operator">*</span><span class="token number">3</span>$<span class="token number">9</span>PEXPIREAT$<span class="token number">1</span>a$<span class="token number">13</span><span class="token number">1700653658573</span>执行set b ccc ex <span class="token number">2000</span> 命令<span class="token operator">*</span><span class="token number">5</span>$<span class="token number">3</span>SET$<span class="token number">1</span>b$<span class="token number">3</span>ccc$<span class="token number">4</span>PXAT$<span class="token number">13</span><span class="token number">1700654874514</span></code></pre><p>这是一种resp协议格式数据，星号后面的数字代表命令有多少个参数，$号后面的数字代表这个参数有几个字符。</p><p><strong>注意</strong>：如果执行带过期时间的set命令，aof文件里记录的是并不是执行的原始命令，而是记录key过期的<font color="red">时间戳</font></p><p><strong><code>redis.conf</code>文件相关配置：</strong>（开启AOF 和 配置fsync刷盘频率）</p><pre class=" language-java"><code class="language-java"># By <span class="token keyword">default</span> Redis asynchronously dumps the dataset on disk<span class="token punctuation">.</span> This mode is# good enough in many applications<span class="token punctuation">,</span> but an issue with the Redis process or# a power outage may result into a few minutes of writes <span class="token function">lost</span> <span class="token punctuation">(</span>depending on# the configured save points<span class="token punctuation">)</span><span class="token punctuation">.</span>## The Append Only File is an alternative persistence mode that provides# much better durability<span class="token punctuation">.</span> For instance using the <span class="token keyword">default</span> data fsync policy# <span class="token punctuation">(</span>see later in the config file<span class="token punctuation">)</span> Redis can lose just one second of writes in a# dramatic event like a server power outage<span class="token punctuation">,</span> or a single write <span class="token keyword">if</span> something# wrong with the Redis process itself happens<span class="token punctuation">,</span> but the operating system is# still running correctly<span class="token punctuation">.</span>## AOF and RDB persistence can be enabled at the same time without problems<span class="token punctuation">.</span># If the AOF is enabled on startup Redis will load the AOF<span class="token punctuation">,</span> that is the file# with the better durability guarantees<span class="token punctuation">.</span>## Please check https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>topics<span class="token operator">/</span>persistence <span class="token keyword">for</span> more information<span class="token punctuation">.</span>appendonly no<span class="token comment" spellcheck="true">// 修改为yes开启，修改后重启生效</span># The <span class="token function">fsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> call tells the Operating System to actually write data on disk# instead of waiting <span class="token keyword">for</span> more data in the output buffer<span class="token punctuation">.</span> Some OS will really flush# data on disk<span class="token punctuation">,</span> some other OS will just <span class="token keyword">try</span> to <span class="token keyword">do</span> it ASAP<span class="token punctuation">.</span>## Redis supports three different modes<span class="token operator">:</span>## no<span class="token operator">:</span> don't fsync<span class="token punctuation">,</span> just let the OS flush the data when it wants<span class="token punctuation">.</span> Faster<span class="token punctuation">.</span># always<span class="token operator">:</span> fsync after every write to the append only log<span class="token punctuation">.</span> Slow<span class="token punctuation">,</span> Safest<span class="token punctuation">.</span># everysec<span class="token operator">:</span> fsync only one time every second<span class="token punctuation">.</span> Compromise<span class="token punctuation">.</span>## The <span class="token keyword">default</span> is <span class="token string">"everysec"</span><span class="token punctuation">,</span> as that's usually the right compromise between# speed and data safety<span class="token punctuation">.</span> It's up to you to understand <span class="token keyword">if</span> you can relax <span class="token keyword">this</span> to# <span class="token string">"no"</span> that will let the operating system flush the output buffer when# it wants<span class="token punctuation">,</span> <span class="token keyword">for</span> better <span class="token function">performances</span> <span class="token punctuation">(</span>but <span class="token keyword">if</span> you can live with the idea of# some data loss consider the <span class="token keyword">default</span> persistence mode that's snapshotting<span class="token punctuation">)</span><span class="token punctuation">,</span># or on the contrary<span class="token punctuation">,</span> use <span class="token string">"always"</span> that's very slow but a bit safer than# everysec<span class="token punctuation">.</span>## More details please check the following article<span class="token operator">:</span># http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>antirez<span class="token punctuation">.</span>com<span class="token operator">/</span>post<span class="token operator">/</span>redis<span class="token operator">-</span>persistence<span class="token operator">-</span>demystified<span class="token punctuation">.</span>html## If unsure<span class="token punctuation">,</span> use <span class="token string">"everysec"</span><span class="token punctuation">.</span># appendfsync always <span class="token comment" spellcheck="true">// 每次有新命令追加到 AOF 文件时就执行一次 fsync ，非常慢，也非常安全</span>appendfsync everysec <span class="token comment" spellcheck="true">// 每秒 fsync 一次，足够快，并且在故障时只会丢失 1 秒钟的数据。默认这种</span># appendfsync no<span class="token comment" spellcheck="true">// 从不 fsync ，将数据交给操作系统来处理。更快，也更不安全的选择</span></code></pre><h4 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h4><p>AOF文件里可能有太多没用指令，所以AOF会<font color="red">定期根据内存的最新数据</font>生成aof文件</p><p><strong>配置AOF自动重写频率：</strong></p><pre class=" language-java"><code class="language-java"># Automatic rewrite of the append only file<span class="token punctuation">.</span># Redis is able to automatically rewrite the log file implicitly calling# BGREWRITEAOF when the AOF log size grows by the specified percentage<span class="token punctuation">.</span>## This is how it works<span class="token operator">:</span> Redis remembers the size of the AOF file after the# latest <span class="token function">rewrite</span> <span class="token punctuation">(</span><span class="token keyword">if</span> no rewrite has happened since the restart<span class="token punctuation">,</span> the size of# the AOF at startup is used<span class="token punctuation">)</span><span class="token punctuation">.</span>## This base size is compared to the current size<span class="token punctuation">.</span> If the current size is# bigger than the specified percentage<span class="token punctuation">,</span> the rewrite is triggered<span class="token punctuation">.</span> Also# you need to specify a minimal size <span class="token keyword">for</span> the AOF file to be rewritten<span class="token punctuation">,</span> <span class="token keyword">this</span># is useful to avoid rewriting the AOF file even <span class="token keyword">if</span> the percentage increase# is reached but it is still pretty small<span class="token punctuation">.</span>## Specify a percentage of zero in order to disable the automatic AOF# rewrite feature<span class="token punctuation">.</span>auto<span class="token operator">-</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>percentage <span class="token number">100</span><span class="token comment" spellcheck="true">// aof文件自上一次重写后文件大小增长了100%则再次触发重写</span>auto<span class="token operator">-</span>aof<span class="token operator">-</span>rewrite<span class="token operator">-</span>min<span class="token operator">-</span>size 64mb<span class="token comment" spellcheck="true">// aof文件至少要达到64M才会自动重写，文件太小恢复速度本来就很快，重写的意义不大</span></code></pre><p>AOF重写命令：，进入redis客户端执行命令<strong>bgrewriteaof</strong>重写AOF</p><p><strong>注意：</strong><font color="red">AOF重写redis会fork出一个子进程去做（与bgsave命令类似），不会对redis正常命令处理有太多影响</font></p><h4 id="RDB-和-AOF比较："><a href="#RDB-和-AOF比较：" class="headerlink" title="RDB 和 AOF比较："></a>RDB 和 AOF比较：</h4><table><thead><tr><th>命令</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>满</td></tr><tr><td>数据安全性</td><td>容易丢数据</td><td>根据策略决定</td></tr></tbody></table><p>生产环境可以都启用，redis启动时如果既有rdb文件又有aof文件则优先选择aof文件恢复数据，因为aof一般来说数据更全一点</p><h3 id="Redis-4-0-混合持久化"><a href="#Redis-4-0-混合持久化" class="headerlink" title="Redis 4.0 混合持久化"></a>Redis 4.0 混合持久化</h3><p>重启 Redis 时，我们很少使用 RDB来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 RDB来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。 Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。</p><pre class=" language-java"><code class="language-java"># Redis can create append<span class="token operator">-</span>only base files in either RDB or AOF formats<span class="token punctuation">.</span> Using# the RDB format is always faster and more efficient<span class="token punctuation">,</span> and disabling it is only# supported <span class="token keyword">for</span> backward compatibility purposes<span class="token punctuation">.</span>aof<span class="token operator">-</span>use<span class="token operator">-</span>rdb<span class="token operator">-</span>preamble yes<span class="token comment" spellcheck="true">// 开启混合持久化</span></code></pre><p>如果开启了混合持久化，<strong>AOF在重写时</strong>，不再是单纯将内存数据转换为RESP命令写入AOF文件，而是将重写<strong>这一刻之前</strong>的内存做RDB快照处理，并且将RDB快照内容和<strong>增量的</strong>AOF修改内存数据的命令存在一起，都写入新的AOF文件，新的文件一开始不叫appendonly.aof，等到重写完新的AOF文件才会进行改名，覆盖原有的AOF文件，完成新旧两个AOF文件的替换。 </p><p>于是在 Redis 重启的时候，可以先加载 RDB 的内容，然后再重放增量 AOF 日志就可以完全替代之前的AOF 全量文件重放，因此重启效率大幅得到提升。</p><h4 id="Redis数据备份策略："><a href="#Redis数据备份策略：" class="headerlink" title="Redis数据备份策略："></a>Redis数据备份策略：</h4><p>1、写crontab定时调度脚本，每小时都copy一份rdb或aof的备份到一个目录中去，仅仅保留最近48小时的备份</p><p>2、每天都保留一份当日的数据备份到一个目录中去，可以保留最近1个月的备份</p><p>3、每次copy备份的时候，都把太旧的备份给删了</p><p>4、每天晚上将当前机器上的备份复制一份到其他机器上，以防机器损坏</p><h3 id="Redis主从架构"><a href="#Redis主从架构" class="headerlink" title="Redis主从架构"></a>Redis主从架构</h3><p><strong>redis主从架构搭建，配置从节点步骤：</strong></p><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、复制一份redis<span class="token punctuation">.</span>conf文件    <span class="token number">2</span>、将相关配置修改为如下值：port <span class="token number">6380</span>pidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis_6380<span class="token punctuation">.</span>pid # 把pid进程号写入pidfile配置的文件logfile <span class="token string">"6380.log"</span>dir <span class="token punctuation">.</span>/data<span class="token operator">/</span><span class="token number">6380</span> # 指定数据存放目录，目录必须存在 需要提前创建    # bind <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> # 这行注释掉<span class="token number">3</span>、配置主从复制replicaof <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.60</span> <span class="token number">6379</span> # 从本机<span class="token number">6379</span>的redis实例复制数据，Redis <span class="token number">5.0</span>之前使用slaveofreplica‐read‐only yes # 配置从节点只读<span class="token number">4</span>、启动从节点redis‐server redis<span class="token punctuation">.</span>conf    <span class="token number">5</span>、连接从节点redis‐cli ‐p <span class="token number">6380</span>    <span class="token number">6</span>、测试在<span class="token number">6379</span>实例上写数据，<span class="token number">6380</span>实例是否能及时同步新修改数据</code></pre><h4 id="Redis主从工作原理"><a href="#Redis主从工作原理" class="headerlink" title="Redis主从工作原理"></a>Redis主从工作原理</h4><p>如果你为master配置了一个slave，不管这个slave是否是第一次连接上Master，它都会发送一个<font color="red">PSYNC</font>命令给master请求复制数据</p><p>master收到PSYNC命令后，会在后台进行数据持久化通过bgsave生成最新的rdb快照文件，持久化期间，master会继续接收客户端的请求，它会把这些可能修改数据集的请求缓存在内存中。当持久化进行完毕以后，master会把这份rdb文件数据集发送给slave，slave会把接收到的数据进行持久化生成rdb，然后再加载到内存中。然后，master再将之前缓存在内存中的命令发送给slave。 </p><p>当master与slave之间的连接由于某些原因而断开时，slave能够自动重连Master，如果master收到了多个slave并发连接请求，它只会进行一次持久化，而不是一个连接一次，然后再把这一份持久化的数据发送给多个并发连接的slave。</p><p><strong>主从复制(全量复制)</strong></p><p><img src="/images/redis/redis-2.png" alt="redis-2"></p><p><strong>数据部分复制</strong></p><p>当master和slave断开重连后，一般都会对整份数据进行复制。但从redis2.8版本开始，redis改用可以支持部分数据复制的命令PSYNC去master同步数据，slave与master能够在网络连接断开重连后只进行部分数据复制(断点续传)。</p><p>master会在其内存中创建一个复制数据用的缓存队列，缓存最近一段时间的数据，master和它所有的slave都维护了复制的数据下标offset和master的进程id，因此，当网络连接断开后，slave会请求master继续进行未完成的复制，从所记录的数据下标开始。如果master进程id变化了，或者从节点数据下标offset太旧，已经不在master的缓存队列里了，那么将会进行一次全量数据的复制。</p><p><strong>主从复制(部分复制，断点续传)</strong></p><p><img src="/images/redis/redis-3.png" alt="redis-3"></p><p>如果有很多从节点，为了缓解<strong>主从复制风暴</strong>(多个从节点同时复制主节点导致主节点压力过大)，可以采用多级主从架构，让部分从节点与从节点(与主节点同步)同步数据</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-五种数据类型</title>
      <link href="/posts/redis-family/2/"/>
      <url>/posts/redis-family/2/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis基本特性"><a href="#Redis基本特性" class="headerlink" title="Redis基本特性"></a><code>Redis</code>基本特性</h2><p>a) 非关系型的<font color="red">键值对</font>数据库，可以根据键以O(1) 的时间复杂度取出或插入关联值</p><p>b) <code>Redis</code> 的数据是存在<font color="red">内存</font>中的</p><p>c) 键值对中键的类型可以是字符串，整型，浮点型等，且键是唯一的</p><p>d) 键值对中的值类型可以是string，hash，list，set，sorted set 等</p><p>e) <code>Redis</code> 内置了复制，磁盘持久化，<code>LUA</code>脚本，事务，<font color="orange">SSL,  ACLs，客户端缓存，客户端代理等功能（6.0新特性）</font></p><p>f) 通过<code>Redis</code> 哨兵和<code>Redis Cluster</code> 模式提供高可用性</p> <span id="more"></span> <h2 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a><code>Redis</code>应用场景</h2><p>a) 计数器<br>可以对 String 进行自增自减运算，从而实现计数器功能。<code>Redis</code> 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。 </p><p>b) 分布式ID生成<br>利用自增特性，一次请求一个大一点的步长如 <code>incr 2000</code> ,缓存在本地使用，用完再请求。</p><p>c) 海量数据统计<br>位图（bitmap）:存储是否参过某次活动，是否已读谋篇文章，用户是否为会员， 日活统计。</p><p>d) 会话缓存<br>可以使用 <code>Redis</code> 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p><p>e) 分布式队列/阻塞队列<br>List 是一个双向链表，可以通过 <code>lpush/rpush</code> 和 <code>rpop/lpop</code> 写入和读取消息。可以通过使用<code>brpop/blpop</code> 来实现阻塞队列。</p><p>f) 分布式锁实现<br>在分布式场景下，无法使用基于进程的锁来对多个节点上的进程进行同步。可以使用 <code>Redis</code> 自带的 <code>SETNX</code> 命令实现分布式锁。</p><p>g) 热点数据存储<br>最新评论，最新文章列表，使用list 存储，<code>ltrim</code>取出热点数据，删除老数据。</p><p>h) 社交类需求<br>Set 可以实现交集，从而实现共同好友等功能，Set通过求差集，可以进行好友推荐，文章推荐。</p><p>i) 排行榜<br>sorted_set可以实现有序性操作，从而实现排行榜等功能。</p><p>j) 延迟队列<br>使用sorted_set，使用 【当前时间戳 + 需要延迟的时长】做score, 消息内容作为元素,调用<code>zadd</code>来生产消息，消费者使用<code>zrangbyscore</code>获取当前时间之前的数据做轮询处理。消费完再删除任务 rem  key  member</p><p><code>Redis</code> 的key 都是字符串（<code>SDS</code>， simple dynamic string）类型，命令由客户端发送给服务端都会转换为字节流的形式，虽然看起来可能是数字、浮点数、或者字符串多种类型</p><pre class=" language-java"><code class="language-java"><span class="token operator">></span> set <span class="token number">1</span> a <span class="token comment" spellcheck="true">// 数字key</span><span class="token operator">></span> get <span class="token number">1</span><span class="token operator">></span> set <span class="token number">0.5</span> b <span class="token comment" spellcheck="true">// 浮点key</span><span class="token operator">></span> get <span class="token number">0.5</span><span class="token operator">></span> set a c <span class="token comment" spellcheck="true">// 字符串key</span><span class="token operator">></span> get a以上key 发送到服务端最终都是以字节流的形式</code></pre><p><strong><code>SDS</code> 的特点：</strong></p><p>a）二进制安全的数据结构，安全体现在不会丢数据（<code>c：char data[]="g\0ao"</code>，C 语言以<code>"\0"</code> 作为字符串结尾标记，业务数据存在<code>"\0"</code>时存在安全问题）</p><p>b）内存预分配机制，防止频繁扩容产生的内存分配问题</p><p>c）兼容C语言的函数库</p><p>扩容示例：</p><pre class=" language-java"><code class="language-java">redis<span class="token operator">:</span>  sds<span class="token operator">:</span>    free<span class="token operator">:</span> <span class="token number">0</span>    len<span class="token operator">:</span> <span class="token number">3</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"gao"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"gao123"</span>        len<span class="token operator">:</span> <span class="token number">3</span>    addlen<span class="token operator">:</span> <span class="token function">3</span>    <span class="token punctuation">(</span>len <span class="token operator">+</span> addlen<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">12</span>  <span class="token comment" spellcheck="true">//扩容，(现有长度+需要增加长度)*2</span>    <span class="token comment" spellcheck="true">// 成倍扩容，当长度len=1024，再扩容每次增加1M，(所以使用 setbit 设置大点的空间，防止频繁扩容)</span>      append，setbit     sds<span class="token operator">:</span>      free<span class="token operator">:</span> <span class="token number">6</span>      len<span class="token operator">:</span> <span class="token number">6</span>      <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"gao123"</span>  </code></pre><p><strong>设计思想：</strong></p><pre class=" language-java"><code class="language-java">K<span class="token operator">-</span>V：map <span class="token operator">-</span><span class="token operator">></span> dict，数据库：海量数据的存储<span class="token number">1</span>、数组：<span class="token function">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 随机访问，下表<span class="token number">2</span>、链表：<span class="token function">O</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 头结点，遍历<span class="token number">3</span>、数：<span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 优化的比较好的场景，二分查找    <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> 任意数据进行随机散列，并且把hash 值转换为一个自然数<span class="token punctuation">[</span>大<span class="token punctuation">]</span>创建一个大的数组：arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> 自然数<span class="token punctuation">[</span>大<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> redis 就是这么干的<span class="token number">1</span>、任意相同的输入，一定能得到相同的输出<span class="token number">2</span>、不同的输入，可能得到相同的输出把现实中无限的数据放到有限的集合中，肯定会产生hash 冲突    <span class="token punctuation">(</span>k1<span class="token punctuation">,</span>v1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span>v2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>k3<span class="token punctuation">,</span>v3<span class="token punctuation">)</span>    <span class="token function">hash</span><span class="token punctuation">(</span>k1<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token function">hash</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">1</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span>v1<span class="token punctuation">,</span>next<span class="token operator">-</span><span class="token operator">></span>null<span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>k3<span class="token punctuation">,</span>v3<span class="token punctuation">,</span>next<span class="token operator">-</span><span class="token operator">></span>k2<span class="token punctuation">)</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>next<span class="token operator">-</span><span class="token operator">></span>null<span class="token punctuation">)</span>产生hash 冲突时，redis 使用的是头插法redis 是比较基础的语言，没有那么多高级特性，没有那么多工具可以用，是redis 作者自己实现的通过链表法来解决碰撞，java 中的hashMap 要复杂得多key：stringvalue：string，hash，list，set，sorted set</code></pre><p><a href="https://www.processon.com/view/link/628e1fdd0791291ba20185c4">Redis之String 类型数据结构直通车</a></p><p><code>Redis6.0</code> 多线程，但是最终执行用户请求是在单线程中进行的，渐进式扩容很有必要</p><p>有趣命令：</p><pre class=" language-java"><code class="language-java"><span class="token operator">></span> type <span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//查看key的类型</span>string<span class="token operator">></span> object encoding <span class="token number">100</span> <span class="token comment" spellcheck="true">//key 所对应的值，在redis 底层是一个什么样的编码格式</span><span class="token string">"int"</span><span class="token operator">></span> object encoding str<span class="token string">"embstr"</span><span class="token operator">></span> object encoding <span class="token number">0.1</span><span class="token string">"int"</span>    <span class="token keyword">int</span> <span class="token operator">/</span> embstr 都是redis 对内存方面的优化</code></pre><p><code>Redis</code>求模小优化：</p><pre class=" language-java"><code class="language-java">任意数 <span class="token operator">%</span> <span class="token number">2</span><span class="token operator">^</span>n <span class="token comment" spellcheck="true">//对CPU 不友好，累除法</span>任意数 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//一次位运算</span></code></pre><p><strong><code>Redis</code> 对于值是string 类型的底层编码结构分析：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//type [key]，查看key 的类型</span><span class="token comment" spellcheck="true">//object encoding [key]，查值在底层的编码格式</span><span class="token comment" spellcheck="true">//redis 中所有对象的封装</span>typedef struct redisObject <span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>  unsigned type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//约束客户端命令，当前类型。位域的语法，占4个bit 位</span>  unsigned encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//编码格式，同样占4个bit 位</span>  unsigned lru<span class="token operator">:</span>LRU_BITS<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//24个bit 位，也就是3 个字节</span>  <span class="token keyword">int</span> refcount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//引用计数法，4个字节</span>  <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据真正存放的位置，8个字节</span><span class="token punctuation">}</span> robj<span class="token punctuation">;</span>redisObject 占<span class="token number">16</span>个字节的空间cache line：<span class="token number">64</span>字节，<span class="token number">64</span> <span class="token operator">-</span> <span class="token number">16</span> <span class="token operator">=</span> <span class="token number">48</span> 字节，肯定可以利用起来<span class="token number">48</span>个字节使用sdshdr8的数据结构存储，因为<span class="token number">48</span>在数据范围 <span class="token number">2</span><span class="token operator">^</span><span class="token number">5</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">~</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">1</span> 之间struct <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> sdshdr8 <span class="token punctuation">{</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 表示&amp;nbsp;2^5&amp;nbsp;~ 2^8-1 的数据&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span>    uint8_t len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* used */</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    uint8_t alloc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* excluding the header and null terminator */</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    unsigned <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 3 lsb of type, 5 unused bits */</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>sds本身消耗<span class="token number">4</span>个字节，其中len、alloc、flags各占一个字节，另外<span class="token string">'\0'</span>占一个字节，因为兼容C语言的函数库最终：<span class="token number">48</span> <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">44</span> 字节，用来存放实际的数据</code></pre><p><strong>对于string 类型的value 有结论如下：</strong></p><pre class=" language-java"><code class="language-java">value 值是string 类型的底层编码结构：<span class="token number">1</span>、value值的长度小于等于<span class="token number">20</span>，尝试转换成数字转换成功，底层使用<span class="token keyword">int</span> 编码格式<span class="token number">2</span>、value值不满足条件<span class="token number">1</span>，且长度小于等于44redis 底层使用embstr 编码结构<span class="token number">3</span>、value值不满足<span class="token number">1</span>和<span class="token number">2</span>条件，使用row 编码结构也就是sds 的数据结构，简单动态字符串</code></pre><p>扩展分析：</p><pre class=" language-java"><code class="language-java">亿级日活的统计：bit 的特点，除了<span class="token number">0</span> 就是<span class="token number">1</span>，所以可以用<span class="token number">1</span>个bit 位表示登陆状态像这样<span class="token number">1</span>个字节就可以表示<span class="token number">8</span>个用户       <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>   <span class="token operator">--</span> 登陆状态offset<span class="token operator">:</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>命令：setbit key offset <span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span>   日期可以作为一个key 使用，“<span class="token number">2022</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">26</span>”变种：userId 是数字时，可以作为偏移量使用setbit a<span class="token operator">-</span>bit<span class="token operator">-</span>map userId <span class="token number">1</span>setbit a<span class="token operator">-</span>bit<span class="token operator">-</span>map userId <span class="token number">1</span>getbit a<span class="token operator">-</span>bit<span class="token operator">-</span>map <span class="token number">8</span>userId<span class="token operator">:</span>bit<span class="token operator">:</span> <span class="token number">0</span><span class="token operator">/</span><span class="token function">1</span> <span class="token punctuation">(</span>默认值是<span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>简单测试：</p><pre class=" language-java"><code class="language-java"><span class="token operator">></span> setbit login_05_26 <span class="token number">100</span> <span class="token number">1</span><span class="token operator">></span> setbit login_05_26 <span class="token number">100</span> <span class="token number">1</span><span class="token operator">></span> setbit login_05_26 <span class="token number">100</span> <span class="token number">1</span><span class="token operator">></span> getbit login_05_26 <span class="token number">100</span>  <span class="token comment" spellcheck="true">//获取日期5月26日用户100的活跃状态，id特别大可以减固定值优化</span><span class="token operator">></span> setbit login_05_26 <span class="token number">100</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//恢复状态</span><span class="token operator">></span> getbit login_05_26 <span class="token number">100</span><span class="token operator">></span> STRLEN login_05_26 <span class="token comment" spellcheck="true">//长度13 字节。100/8bit = 12.5 所以分配13个字节</span><span class="token operator">></span> type login_05_26 <span class="token comment" spellcheck="true">//string 类型的数据</span><span class="token operator">></span> get login_05_26 <span class="token comment" spellcheck="true">//可以执行命令，获取的数据是内存中的存储，没有实际意义</span><span class="token operator">></span> setbit login_05_26 <span class="token number">100</span> <span class="token number">1</span><span class="token operator">></span> setbit login_05_26 <span class="token number">101</span> <span class="token number">1</span><span class="token operator">></span> setbit login_05_26 <span class="token number">102</span> <span class="token number">1</span><span class="token operator">></span> setbit login_05_26 <span class="token number">103</span> <span class="token number">1</span><span class="token operator">></span> BITCOUNT login_05_26 <span class="token comment" spellcheck="true">//统计bit位是1的个数：4</span><span class="token operator">></span> strlen login_05_26 <span class="token comment" spellcheck="true">//13个字节</span><span class="token operator">></span> BITCOUNT login_05_26 <span class="token number">0</span> <span class="token number">12</span> <span class="token comment" spellcheck="true">//一共13个字节，从索引0开始，所以是0和12。可以统计一部分数据根据索引</span>string 表示数据最大是512M，索引位是<span class="token number">2</span><span class="token operator">^</span><span class="token number">32</span><span class="token operator">-</span><span class="token number">1</span>。最多可表示这么多的用户</code></pre><p>另一个扩展分析：</p><pre class=" language-java"><code class="language-java">login_05_26<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span>login_05_27<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>连续登陆情况：按位与再统计<span class="token operator">></span> BITOP and login_05_26<span class="token operator">-</span><span class="token number">27</span> login_05_26 login_05_27 <span class="token comment" spellcheck="true">//按位与操作，结果存到login_05_26-27中</span><span class="token operator">></span> BITCOUNT login_05_26<span class="token operator">-</span><span class="token number">27</span> <span class="token comment" spellcheck="true">//再做一次bitcount可以得到连续登陆的结果</span>login_05_24<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span>login_05_25<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>login_05_26<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span>login_05_27<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>login_05_28<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span>login_05_29<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>login_05_30<span class="token operator">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span>周活：按位或，有一天登陆就行<span class="token operator">></span> BITOP or login_05_26<span class="token operator">-</span><span class="token number">27</span><span class="token operator">-</span>active login_05_26 login_05_27 <span class="token comment" spellcheck="true">//两天内有一天登陆就行</span><span class="token operator">></span> BITCOUNT login_05_26<span class="token operator">-</span><span class="token number">27</span><span class="token operator">-</span>active    redis 源码有判断只能是<span class="token number">0</span>或<span class="token number">1</span>，按位与 按位或，效率非常高汉明重量 按位操作 有兴趣的同学可以了解</code></pre><h3 id="List常用API"><a href="#List常用API" class="headerlink" title="List常用API"></a>List常用API</h3><pre class=" language-java"><code class="language-java"><span class="token operator">/</span><span class="token operator">></span> help <span class="token annotation punctuation">@list</span>LPUSH key element <span class="token punctuation">[</span>element <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>RPOP keyRPUSH key element <span class="token punctuation">[</span>element <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>LPOP keyBLPOP key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> timeoutBRPOP key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> timeoutBRPOPLPUSH source destination timeoutRPOPLPUSH  source destinationLINDEX key indexLLEN keyLINSERT key BEFORE<span class="token operator">|</span>AFTER pivot elementLRANGE key start stopLREM key count elementLSET key index elementLTRIM key start stop </code></pre><p>List是一个有序(按加入的时序排序)的数据结构，Redis采用<font color="red">quicklist（双端链表） 和 ziplist</font> 作为List的底层实现。</p><p>可以通过设置每个ziplist的最大容量，quicklist的数据压缩范围，提升数据存取效率</p><pre><code>list-max-ziplist-size  -2        //  单个ziplist节点最大能存储  8kb  ,超过则进行分裂,将数据存储在新的ziplist节点中list-compress-depth  1        //  0 代表所有节点，都不进行压缩，1， 代表从头节点往后走一个，尾节点往前走一个不用压缩，其他的全部压缩，2，3，4 ... 以此类推</code></pre><p><a href="https://www.processon.com/view/link/6295f9985653bb788c8546fe">Redis - quicklist 数据结构：</a></p><p><a href="https://www.processon.com/view/link/6295f9b27d9c085adb7a7561">Redis - ziplist 数据结构：</a></p><h3 id="Hash常用API"><a href="#Hash常用API" class="headerlink" title="Hash常用API"></a>Hash常用API</h3><pre class=" language-java"><code class="language-java"><span class="token operator">/</span><span class="token operator">></span> help  <span class="token annotation punctuation">@hash</span> HSET key field value <span class="token punctuation">[</span>field value <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>HGET key fieldHMGET key field <span class="token punctuation">[</span>field <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>HKEYS keyHGETALL keyHVALS keyHEXISTS key fieldHDEL key field <span class="token punctuation">[</span>field <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>HINCRBY key field incrementHINCRBYFLOAT key field incrementHLEN keyHSCAN key cursor <span class="token punctuation">[</span>MATCH pattern<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span>HSETNX key field valueHSTRLEN key field </code></pre><p>Hash 数据结构底层实现为一个<font color="red">字典( dict )</font>，也是RedisBb用来存储K-V的数据结构,当数据量比较小，或者单个元素比较小时，底层用<font color="red">ziplist存储</font>，数据大小和元素数量阈值可以通过如下参数设置。</p><pre class=" language-java"><code class="language-java">hash<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>entries  <span class="token number">512</span>    <span class="token comment" spellcheck="true">//  ziplist 元素个数超过 512 ，将改为hashtable编码 </span>hash<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>value    <span class="token number">64</span>      <span class="token comment" spellcheck="true">//  单个元素大小超过 64 byte时，将改为hashtable编码</span></code></pre><p><a href="https://www.processon.com/view/link/6295f973e401fd2eed19c806">Redis - hash 数据结构：</a></p><h3 id="Set常用API"><a href="#Set常用API" class="headerlink" title="Set常用API"></a>Set常用API</h3><pre class=" language-java"><code class="language-java"><span class="token operator">/</span><span class="token operator">></span> help  <span class="token annotation punctuation">@set</span>SADD key member <span class="token punctuation">[</span>member <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>              SCARD key                                                 SISMEMBER key memberSPOP key <span class="token punctuation">[</span>count<span class="token punctuation">]</span>SDIFF key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>SINTER key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>SUNION key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>SMEMBERS keySRANDMEMBER key <span class="token punctuation">[</span>count<span class="token punctuation">]</span>SREM key member <span class="token punctuation">[</span>member <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>SMOVE source destination memberSUNIONSTORE destination key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>SDIFFSTORE destination key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>SINTERSTORE destination key <span class="token punctuation">[</span>key <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>SSCAN key cursor <span class="token punctuation">[</span>MATCH pattern<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> </code></pre><p>Set 为无序的，自动去重的集合数据类型，Set 数据结构底层实现为一个<font color="red">value 为 null 的 字典( dict )</font>，当数据可以用整形表示时，Set集合将被编码为<font color="red">intset</font>数据结构。两个条件任意满足时<br>Set将用hashtable存储数据。1， 元素个数大于 set-max-intset-entries , 2 ， 元素无法用整形表示 </p><pre class=" language-java"><code class="language-java">set<span class="token operator">-</span>max<span class="token operator">-</span>intset<span class="token operator">-</span>entries <span class="token number">512</span>       <span class="token comment" spellcheck="true">// intset 能存储的最大元素个数，超过则用hashtable编码</span></code></pre><p><a href="https://www.processon.com/view/link/6295f95b1e0853255ddd2439">Redis - set 数据结构：</a></p><h3 id="ZSet常用API"><a href="#ZSet常用API" class="headerlink" title="ZSet常用API"></a>ZSet常用API</h3><pre class=" language-java"><code class="language-java"><span class="token operator">/</span><span class="token operator">></span> help  <span class="token annotation punctuation">@sorted_set</span>ZADD key <span class="token punctuation">[</span>NX<span class="token operator">|</span>XX<span class="token punctuation">]</span> <span class="token punctuation">[</span>CH<span class="token punctuation">]</span> <span class="token punctuation">[</span>INCR<span class="token punctuation">]</span> score member <span class="token punctuation">[</span>score member <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>ZCARD keyZCOUNT key min maxZINCRBY key increment memberZRANGE key start stop <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span>ZRANGEBYSCORE key min max <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span> <span class="token punctuation">[</span>LIMIT offset count<span class="token punctuation">]</span>ZRANK key memberZREM key member <span class="token punctuation">[</span>member <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>ZREMRANGEBYRANK key start stopZREMRANGEBYSCORE key min maxZREVRANGE key start stop <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span>ZREVRANGEBYSCORE key max min <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span> <span class="token punctuation">[</span>LIMIT offset count<span class="token punctuation">]</span>ZREVRANK key memberZSCAN key cursor <span class="token punctuation">[</span>MATCH pattern<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span>ZSCORE key member</code></pre><p>ZSet  为有序的，自动去重的集合数据类型，ZSet 数据结构底层实现为 <font color="red">字典(dict) + 跳表(skiplist) </font>，当数据比较少时，用ziplist编码结构存储。 </p><pre class=" language-java"><code class="language-java">zset<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>entries  <span class="token number">128</span>    <span class="token comment" spellcheck="true">// 元素个数超过128 ，将用skiplist编码</span>zset<span class="token operator">-</span>max<span class="token operator">-</span>ziplist<span class="token operator">-</span>value     <span class="token number">64</span>     <span class="token comment" spellcheck="true">//  单个元素大小超过 64 byte, 将用 skiplist编码</span></code></pre><p><a href="https://www.processon.com/view/link/6295f943e0b34d481b3cc017">Redis - zset 数据结构：</a></p><p><a href="https://www.processon.com/view/link/6295f8fb1e0853255ddd234c">Redis - skiplist 数据结构：</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-核心数据结构</title>
      <link href="/posts/redis-family/1/"/>
      <url>/posts/redis-family/1/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><p>下载地址：<a href="http://redis.io/download">http://redis.io/download</a></p><p>安装步骤：</p><pre class=" language-java"><code class="language-java"># <span class="token number">1</span>、安装gccapt<span class="token operator">-</span>get install gcc    # <span class="token number">2</span>、下载redis<span class="token operator">-</span><span class="token number">7.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz并解压wget http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>download<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>io<span class="token operator">/</span>releases<span class="token operator">/</span>redis<span class="token operator">-</span><span class="token number">7.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gztar xzf redis<span class="token operator">-</span><span class="token number">7.0</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gzcd redis<span class="token operator">-</span><span class="token number">7.0</span><span class="token punctuation">.</span><span class="token number">3</span># <span class="token number">3</span>、进入到解压好的redis‐<span class="token number">7.0</span><span class="token punctuation">.</span><span class="token number">3</span>目录下，进行编译与安装make    # <span class="token number">4</span>、修改配置daemonize yes #后台启动<span class="token keyword">protected</span>‐mode no #关闭保护模式，开启的话，只有本机才可以访问redis# <span class="token number">4.5</span>、需要注释掉bind# bind <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token operator">-</span><span class="token operator">:</span><span class="token operator">:</span><span class="token number">1</span># <span class="token number">5</span>、启动服务src<span class="token operator">/</span>redis‐server redis<span class="token punctuation">.</span>conf    # <span class="token number">6</span>、验证启动是否成功ps ‐ef <span class="token operator">|</span> grep redis    # <span class="token number">7</span>、进入redis客户端src<span class="token operator">/</span>redis‐cli    # <span class="token number">8</span>、退出客户端quit    # <span class="token number">9</span>、退出redis服务：（亲测三种都可用）（<span class="token number">1</span>）pkill redis‐server（<span class="token number">2</span>）kill 进程号（<span class="token number">3</span>）src<span class="token operator">/</span>redis‐cli shutdown</code></pre><p>这里原计划是安装<code>redis-5.0.3.tar.gz</code>版本，但是安装解压后执行make命令时一直报错</p><p><font color="red">错误信息：<code>collect2.exe: error: ld returned 1 exit status</code></font></p><blockquote><p>collect2 error ld returned 1 exit status提示出现之前，一般在上面几行都会有其他报错，而collect2 error ld returned 1 exit status所反映的只是其之前一共出现了多少个错误，真正的错误是在其上面出现的那些报错。比如，没有错误，会提示collect2 error ld returned 0 exit status；有两个报错，会提示collect2 error ld returned 2 exit status。所以，真正要解决的是在collect2 error ld returned 1 exit status提示出现之前的那些报错提醒<br>解决问题思路参考文章：<a href="https://blog.csdn.net/weixin_45055622/article/details/126634000">https://blog.csdn.net/weixin_45055622/article/details/126634000</a></p></blockquote><p>尝试过网上给出的多种方案，包括：</p><p>1、添加配置<code>OPT=-O2 -march=i686</code></p><p>2、使用<code>make MALLOC=libc</code>命令替换make</p><p>3、删除解压包，重新安装</p><p>然而都没有解决问题，最后切换安装版本为<code>redis-7.0.3.tar.gz</code>解决问题，其他版本未测试</p><span id="more"></span><h2 id="常见面试题："><a href="#常见面试题：" class="headerlink" title="常见面试题："></a>常见面试题：</h2><h3 id="1、什么是Redis？"><a href="#1、什么是Redis？" class="headerlink" title="1、什么是Redis？"></a>1、什么是Redis？</h3><p>Redis是基于C开发的高性能非关系型的键值对数据库，可以存储键和五种不同类型值之间的映射</p><p>键的类型只能为字符串<font color="red">（SDS简单动态字符串，经过专门设计的）</font>，值支持五种数据类型：字符串String、列表List、集合Set、散列表Hash、有序集合ZSet</p><p>Redis数据是存储在内存中的，其读写数据的速度很快，每秒可以处理超过10万次的读写操作</p><p>Redis其他应用：分布式锁、事务、持久化、LUA脚本、多种集群方案等</p><h3 id="2、Redis有哪些优缺点？"><a href="#2、Redis有哪些优缺点？" class="headerlink" title="2、Redis有哪些优缺点？"></a>2、Redis有哪些优缺点？</h3><p>优点：</p><p>1、读写性能优异：读的速度为110000次/s，写的速度为81000次/s（简单命令测试结果，复杂操作降低些）<br>2、支持数据持久化：AOF、RDB两种持久化方式（还有混合两种的持久化）<br>3、支持事务：Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行（LUA脚本）<br>4、支持再次复制：主机会自动将数据同步到从机，实现读写分离（全量同步、增量同步）</p><p>缺点：</p><p>1、数据容量受到物理内存的限制，不能用作海量数据的高性能读写<br>2、Redis不具备自动容错和恢复功能，主机如果宕机会导致前端部分读写请求失败，需要等待机器重启或手动切换前端访问的IP才能恢复；此外如果部分数据未来得及同步给其他节点，即使手动切换IP还是会导致丢失一部分数据，降低系统的可用性。（为支持自动容错衍生出哨兵、集群模式）</p><p>3、Redis虽然支持在线扩容，但是集群容量达到上限时，在线扩容会变得很复杂，如果要避免这种问题，运维人员在系统上线时必须确保有足够的空间，这样就导致了对资源造成很大浪费</p><h3 id="3、为什么要选择Redis，而不是map-x2F-guava做缓存？"><a href="#3、为什么要选择Redis，而不是map-x2F-guava做缓存？" class="headerlink" title="3、为什么要选择Redis，而不是map/guava做缓存？"></a>3、为什么要选择Redis，而不是map/guava做缓存？</h3><p>用户第一次访问数据从数据库获取，慢一点没关系，读取后写入缓存，缓存失效前请求都是直接从缓存拿到数据，那速度就很快了（高性能）。另外缓存的抗压能力远远大于数据库，高并发下使用缓存优势明显（高并发）</p><p><font color="red">好点的MySQL数据库每秒能抗住2000并发就不错了，Redis缓存动辄几万还有一系列优化手段</font></p><p>map和guava实现的<strong>本地缓存</strong>，特点是轻量和快速，生命周期随着JVM的销毁而结束，另外多例情况下每个实例各自保存一份缓存，显然缓存的一致性就很难保证了</p><p>Redis或memcached称为<strong>分布式缓存</strong>，多例情况下共用一份缓存，一致性有了保证，但缺点是需要保证高可用，复杂度也提高了</p><h3 id="4、Redis为什么这么快？"><a href="#4、Redis为什么这么快？" class="headerlink" title="4、Redis为什么这么快？"></a>4、Redis为什么这么快？</h3><p>Redis的操作都是基于内存的，非常快速，数据存在内存中，类似于HashMap、其查找和操作的时间复杂度都是O(1），而且结构简单，读数据操作也很简单，其次还采用单线程，避免了不必要的上下文切换和竞争关系，也不存在多线程切换消耗的CPU性能，且不用考虑各种锁的开销，除此外，其使用多路复用IO，非阻塞IO<br><font color="red">Redis的数据结构也是经过专门设计的，包括缓存行优化、多种编码格式切换、快表、跳表等</font></p><h3 id="5、Redis有哪些数据类型？"><a href="#5、Redis有哪些数据类型？" class="headerlink" title="5、Redis有哪些数据类型？"></a>5、Redis有哪些数据类型？</h3><p>key键：SDS字符串；value类型：String、hash、list、set、zset</p><h2 id="Redis五种数据类型的应用场景"><a href="#Redis五种数据类型的应用场景" class="headerlink" title="Redis五种数据类型的应用场景"></a>Redis五种数据类型的应用场景</h2><p><img src="/images/redis/redis-1.png" alt="redis-1"></p><p>待续… </p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-ProxyFactory</title>
      <link href="/posts/spring-family/11/"/>
      <url>/posts/spring-family/11/</url>
      
        <content type="html"><![CDATA[<h2 id="ProxyFactory选择cglib或jdk动态代理原理"><a href="#ProxyFactory选择cglib或jdk动态代理原理" class="headerlink" title="ProxyFactory选择cglib或jdk动态代理原理"></a>ProxyFactory选择cglib或jdk动态代理原理</h2><p>ProxyFactory在生成代理对象之前需要决定是使用JDK动态代理还是CGLIB技术：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAopProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AopProxyFactory</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AopProxy <span class="token function">createAopProxy</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token keyword">throws</span> AopConfigException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果ProxyFactory的isOptimize为true，Spring认为cglib比jdk动态代理要快</span>        <span class="token comment" spellcheck="true">// 或者isProxyTargetClass为true，</span>        <span class="token comment" spellcheck="true">// 或者被代理对象没有实现接口，</span>        <span class="token comment" spellcheck="true">// 或者只实现了SpringProxy这个接口</span>        <span class="token comment" spellcheck="true">// 那么则利用Cglib进行动态代理，但如果被代理类是接口，或者被代理类已经是进行过JDK动态代理而生成的代理类了则只能进行JDK动态代理</span>        <span class="token comment" spellcheck="true">// 其他情况都会进行JDK动态代理，比如被代理类实现了除SpringProxy接口之外的其他接口</span>        <span class="token comment" spellcheck="true">// 是不是在GraalVM虚拟机上运行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>NativeDetector<span class="token punctuation">.</span><span class="token function">inNativeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// config就是ProxyFactory对象</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"TargetSource cannot determine target class: "</span> <span class="token operator">+</span>                        <span class="token string">"Either an interface or a target is required for proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// targetClass是接口，直接使用Jdk动态代理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 使用Cglib</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjenesisCglibAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 使用Jdk动态代理</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Determine whether the supplied {@link AdvisedSupport} has only the     * {@link org.springframework.aop.SpringProxy} interface specified     * (or no proxy interfaces specified at all).     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ifcs <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getProxiedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ifcs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ifcs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> SpringProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>ifcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><span id="more"></span><h2 id="代理对象创建过程"><a href="#代理对象创建过程" class="headerlink" title="代理对象创建过程"></a>代理对象创建过程</h2><h3 id="JdkDynamicAopProxy"><a href="#JdkDynamicAopProxy" class="headerlink" title="JdkDynamicAopProxy"></a>JdkDynamicAopProxy</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Construct a new JdkDynamicAopProxy for the given AOP configuration. * @param config the AOP configuration as AdvisedSupport object * @throws AopConfigException if the config is invalid. We try to throw an informative * exception in this case, rather than let a mysterious failure happen later. */</span><span class="token keyword">public</span> <span class="token function">JdkDynamicAopProxy</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token keyword">throws</span> AopConfigException <span class="token punctuation">{</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">"AdvisedSupport must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getAdvisorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> AdvisedSupport<span class="token punctuation">.</span>EMPTY_TARGET_SOURCE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"No advisors and no TargetSource specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>advised <span class="token operator">=</span> config<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置JDK动态代理所要代理的接口</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>proxiedInterfaces <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">findDefinedEqualsAndHashCodeMethods</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>proxiedInterfaces<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 1、在构造JdkDynamicAopProxy对象时，会先拿到被代理对象自己所实现的接口，</span><span class="token comment" spellcheck="true">// 并且额外的增加SpringProxy、Advised、DecoratingProxy三个接口，组合成一个Class[]，</span><span class="token comment" spellcheck="true">// 并赋值给proxiedInterfaces属性</span><span class="token keyword">static</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span>AdvisedSupport advised<span class="token punctuation">,</span> <span class="token keyword">boolean</span> decoratingProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 被代理对象自己所实现的接口</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> specifiedInterfaces <span class="token operator">=</span> advised<span class="token punctuation">.</span><span class="token function">getProxiedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果被代理对象没有实现接口，则判断被代理类是不是接口，或者被代理类是不是已经经过JDK动态代理之后的类从而获取想对应的接口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>specifiedInterfaces<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No user-specified interfaces: check whether target class is an interface.</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                advised<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                advised<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            specifiedInterfaces <span class="token operator">=</span> advised<span class="token punctuation">.</span><span class="token function">getProxiedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加三个Spring内置接口：SpringProxy、Advised、DecoratingProxy</span>    List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> proxiedInterfaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>specifiedInterfaces<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> ifc <span class="token operator">:</span> specifiedInterfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Only non-sealed interfaces are actually eligible for JDK proxying (on JDK 17)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isSealedMethod <span class="token operator">==</span> null <span class="token operator">||</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ReflectionUtils<span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span>isSealedMethod<span class="token punctuation">,</span> ifc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            proxiedInterfaces<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ifc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>advised<span class="token punctuation">.</span><span class="token function">isInterfaceProxied</span><span class="token punctuation">(</span>SpringProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        proxiedInterfaces<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>SpringProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>advised<span class="token punctuation">.</span><span class="token function">isOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>advised<span class="token punctuation">.</span><span class="token function">isInterfaceProxied</span><span class="token punctuation">(</span>Advised<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        proxiedInterfaces<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Advised<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>decoratingProxy <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>advised<span class="token punctuation">.</span><span class="token function">isInterfaceProxied</span><span class="token punctuation">(</span>DecoratingProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        proxiedInterfaces<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>DecoratingProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ClassUtils<span class="token punctuation">.</span><span class="token function">toClassArray</span><span class="token punctuation">(</span>proxiedInterfaces<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2、检查这些接口中是否定义了equals()、hashcode()方法</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">findDefinedEqualsAndHashCodeMethods</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> proxiedInterfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断被代理的接口中是否定义了equals()、hashCode()方法，</span>    <span class="token comment" spellcheck="true">// 如果在接口中手动定义了这两个方法，则也会进行代理</span>    <span class="token comment" spellcheck="true">// 否则这两个方法是不会走代理逻辑的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> proxiedInterface <span class="token operator">:</span> proxiedInterfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> proxiedInterface<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>AopUtils<span class="token punctuation">.</span><span class="token function">isEqualsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>equalsDefined <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>AopUtils<span class="token punctuation">.</span><span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>hashCodeDefined <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>equalsDefined <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hashCodeDefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3、得到代理对象，JdkDynamicAopProxy作为InvocationHandler</span><span class="token comment" spellcheck="true">// 代理对象在执行某个方法时，会进入到JdkDynamicAopProxy的invoke()方法中</span><span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating JDK dynamic proxy: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// this实现了InvocationHandler</span>    <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>proxiedInterfaces<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ObjenesisCglibAopProxy"><a href="#ObjenesisCglibAopProxy" class="headerlink" title="ObjenesisCglibAopProxy"></a>ObjenesisCglibAopProxy</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating CGLIB proxy: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 被代理的类</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> rootClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>rootClass <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"Target class must be available for creating a CGLIB proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> proxySuperClass <span class="token operator">=</span> rootClass<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 0、如果被代理类本身就已经是Cglib所生成的代理类了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rootClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span>CGLIB_CLASS_SEPARATOR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取真正的被代理类</span>            proxySuperClass <span class="token operator">=</span> rootClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取被代理类所实现的接口</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> additionalInterfaces <span class="token operator">=</span> rootClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> additionalInterface <span class="token operator">:</span> additionalInterfaces<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>additionalInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Validate the class, writing log messages as necessary.</span>        <span class="token function">validateClassIfNecessary</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Configure CGLIB Enhancer...</span>        <span class="token comment" spellcheck="true">// 1、创建Enhancer对象</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token function">createEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            enhancer<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token keyword">instanceof</span> <span class="token class-name">SmartClassLoader</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartClassLoader<span class="token punctuation">)</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isClassReloadable</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2、被代理类，代理类的父类。proxySuperClass就是ProxyFactory.setTarget()所设置的对象的类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>proxySuperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、代理类额外要实现的接口。通过ProxyFactory.addInterface()所添加的接口，</span>        <span class="token comment" spellcheck="true">// 以及SpringProxy、Advised、DecoratingProxy接口</span>        enhancer<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span>AopProxyUtils<span class="token punctuation">.</span><span class="token function">completeProxiedInterfaces</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setNamingPolicy</span><span class="token punctuation">(</span>SpringNamingPolicy<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassLoaderAwareGeneratorStrategy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取和被代理类所匹配的Advisor</span>        Callback<span class="token punctuation">[</span><span class="token punctuation">]</span> callbacks <span class="token operator">=</span> <span class="token function">getCallbacks</span><span class="token punctuation">(</span>rootClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>callbacks<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> types<span class="token punctuation">.</span>length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            types<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> callbacks<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// fixedInterceptorMap only populated at this point, after getCallbacks call above</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProxyCallbackFilter</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getConfigurationOnlyCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorMap<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedInterceptorOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallbackTypes</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Generate the proxy class and create a proxy instance.</span>        <span class="token comment" spellcheck="true">// 4、设置Enhancer的Callbacks为DynamicAdvisedInterceptor</span>        <span class="token comment" spellcheck="true">// 代理对象在执行某个方法时，会进入到DynamicAdvisedInterceptor的intercept()方法中</span>        <span class="token keyword">return</span> <span class="token function">createProxyClassAndInstance</span><span class="token punctuation">(</span>enhancer<span class="token punctuation">,</span> callbacks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CodeGenerationException</span> <span class="token operator">|</span> IllegalArgumentException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"Could not generate CGLIB subclass of "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">": Common causes of this problem include using a final class or a non-visible class"</span><span class="token punctuation">,</span>                ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TargetSource.getTarget() failed</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"Unexpected AOP exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="代理对象执行过程"><a href="#代理对象执行过程" class="headerlink" title="代理对象执行过程"></a>代理对象执行过程</h2><p>1、在使用ProxyFactory创建代理对象之前，需要往ProxyFactory先添加Advisor</p><p>2、代理对象在执行某个方法时，会把ProxyFactory中的Advisor拿出来和当前正在执行的方法进行匹配筛选</p><p>3、把和方法所匹配的Advisor适配成MethodInterceptor</p><p>4、把和当前方法匹配的MethodInterceptor链，以及被代理对象、代理对象、代理类、当前Method对象、方法参数封装为MethodInvocation对象</p><p>5、调用MethodInvocation的proceed()方法，开始执行各个MethodInterceptor以及被代理对象的对应方法</p><p>6、按顺序调用每个MethodInterceptor的invoke()方法，并且会把MethodInvocation对象传入invoke()方法</p><p>7、直到执行完最后一个MethodInterceptor，就会调用invokeJoinpoint()方法，从而执行被代理对象的当前方法</p><h3 id="各注解对应的MethodInterceptor"><a href="#各注解对应的MethodInterceptor" class="headerlink" title="各注解对应的MethodInterceptor"></a>各注解对应的MethodInterceptor</h3><p><strong>@Before</strong>对应的是<strong>AspectJMethodBeforeAdvice</strong>，在进行动态代理时会把AspectJMethodBeforeAdvice转成<strong>MethodBeforeAdviceInterceptor</strong></p><ul><li>先执行advice对应的方法</li><li>再执行MethodInvocation的proceed()，会执行下一个Interceptor，如果没有下一个Interceptor了，会执行target对应的方法</li></ul><p><strong>@After</strong>对应的是<strong>AspectJAfterAdvice</strong>，直接实现了<strong>MethodInterceptor</strong></p><ul><li>先执行MethodInvocation的proceed()，会执行下一个Interceptor，如果没有下一个Interceptor了，会执行target对应的方法</li><li>再执行advice对应的方法</li></ul><p><strong>@Around</strong>对应的是<strong>AspectJAroundAdvice</strong>，直接实现了<strong>MethodInterceptor</strong></p><ul><li>直接执行advice对应的方法，由@Around自己决定要不要继续往后面调用</li></ul><p><strong>@AfterThrowing</strong>对应的是<strong>AspectJAfterThrowingAdvice</strong>，直接实现了<strong>MethodInterceptor</strong></p><ul><li>先执行MethodInvocation的proceed()，会执行下一个Interceptor，如果没有下一个Interceptor了，会执行target对应的方法</li><li>如果上面抛了Throwable，那么则会执行advice对应的方法</li></ul><p><strong>@AfterReturning</strong>对应的是<strong>AspectJAfterReturningAdvice</strong>，在进行动态代理时会把AspectJAfterReturningAdvice转成<strong>AfterReturningAdviceInterceptor</strong></p><ul><li>先执行MethodInvocation的proceed()，会执行下一个Interceptor，如果没有下一个Interceptor了，会执行target对应的方法</li><li>执行上面的方法后得到最终的方法的返回值</li><li>再执行advice对应的方法</li></ul><h2 id="AbstractAdvisorAutoProxyCreator"><a href="#AbstractAdvisorAutoProxyCreator" class="headerlink" title="AbstractAdvisorAutoProxyCreator"></a>AbstractAdvisorAutoProxyCreator</h2><p>DefaultAdvisorAutoProxyCreator的父类是AbstractAdvisorAutoProxyCreator。 <strong>AbstractAdvisorAutoProxyCreator</strong>非常强大以及重要，只要Spring容器中存在这个类型的Bean，就相当于开启了AOP，AbstractAdvisorAutoProxyCreator实际上就是一个BeanPostProcessor，所以在创建某个Bean时，就会进入到它对应的生命周期方法中。</p><p>当某个Bean初始化后，会调用wrapIfNecessary()方法进行AOP：AbstractAdvisorAutoProxyCreator会找到所有的Advisor，然后判断当前这个Bean是否存在某个Advisor与之匹配（根据Pointcut），如果匹配就表示当前这个Bean有对应的切面逻辑，需要进行AOP，需要产生一个代理对象。</p><h2 id="EnableAspectJAutoProxy"><a href="#EnableAspectJAutoProxy" class="headerlink" title="@EnableAspectJAutoProxy"></a>@EnableAspectJAutoProxy</h2><p>主要作用：往Spring容器中添加了一个AnnotationAwareAspectJAutoProxyCreator类型的Bean</p><p><img src="/images/spring/aop-1.jpg" alt="aop-1"></p><p><strong>AspectJAwareAdvisorAutoProxyCreator</strong>继承了<strong>AbstractAdvisorAutoProxyCreator</strong>，重写了findCandidateAdvisors()方法。</p><p><strong>AbstractAdvisorAutoProxyCreator</strong>只能找到所有Advisor类型的Bean对象。</p><p><strong>AspectJAwareAdvisorAutoProxyCreator</strong>除了可以找到所有Advisor类型的Bean对象，还能把@Aspect注解所标注的Bean中的@Before等注解及方法进行解析，并生成对应的Advisor对象。</p><p><font color="red">简单理解：@EnableAspectJAutoProxy注解就是往Spring容器中添加了一个AbstractAdvisorAutoProxyCreator类型的Bean，从而开启了AOP，并且还会解析@Before等注解生成Advisor。</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-SpringAOP的实现</title>
      <link href="/posts/spring-family/10/"/>
      <url>/posts/spring-family/10/</url>
      
        <content type="html"><![CDATA[<h2 id="对Spring-AOP的理解"><a href="#对Spring-AOP的理解" class="headerlink" title="对Spring AOP的理解"></a>对Spring AOP的理解</h2><p>OOP表示面向对象编程，是一种编程思想，AOP表示面向切面编程，也是一种编程思想</p><p>Spring AOP：Spring为了让程序员更加方便的做到面向切面编程所提供的技术支持</p><p><font color="red">Spring提供的一套机制，让我们更容易的进行AOP，这套机制就是Spring AOP</font></p><p>扩展：用注解的方式来定义Pointcut和Advice，Spring并不是首创，首创是 AspectJ。JBoss 4.0、aspectwerkz 等技术也提供了对于AOP的支持。</p><p>Spring是依赖了AspectJ的，Spring觉得AspectJ中的@Before、@Around等注解比较好用，所以把这些注解直接拿过来用，但是注解底层的解析是由Spring自己做的。</p><p>所以我们在用 Spring时，如果你想用@Before、@Around等注解，是需要单独引入aspecj相关jar包的：</p><pre class=" language-java"><code class="language-java">compile group<span class="token operator">:</span> <span class="token string">'org.aspectj'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'aspectjrt'</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token string">'1.9.5'</span>compile group<span class="token operator">:</span> <span class="token string">'org.aspectj'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'aspectjweaver'</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token string">'1.9.5'</span></code></pre><p>注意：AspectJ（它自己也是一个项目）是在编译时对字节码进行了修改，可以理解为是在<strong>编译时就会去解析</strong>@Before这些注解，然后得到代理逻辑，加入到被代理类的字节码中去，所以如果想用AspectJ技术来生成代理对象 ，是需要用单独的AspectJ编译器的。项目中很少用AspectJ编译器，只是用了@Before这些注解，在<strong>启动Spring的过程中</strong>会去解析这些注解，然后利用动态代理机制生成代理对象。</p><span id="more"></span><h3 id="AOP中的概念"><a href="#AOP中的概念" class="headerlink" title="AOP中的概念"></a>AOP中的概念</h3><p>Spring官网：</p><blockquote><p>Let us begin by defining some central AOP concepts and terminology. These terms are not Spring-specific. Unfortunately, AOP terminology is not particularly intuitive. However, it would be even more confusing if Spring used its own terminology</p></blockquote><p>翻译：AOP中的这些概念不是Spring特有的，不幸的是，AOP中的概念不是特别直观的，但是，如果Spring重新定义自己的那可能会导致更加混乱</p><p>1、Aspect：表示<strong>切面</strong>，比如被@Aspect注解的类就是切面，可以在切面中去定义Pointcut、Advice等等</p><p>2、Join point：表示<strong>连接点</strong>，表示一个程序在执行过程中的一个点，比如一个方法的执行，比如一个异常的处理，在Spring AOP中，一个连接点通常表示一个方法的执行</p><p>3、Advice：表示<strong>通知</strong>，表示在一个特定连接点上所采取的动作。很多AOP框架中，包括Spring，会用Interceptor拦截器来实现Advice，并且在连接点周围维护一个Interceptor链</p><p>4、Pointcut：表示<strong>切点</strong>，用来匹配一个或多个连接点，Advice与切点表达式是关联在一起的，Advice将会执行在和切点表达式所匹配的连接点上</p><p>5、Introduction：可以使用@DeclareParents来给所匹配的类添加一个接口，并指定一个默认实现</p><p>6、Target object：<strong>目标对象</strong>，被代理对象</p><p>7、AOP proxy：表示<strong>代理工厂</strong>，用来创建代理对象的，在Spring Framework中，要么是JDK动态代理，要么是CGLIB代理</p><p>8、Weaving：表示<strong>织入</strong>，表示创建代理对象的动作，这个动作可以发生在编译时期（比如Aspejctj），或者运行时，比如Spring AOP</p><h3 id="Advice在Spring-AOP中对应的API"><a href="#Advice在Spring-AOP中对应的API" class="headerlink" title="Advice在Spring AOP中对应的API"></a>Advice在Spring AOP中对应的API</h3><p>Aspject中用五个注解来定义Advice，表示代理逻辑，以及执行时机；Spring有提供类似执行时机的实现类：</p><table><thead><tr><th>Aspject注解<br>（代理逻辑、执行时机）</th><th>Spring实现类<br>（类似执行时机）</th><th>Spring解析注解为<br>对应的Advice类</th></tr></thead><tbody><tr><td>@Before</td><td>接口MethodBeforeAdvice，<br>继承了接口BeforeAdvice</td><td>AspectJMethodBeforeAdvice<br>（实际上是MethodBeforeAdvice）</td></tr><tr><td>@AfterReturning</td><td>接口AfterReturningAdvice</td><td>AspectJAfterReturningAdvice<br>（实际上是AfterReturningAdvice）</td></tr><tr><td>@AfterThrowing</td><td>接口ThrowsAdvice</td><td>AspectJAfterThrowingAdvice<br>（实际上是MethodInterceptor）</td></tr><tr><td>@After</td><td>接口AfterAdvice</td><td>AspectJAfterAdvice<br>（实际上是MethodInterceptor）</td></tr><tr><td>@Around</td><td>接口MethodInterceptor</td><td>AspectJAroundAdvice<br>（实际上是MethodInterceptor）</td></tr></tbody></table><h3 id="TargetSource的使用"><a href="#TargetSource的使用" class="headerlink" title="TargetSource的使用"></a>TargetSource的使用</h3><p>日常的AOP中，被代理对象就是Bean对象，是由BeanFactory创建出来的。</p><p>Spring AOP中提供了TargetSource机制，可以用自定义逻辑来创建被代理对象。</p><p>@Lazy注解当加在属性上时，会产生一个代理对象赋值给这个属性：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Complete implementation of the * {@link org.springframework.beans.factory.support.AutowireCandidateResolver} strategy * interface, providing support for qualifier annotations as well as for lazy resolution * driven by the {@link Lazy} annotation in the {@code context.annotation} package. * * @author Juergen Hoeller * @since 4.0 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span> <span class="token keyword">extends</span> <span class="token class-name">QualifierAnnotationAutowireCandidateResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> Object <span class="token function">getLazyResolutionProxyIfNecessary</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断是不是懒注入（@Autowired+@Lazy）</span>        <span class="token comment" spellcheck="true">// 如果是则会在注入时生成一个代理对象注入给属性，所以懒注入并不代表属性为null</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">isLazy</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">buildLazyResolutionProxy</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isLazy</span><span class="token punctuation">(</span>DependencyDescriptor descriptor<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Annotation ann <span class="token operator">:</span> descriptor<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Lazy lazy <span class="token operator">=</span> AnnotationUtils<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ann<span class="token punctuation">,</span> Lazy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> lazy<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        MethodParameter methodParam <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getMethodParameter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>methodParam <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Method method <span class="token operator">=</span> methodParam<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Lazy lazy <span class="token operator">=</span> AnnotationUtils<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>methodParam<span class="token punctuation">.</span><span class="token function">getAnnotatedElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Lazy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lazy <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> lazy<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> Object <span class="token function">buildLazyResolutionProxy</span><span class="token punctuation">(</span><span class="token keyword">final</span> DependencyDescriptor descriptor<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        BeanFactory beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">,</span>                <span class="token string">"BeanFactory needs to be a DefaultListableBeanFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> DefaultListableBeanFactory dlbf <span class="token operator">=</span> <span class="token punctuation">(</span>DefaultListableBeanFactory<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>        TargetSource ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames <span class="token operator">=</span> <span class="token punctuation">(</span>beanName <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                Object target <span class="token operator">=</span> dlbf<span class="token punctuation">.</span><span class="token function">doResolveDependency</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type <span class="token operator">=</span> <span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>List<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Set<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type <span class="token operator">||</span> Collection<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchBeanDefinitionException</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token string">"Optional dependency not present for lazy injection point"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String autowiredBeanName <span class="token operator">:</span> autowiredBeanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>dlbf<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            dlbf<span class="token punctuation">.</span><span class="token function">registerDependentBean</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> target<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseTarget</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ProxyFactory生成代理对象，并使用了TargetSource</span>        <span class="token comment" spellcheck="true">// 所以代理对象在执行某个方法时，调用TargetSource的getTarget()方法实时得到一个被代理对象</span>        ProxyFactory pf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pf<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> dependencyType <span class="token operator">=</span> descriptor<span class="token punctuation">.</span><span class="token function">getDependencyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dependencyType<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pf<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>dependencyType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pf<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>dlbf<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Introduction-DeclareParents-简介"><a href="#Introduction-DeclareParents-简介" class="headerlink" title="Introduction(@DeclareParents)简介"></a>Introduction(@DeclareParents)简介</h3><p>Spring官网对Introduction和相关注解@DeclareParents的介绍：</p><blockquote><p>Introductions (known as inter-type declarations in AspectJ) enable an aspect to declare that advised objects implement a given interface, and to provide an implementation of that interface on behalf of those objects.<br>An introduction is made using the @DeclareParents annotation. This annotation is used to declare that matching types have a new parent (hence the name).</p></blockquote><p><strong>Introduction有什么用呢？</strong></p><p>可以给一个已有的类引入新的接口，在不修改原类的情况下，做一些扩展行为</p><p>比如说生产上正在提供服务，这个时候想要加一个验证功能，就可以通过@DeclareParents注解实现</p><p><strong>如何使用@DeclareParents注解？</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第一步，添加一个接口</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>aop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Verifier</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">validate</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第二步，给接口添加一个实现类</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>aop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicVerifier</span> <span class="token keyword">implements</span> <span class="token class-name">Verifier</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validate</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"gc"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span><span class="token function">getPass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"6174"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第三步，使用@DeclareParents注解关联新增接口和原来的类</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@DeclareParents</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.gax.service.UserService"</span><span class="token punctuation">,</span>            defaultImpl <span class="token operator">=</span> com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>BasicVerifier<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Verifier verifer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第四步，测试效果</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPass</span><span class="token punctuation">(</span><span class="token string">"6174888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建一个Spring容器</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注意，这里Verifier是一个接口</span>        Verifier verifier <span class="token operator">=</span> <span class="token punctuation">(</span>Verifier<span class="token punctuation">)</span> userService<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 验证通过才能提供服务</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>verifier<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            userService<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// AppConfig指定扫描包</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.gax"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//@EnableAspectJAutoProxy</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AnnotationAwareAspectJAutoProxyCreator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pass<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>@EnableAspectJAutoProxy</p><p>@Import(AnnotationAwareAspectJAutoProxyCreator.class)</p><p>某些情况下，上面这两种写法等价。@EnableAspectJAutoProxy注解内部其实就是注册了一个AnnotationAwareAspectJAutoProxyCreator</p><p>AnnotationAwareAspectJAutoProxyCreator其实就是一个BeanPostProcessor，在Spring启动过程中可以去解析AspectJ的注解</p><p>参考文章：<a href="https://www.cnblogs.com/powerwu/articles/5170861.html">https://www.cnblogs.com/powerwu/articles/5170861.html</a></p><h3 id="LoadTimeWeaver"><a href="#LoadTimeWeaver" class="headerlink" title="LoadTimeWeaver"></a>LoadTimeWeaver</h3><p>参考文章：<a href="https://www.cnblogs.com/davidwang456/p/5633609.html">https://www.cnblogs.com/davidwang456/p/5633609.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-动态代理</title>
      <link href="/posts/spring-family/9/"/>
      <url>/posts/spring-family/9/</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>代理模式：为其他对象提供一种代理以控制对这个对象的访问，增强一个类中的某个方法，对程序进行扩展。</p><p>动态代理可以在<strong>不修改类源码</strong>的前提下，给类中方法增加额外逻辑</p><p><strong>通过cglib来实现的代理对象的创建：</strong></p><p><font color="red">基于<strong>父子类</strong>，被代理类是父类，代理类是子类，代理对象就是代理类的实例对象，代理类是由cglib创建的</font></p><span id="more"></span><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Callback<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Enhancer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodProxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// cglib动态代理单独使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        UserService target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过cglib技术</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义额外逻辑，也就是代理逻辑</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallbacks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Throwable            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//// 写法一</span><span class="token comment" spellcheck="true">//              Object result = methodProxy.invoke(target, objects);</span><span class="token comment" spellcheck="true">//// 写法二</span><span class="token comment" spellcheck="true">//Object result = method.invoke(target, objects);</span>                <span class="token comment" spellcheck="true">// 写法三</span>                Object result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态代理所创建出来的UserService对象</span>        UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行这个userService的test方法时，就会额外会执行一些其他逻辑</span>        userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>利用JDK动态代理来生成一个代理对象：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        UserService target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// UserInterface接口的代理对象</span>        Object proxy <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>UserInterface<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> Throwable                <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> result<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注意这里必须是接口类型UserInterface，如果是UserService类会报错</span>        UserInterface userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserInterface<span class="token punctuation">)</span>proxy<span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">UserInterface</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">注意：代理对象proxy必须是接口类型</font></p><h3 id="ProxyFactory"><a href="#ProxyFactory" class="headerlink" title="ProxyFactory"></a>ProxyFactory</h3><p>Spring对上面的两种动态代理技术进行了封装，封装出来的类叫做ProxyFactory</p><p>表示创建代理对象的一个工厂，使用起来更加方便</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>intercept<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aopalliance<span class="token punctuation">.</span>intercept<span class="token punctuation">.</span>MethodInvocation<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ProxyFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        UserService target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyFactory proxyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyFactory<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyFactory<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Throwable            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                UserInterface userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserInterface<span class="token punctuation">)</span>proxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">UserInterface</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInterface</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">ProxyFactory会自动判断是用cglib还是jdk动态代理</font></p><p>如果类实现了接口，那么ProxyFactory底层就会用jdk动态代理</p><p>如果没有实现接口，就会用cglib技术</p><h3 id="Advice的分类"><a href="#Advice的分类" class="headerlink" title="Advice的分类"></a>Advice的分类</h3><p>1、Before Advice：方法之前执行</p><p>2、After returning advice：方法return后执行</p><p>3、After throwing advice：方法抛异常后执行</p><p>4、After (finally) advice：方法执行完finally之后执行，这是最后的，比return更后</p><p>5、Around advice：这是功能最强大的Advice，可以自定义执行顺序</p><h3 id="Advisor"><a href="#Advisor" class="headerlink" title="Advisor"></a>Advisor</h3><p>一个Advisor是有一个Pointcut和一个Advice组成的，通过Pointcut可以指定需要被代理的逻辑</p><p><font color="red">可以通过Advisor来控制具体代理哪个方法</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        UserService target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyFactory proxyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyFactory<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyFactory<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Pointcut <span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StaticMethodMatcherPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"testAbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Advice <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span>                        <span class="token keyword">throws</span> Throwable                    <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> result<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPerInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserInterface userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserInterface<span class="token punctuation">)</span>proxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="创建代理对象的方式"><a href="#创建代理对象的方式" class="headerlink" title="创建代理对象的方式"></a>创建代理对象的方式</h3><h4 id="ProxyFactoryBean"><a href="#ProxyFactoryBean" class="headerlink" title="ProxyFactoryBean"></a>ProxyFactoryBean</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.gax"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ProxyFactoryBean <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyFactoryBean proxyFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyFactoryBean<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyFactoryBean<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Throwable            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxyFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceProxy<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color="red">上面这种方式<strong>只能针对某一个Bean</strong></font></p><p>ProxyFactoryBean还有额外的功能，比如可以把某个Advise或Advisor定义成为Bean，然后在ProxyFactoryBean中进行设置</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.gax"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MethodInterceptor <span class="token function">gaxAroundAdvise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Throwable            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ProxyFactoryBean <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyFactoryBean proxyFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyFactoryBean<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyFactoryBean<span class="token punctuation">.</span><span class="token function">setInterceptorNames</span><span class="token punctuation">(</span><span class="token string">"gaxAroundAdvise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxyFactoryBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceProxy<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="BeanNameAutoProxyCreator"><a href="#BeanNameAutoProxyCreator" class="headerlink" title="BeanNameAutoProxyCreator"></a>BeanNameAutoProxyCreator</h4><p>ProxyFactoryBean需要自己指定被代理的对象；BeanNameAutoProxyCreator可以通过指定某个bean的名字，来对该bean进行代理</p><p>通过BeanNameAutoProxyCreator可以对批量的Bean进行AOP，并且指定了代理逻辑，指定了一个InterceptorName，也就是一个Advise，前提条件是这个Advise也得是一个Bean，这样Spring才能找到的，但是BeanNameAutoProxyCreator的缺点很明显，它只能根据beanName来指定想要代理的Bean。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.gax"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MethodInterceptor <span class="token function">gaxAroundAdvise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Throwable            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> BeanNameAutoProxyCreator <span class="token function">beanNameAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        BeanNameAutoProxyCreator beanNameAutoProxyCreator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanNameAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanNameAutoProxyCreator<span class="token punctuation">.</span><span class="token function">setBeanNames</span><span class="token punctuation">(</span><span class="token string">"userSe*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanNameAutoProxyCreator<span class="token punctuation">.</span><span class="token function">setInterceptorNames</span><span class="token punctuation">(</span><span class="token string">"gaxAroundAdvise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanNameAutoProxyCreator<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> beanNameAutoProxyCreator<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceProxy<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="DefaultAdvisorAutoProxyCreator"><a href="#DefaultAdvisorAutoProxyCreator" class="headerlink" title="DefaultAdvisorAutoProxyCreator"></a>DefaultAdvisorAutoProxyCreator</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.gax"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> MethodInterceptor <span class="token function">gaxAroundAdvise</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span>                <span class="token keyword">throws</span> Throwable            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultPointcutAdvisor <span class="token function">defaultPointcutAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        NameMatchMethodPointcut pointcut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NameMatchMethodPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pointcut<span class="token punctuation">.</span><span class="token function">addMethodName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DefaultPointcutAdvisor defaultPointcutAdvisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPointcutAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultPointcutAdvisor<span class="token punctuation">.</span><span class="token function">setPointcut</span><span class="token punctuation">(</span>pointcut<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultPointcutAdvisor<span class="token punctuation">.</span><span class="token function">setAdvice</span><span class="token punctuation">(</span><span class="token function">gaxAroundAdvise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> defaultPointcutAdvisor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="token function">defaultAdvisorAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultAdvisorAutoProxyCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> defaultAdvisorAutoProxyCreator<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userServiceProxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceProxy<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过DefaultAdvisorAutoProxyCreator会直接去找所有Advisor类型的Bean，根据Advisor中的PointCut和Advice信息，确定要代理的Bean以及代理逻辑。</p><p>简化成<strong>注解方式</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GaxAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(public void com.gax.service.UserService.test())"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gaxBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"gaxBefore"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>要代理的类：表达式</p><p>代理逻辑：被@Before修饰的方法</p><p>Spring只要去解析这些注解就好了，解析之后得到对应的Pointcut对象、Advice对象，生成Advisor对象，扔进ProxyFactory中，进而产生对应的代理对象，具体怎么解析这些注解就是**@EnableAspectJAutoProxy注解**所要做的事情</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-推断构造方法</title>
      <link href="/posts/spring-family/8/"/>
      <url>/posts/spring-family/8/</url>
      
        <content type="html"><![CDATA[<p>Spring中的Bean实例化对象，需要构造方法</p><p><strong>通常一个类只有一个构造方法：</strong></p><p>1、无参的构造方法，实例化只能选择这一个</p><p>2、有参的构造方法</p><ul><li>使用AnnotationConfigApplicationContext，会使用这个构造方法进行实例化，Spring根据构造方法的参数信息去寻找Bean，然后传给构造方法</li><li>使用ClassPathXmlApplicationContext，表示使用XML的方式来使用bean。在XML中指定手动指定构造方法的参数值；或者配置autowire=constructor让Spring自动去寻找bean做为构造方法参数值。</li></ul><span id="more"></span><p><strong>多个构造方法情况：</strong></p><p>1、如果开发者指定了想要使用的构造方法，那么就用这个构造方法</p><ul><li>xml中的<code>&lt;constructor-arg&gt;</code>标签，表示构造方法参数，可以根据这个确定想要使用的构造方法的参数个数，从而确定想要使用的构造方法<font color="red">，直接指定了构造方法的参数值</font></li><li>通过@Autowired注解，@Autowired注解可以写在构造方法上，表示开发者想使用哪个构造方法<font color="red">，其实是Spring通过byType+byName选择具体哪一个构造方法</font></li></ul><p>2、如果开发者没有指定想要使用的构造方法，则看开发者有没有让Spring自动选择构造方法</p><ul><li>只能在ClassPathXmlApplicationContext中使用，可以在xml中<strong>指定某个bean</strong>的autowire为constructor<font color="red">，通过构造方法自动注入</font></li></ul><p>3、如果开发者也没有让Spring自动选择构造方法，则Spring利用无参构造方法，如果没有无参构造方法，则报错</p><p>注意：多个构造方法上写了@Autowired注解会报错。@Autowired的属性required，默认为ture</p><p>@Autowired或@Autowired（required=true），有多个会报错</p><p>但是@Autowired（required=false）可以有多个</p><h3 id="源码思路"><a href="#源码思路" class="headerlink" title="源码思路"></a>源码思路</h3><p>1、AbstractAutowireCapableBeanFactory类中的createBeanInstance()方法会去创建一个Bean实例</p><p>2、根据BeanDefinition加载类得到Class对象</p><p>3、如果BeanDefinition绑定了一个Supplier，那就调用Supplier的get方法得到一个对象并直接返回</p><p>4、如果BeanDefinition中存在<strong>factoryMethodName</strong>，那么就调用该工厂方法得到一个bean对象并返回</p><p>5、如果BeanDefinition已经自动构造过了，那就调用autowireConstructor()自动构造一个对象</p><p>6、调用SmartInstantiationAwareBeanPostProcessor的determineCandidateConstructors()方法得到哪些构造方法是可以用的</p><p>7、存在可用得构造方法；当前BeanDefinition的autowired是 AUTOWIRE_CONSTRUCTOR；BeanDefinition中指定了构造方法参数值；创建Bean的时候指定了构造方法参数值，符合这几种就调用 <strong>autowireConstructor()</strong> 方法自动构造一个对象</p><p>8、最后，如果不是上述情况，就根据无参的构造方法实例化一个对象</p><h4 id="autowireConstructor"><a href="#autowireConstructor" class="headerlink" title="autowireConstructor()"></a>autowireConstructor()</h4><p>1、先检查是否指定了具体的构造方法和构造方法参数值，或者在BeanDefinition中缓存了具体的构造方法或构造方法参数值，如果存在那么则直接使用该构造方法进行实例化</p><p>2、如果没有确定的构造方法或构造方法参数值，那么</p><p>a）如果没有确定的构造方法，那么则找出类中所有的构造方法</p><p>b）如果只有一个无参的构造方法，那么直接使用无参的构造方法进行实例化</p><p>c）如果有多个可用的构造方法或者当前Bean需要自动通过构造方法注入</p><p>d）根据所指定的构造方法参数值，确定所需要的最少的构造方法参数值的个数</p><p>e）对所有的构造方法进行排序，参数个数多的在前面</p><p>f）遍历每个构造方法</p><p>g）如果不是调用getBean方法时所指定的构造方法参数值，那么则根据构造方法参数类型找值</p><p>h）如果是调用getBean方法时所指定的构造方法参数值，就直接利用这些值</p><p>i）如果根据当前构造方法找到了对应的构造方法参数值，那么这个构造方法就是可用的，但是不一定这个构造方法就是最佳的，所以这里会涉及到是否有多个构造方法匹配了同样的值，这个时候就会用值和构造方法类型进行匹配程度的打分，找到一个最匹配的</p><h4 id="为什么分越少优先级越高？"><a href="#为什么分越少优先级越高？" class="headerlink" title="为什么分越少优先级越高？"></a>为什么分越少优先级越高？</h4><p>主要看计算找到的bean和构造方法参数类型匹配程度有多高</p><p>假设bean的类型为A，A的父类是B，B的父类是C，同时A实现了接口D 如果构造方法的参数类型为A，那么完全匹配，得分为0 如果构造方法的参数类型为B，那么得分为2 如果构造方法的参数类型为C，那么得分为4 如果构造方法的参数类型为D，那么得分为1</p><pre class=" language-java"><code class="language-java">Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 0</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>MethodInvoker<span class="token punctuation">.</span><span class="token function">getTypeDifferenceWeight</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>A<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>MethodInvoker<span class="token punctuation">.</span><span class="token function">getTypeDifferenceWeight</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>B<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>MethodInvoker<span class="token punctuation">.</span><span class="token function">getTypeDifferenceWeight</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>C<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>MethodInvoker<span class="token punctuation">.</span><span class="token function">getTypeDifferenceWeight</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>D<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><font color="red">可以发现，越匹配分数越低</font></p><h4 id="Bean的情况"><a href="#Bean的情况" class="headerlink" title="@Bean的情况"></a>@Bean的情况</h4><p>首先，Spring会把@Bean修饰的方法解析成BeanDefinition：</p><p>1、如果方法是static的，那么解析出来的BeanDefinition中：</p><ul><li>factoryBeanName为AppConfig所对应的beanName，比如”appConfig”</li><li>factoryMethodName为对应的方法名，比如”aService”</li><li>factoryClass为AppConfig.class</li></ul><p>2、如果方法不是static的，那么解析出来的BeanDefinition中：</p><ul><li>factoryBeanName为null</li><li>factoryMethodName为对应的方法名，比如”aService”</li><li>factoryClass也为AppConfig.class</li></ul><p>@Bean生成的BeanDefinition中，有一个重要的属性isFactoryMethodUnique，表示factoryMethod是不是唯一的，在普通情况下@Bean生成的BeanDefinition的isFactoryMethodUnique为true，但是如果出现了方法重载，那么就是特殊的情况。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token keyword">static</span> AService <span class="token function">aService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> AService <span class="token function">aService</span><span class="token punctuation">(</span>BService bService<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意：上面这种情况只会生成一个aService的Bean</p><p>假设Spring先解析到第一个@Bean，会生成一个BeanDefinition，此时isFactoryMethodUnique为true，但是解析到第二个@Bean时，会判断出来beanDefinitionMap中已经存在一个aService的BeanDefinition了，那么会把之前的这个BeanDefinition的isFactoryMethodUnique修改为false，并且不会生成新的BeanDefinition</p><p>后续在根据BeanDefinition创建Bean时，会根据isFactoryMethodUnique来操作，如果为true，那就表示当前BeanDefinition只对应了一个方法，那也就是只能用这个方法来创建Bean了， 但是如果isFactoryMethodUnique为false，那就表示当前BeanDefition对应了多个方法，需要和推断构造方法的逻辑一样，去选择用哪个方法来创建Bean。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-循环依赖简述</title>
      <link href="/posts/spring-family/7/"/>
      <url>/posts/spring-family/7/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是循环依赖"><a href="#什么是循环依赖" class="headerlink" title="什么是循环依赖"></a>什么是循环依赖</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// A依赖了B</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> B b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// B依赖了A</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> A a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 循环依赖</span>A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>b<span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span></code></pre><p>对象之间的相互依赖很正常，但是在Spring中由于对象创建要经过Bean的生命周期，所以就有了循环依赖问题</p><span id="more"></span><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><p>在Spring中，被Spring管理的对象叫做Bean，那么Bean是如何生成的？</p><p>1、Spring扫描class得到BeanDefinition，放在一个Map里</p><p>2、根据得到的BeanDefinition去生成Bean</p><p>3、首先根据class推断构造方法</p><p>4、根据推断出来的构造方法，反射得到一个对象</p><p>5、填充原始对象中的属性，依赖注入</p><p>6、如果原始对象中的某个方法被AOP了，那么则需要根据原始对象生成一个代理对象</p><p>7、把最终生成的代理对象放入单例池中，下次getBean直接从单例池拿即可</p><p>这里只列举出大致流程，还有Aware回调、初始化等</p><p>出现循环依赖的流程简述：</p><p>ABean创建–&gt;依赖了B属性–&gt;触发BBean创建—&gt;B依赖了A属性—&gt;需要ABean（但ABean还在 创建过程中）</p><p>在Spring中，就是通过<strong>三级缓存机制</strong>解决的循环依赖问题</p><h3 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h3><p>一级缓存为：<strong>singletonObjects</strong>；二级缓存为：<strong>earlySingletonObjects</strong>；三级缓存为：<strong>singletonFactories</strong></p><p>三个缓存的作用：</p><ul><li>singletonObjects中缓存的是已经经历了完整生命周期的bean对象。</li><li>earlySingletonObjects比singletonObjects多了一个early，表示缓存的是早期的bean对象。也就是Bean的生命周期还没走完就把这个Bean放入了earlySingletonObjects。</li><li>singletonFactories中缓存的是ObjectFactory，表示对象工厂，表示用来创建早期bean对象的工厂。</li></ul><p>循环依赖问题：A创建时—&gt;需要B—-&gt;B去创建—&gt;需要A，从而产生了循环</p><p>打破循环依赖，可以加个中间人（缓存）</p><p><img src="/images/spring/dep-1.jpg" alt="dep-1"></p><p><strong>一个缓存就能解决循环依赖了，那么为什么Spring中还需要singletonFactories呢？</strong></p><p>如果A的原始对象注入给B的属性之后，A的原始对象进行了AOP产生了一个代理对象，此时对于A而言，它的Bean对象其实应该是AOP之后的代理对象，而B的a属性对应的并不是AOP之后的代理对象，这就产生了冲突。<strong>B依赖的A和最终的A不是同一个对象</strong>。</p><p>现在Spring所用的singletonFactories，为了调和不同的情况，在singletonFactories中存的是lambda表达式，这样的话，只有在出现了循环依赖的情况，才会执行lambda表达式，才会进行AOP，也就说只有在出现了循环依赖的情况下才会打破Bean生命周期的设计，如果一个Bean没有出现循环依赖，那么它还是遵守了Bean的生命周期的设计的。</p><p>singletonFactories中存的是某个beanName对应的ObjectFactory，在bean的生命周期中，生成完原始对象之后，就会构造一个ObjectFactory存入singletonFactories中。这个ObjectFactory是一个函数式接口，所以支持Lambda表达式：**() -&gt; getEarlyBeanReference(beanName, mbd, bean)**</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">SmartInstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                SmartInstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>SmartInstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>                exposedObject <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>exposedObject<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// InstantiationAwareBeanPostProcessorAdapter</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// AbstractAutoProxyCreator（AnnotationAwareAspectJAutoProxyCreator的父类，进行AOP用到）</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、<strong>singletonObjects</strong>：缓存经过了<strong>完整生命周期</strong>的bean</p><p>2、<strong>earlySingletonObjects</strong>：缓存<strong>未经过完整生命周期的bean</strong>，如果某个bean出现了循环依赖，就会<strong>提前</strong>把这个暂时未经过完整生命周期的bean放入earlySingletonObjects中，这个bean如果要经过AOP，那么就会把代理对象放入earlySingletonObjects中，否则就是把原始对象放入earlySingletonObjects</p><p>3、<strong>singletonFactories</strong>：缓存的是一个ObjectFactory，也就是一个Lambda表达式。在每个Bean的生成过程中，经过<strong>实例化</strong>得到一个原始对象后，都会提前基于原始对象暴露一个Lambda表达式，并保存到三级缓存中，这个Lambda表达式<strong>可能用到，也可能用不到</strong>，如果当前Bean没有出现循环依赖，那么这个Lambda表达式没用，当前bean按照自己的生命周期正常执行，执行完后直接把当前bean放入singletonObjects中，如果当前bean在依赖注入时发现出现了循环依赖，则从三级缓存中拿到Lambda表达式，并执行Lambda表达式得到一个对象，并把得到的对象放入二级缓存。</p><p>4、还有一个缓存，就是<strong>earlyProxyReferences</strong>，用来记录某个原始对象是否进行过AOP了。在AbstractAutoProxyCreator的postProcessAfterInitialization方法中，会去判断当前beanName是否在earlyProxyReferences，如果在则表示已经提前进行过AOP了，无需再次进行AOP。</p><p>思考：为什么需要<strong>singletonFactories</strong>？假设没有<strong>singletonFactories</strong>，只有<strong>earlySingletonObjects</strong>会怎样？</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-依赖注入二</title>
      <link href="/posts/spring-family/6/"/>
      <url>/posts/spring-family/6/</url>
      
        <content type="html"><![CDATA[<h2 id="findAutowireCandidates-实现"><a href="#findAutowireCandidates-实现" class="headerlink" title="findAutowireCandidates()实现"></a>findAutowireCandidates()实现</h2><p>1、找出BeanFactory中类型为type的所有的Bean的名字，根据BeanDefinition就能判断和当前type是不是匹配，不用生成Bean对象</p><p>2、把resolvableDependencies中key为type的对象找出来并添加到result中</p><p>3、遍历根据type找出的beanName，判断当前beanName对应的Bean是不是能够被自动注入</p><p>4、先判断beanName对应的BeanDefinition中的autowireCandidate属性，如果为false，表示不能用来进行自动注入，如果为true则继续进行判断</p><p>5、判断当前type是不是泛型，如果是泛型是会把容器中所有的beanName找出来的，如果是这种情况，那么在这一步中就要获取到泛型的真正类型，然后进行匹配，如果当前beanName和当前泛型对应的真实类型匹配，那么则继续判断</p><p>6、如果当前DependencyDescriptor上存在@Qualifier注解，那么则要判断当前beanName上是否定义了Qualifier，并且是否和当前DependencyDescriptor上的Qualifier相等，相等则匹配</p><p>7、经过上述验证之后，当前beanName才能成为一个可注入的，添加到result中</p><span id="more"></span><h3 id="依赖注入中泛型注入的实现"><a href="#依赖注入中泛型注入的实现" class="headerlink" title="依赖注入中泛型注入的实现"></a>依赖注入中泛型注入的实现</h3><p>首先在Java反射中，有一个Type接口，表示类型，具体分类为：</p><p>1、raw types：也就是普通Class</p><p>2、parameterized types：对应ParameterizedType接口，泛型类型</p><p>3、array types：对应GenericArrayType，泛型数组</p><p>4、type variables：对应TypeVariable接口，表示类型变量，也就是所定义的泛型，比如T、K</p><p>5、primitive types：基本类型，int、boolean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeTest</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">private</span> Integer it<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> iarray<span class="token punctuation">;</span>        <span class="token keyword">private</span> List list<span class="token punctuation">;</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> slist<span class="token punctuation">;</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> tlist<span class="token punctuation">;</span>        <span class="token keyword">private</span> T t<span class="token punctuation">;</span>        <span class="token keyword">private</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> tarray<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException    <span class="token punctuation">{</span>        <span class="token function">test</span><span class="token punctuation">(</span>TypeTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>TypeTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"it"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>TypeTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iarray"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>TypeTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>TypeTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"slist"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>TypeTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"tlist"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>TypeTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>TypeTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"tarray"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>Field field<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"是基本数据类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"不是基本数据类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getGenericType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"是泛型类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"不是泛型类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"是普通数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"不是普通数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getGenericType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">GenericArrayType</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"是泛型数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"不是泛型数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getGenericType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">TypeVariable</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"是泛型变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"不是泛型变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Spring中注入点是泛型的处理：</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span><span class="token operator">&lt;</span>OrderService<span class="token punctuation">,</span> StockService<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseService</span><span class="token operator">&lt;</span>O<span class="token punctuation">,</span> S<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">protected</span> O o<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">protected</span> S s<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>1、Spring扫描时发现UserService是一个Bean</p><p>2、取出注入点，也就是BaseService中的两个属性o、s</p><p>3、按注入点类型进行注入，发现o和s都是泛型，所以Spring需要确定o和s的具体类型</p><p>4、当前正在创建的是UserService的Bean，所以可以通过下面这行代码获取到具体的泛型信息</p><pre class=" language-java"><code class="language-java">userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回：com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>service<span class="token punctuation">.</span>BaseService<span class="token operator">&lt;</span>com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>service<span class="token punctuation">.</span>OrderService<span class="token punctuation">,</span> com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>service<span class="token punctuation">.</span>StockService<span class="token operator">></span></code></pre><p>5、获取UserService的父类BaseService的泛型变量</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>TypeVariable<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> typeParameter <span class="token operator">:</span> userService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTypeParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>_out_<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>typeParameter<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>6、根据第4、5步，可以知道o对应的具体就是OrderService，s对应的具体类型就是StockService</p><p>7、调用<code>oField.getGenericType()</code>就知道当前field使用的是哪个泛型，得到具体类型</p><h3 id="Qualifier的使用"><a href="#Qualifier的使用" class="headerlink" title="@Qualifier的使用"></a>@Qualifier的使用</h3><p>定义两个注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"random"</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Random</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"roundRobin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RoundRobin</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>定义一个接口和两个实现类，表示负载均衡：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoadBalance</span> <span class="token punctuation">{</span>    String <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Random</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalance</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RoundRobin</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoundRobinStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">LoadBalance</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span>  <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@RoundRobin</span>    <span class="token keyword">private</span> LoadBalance loadBalance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loadBalance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-依赖注入</title>
      <link href="/posts/spring-family/5/"/>
      <url>/posts/spring-family/5/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring中到底有几种依赖注入的方式？"><a href="#Spring中到底有几种依赖注入的方式？" class="headerlink" title="Spring中到底有几种依赖注入的方式？"></a>Spring中到底有几种依赖注入的方式？</h2><ul><li><p>手动注入</p><p>a）set方式注入</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.gax.service.UserService"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"orderService"</span> ref<span class="token operator">=</span><span class="token string">"orderService"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p>b）构造方法注入</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.gax.service.UserService"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>constructor‐arg index<span class="token operator">=</span><span class="token string">"0"</span> ref<span class="token operator">=</span><span class="token string">"orderService"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre></li><li><p>自动注入</p><p>a）XML的autowire自动注入</p><p>b） @Autowired注解的自动注入</p></li></ul><span id="more"></span><p>属性填充部分源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Populate the bean instance in the given BeanWrapper with the property values * from the bean definition. * @param beanName the name of the bean * @param mbd the bean definition for the bean * @param bw the BeanWrapper with bean instance */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// for postProcessPropertyValues</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">populateBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> BeanWrapper bw<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bw <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">hasPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                    mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Cannot apply property values to null instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Skip property population phase for null instance.</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span>    <span class="token comment" spellcheck="true">// state of the bean before properties are set. This can be used, for example,</span>    <span class="token comment" spellcheck="true">// to support styles of field injection.</span>    <span class="token comment" spellcheck="true">// 实例化之后，属性设置之前</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instantiationAware<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bp<span class="token punctuation">.</span><span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span>bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    PropertyValues pvs <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">hasPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> resolvedAutowireMode <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_NAME <span class="token operator">||</span> resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// MutablePropertyValues是PropertyValues具体的实现类</span>        MutablePropertyValues newPvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Add property values based on autowire by name if applicable.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_NAME<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autowireByName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Add property values based on autowire by type if applicable.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedAutowireMode <span class="token operator">==</span> AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autowireByType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pvs <span class="token operator">=</span> newPvs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> hasInstAwareBpps <span class="token operator">=</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> needsDepCheck <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getDependencyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> AbstractBeanDefinition<span class="token punctuation">.</span>DEPENDENCY_CHECK_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> filteredPds <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasInstAwareBpps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pvs <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instantiationAware<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里会调用AutowiredAnnotationBeanPostProcessor的postProcessProperties()方法，会直接给对象中的属性赋值</span>            <span class="token comment" spellcheck="true">// AutowiredAnnotationBeanPostProcessor内部并不会处理pvs，直接返回了</span>            PropertyValues pvsToUse <span class="token operator">=</span> bp<span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>filteredPds <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    filteredPds <span class="token operator">=</span> <span class="token function">filterPropertyDescriptorsForDependencyCheck</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span>allowCaching<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                pvsToUse <span class="token operator">=</span> bp<span class="token punctuation">.</span><span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            pvs <span class="token operator">=</span> pvsToUse<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>needsDepCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filteredPds <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            filteredPds <span class="token operator">=</span> <span class="token function">filterPropertyDescriptorsForDependencyCheck</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span>allowCaching<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">checkDependencies</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果当前Bean中的BeanDefinition中设置了PropertyValues，那么最终将是PropertyValues中的值，覆盖@Autowired</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Fill in any missing property values with references to * other beans in this factory if autowire is set to "byName". * @param beanName the name of the bean we're wiring up. * Useful for debugging messages; not used functionally. * @param mbd bean definition to update through autowiring * @param bw the BeanWrapper from which we can obtain information about the bean * @param pvs the PropertyValues to register wired objects with */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">autowireByName</span><span class="token punctuation">(</span>        String beanName<span class="token punctuation">,</span> AbstractBeanDefinition mbd<span class="token punctuation">,</span> BeanWrapper bw<span class="token punctuation">,</span> MutablePropertyValues pvs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当前Bean中能进行自动注入的属性名</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> propertyNames <span class="token operator">=</span> <span class="token function">unsatisfiedNonSimpleProperties</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> bw<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历每个属性名，并去获取Bean对象，并设置到pvs中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String propertyName <span class="token operator">:</span> propertyNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">containsBean</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>            pvs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 记录一下propertyName对应的Bean被beanName给依赖了</span>            <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Added autowiring by name from bean name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                        <span class="token string">"' via property '"</span> <span class="token operator">+</span> propertyName <span class="token operator">+</span> <span class="token string">"' to bean named '"</span> <span class="token operator">+</span> propertyName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Not autowiring property '"</span> <span class="token operator">+</span> propertyName <span class="token operator">+</span> <span class="token string">"' of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                        <span class="token string">"' by name: no matching bean found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Abstract method defining "autowire by type" (bean properties by type) behavior. * &lt;p>This is like PicoContainer default, in which there must be exactly one bean * of the property type in the bean factory. This makes bean factories simple to * configure for small namespaces, but doesn't work as well as standard Spring * behavior for bigger applications. * @param beanName the name of the bean to autowire by type * @param mbd the merged bean definition to update through autowiring * @param bw the BeanWrapper from which we can obtain information about the bean * @param pvs the PropertyValues to register wired objects with */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">autowireByType</span><span class="token punctuation">(</span>        String beanName<span class="token punctuation">,</span> AbstractBeanDefinition mbd<span class="token punctuation">,</span> BeanWrapper bw<span class="token punctuation">,</span> MutablePropertyValues pvs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    TypeConverter converter <span class="token operator">=</span> <span class="token function">getCustomTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        converter <span class="token operator">=</span> bw<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前Bean中能进行自动注入的属性名</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> propertyNames <span class="token operator">=</span> <span class="token function">unsatisfiedNonSimpleProperties</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> bw<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String propertyName <span class="token operator">:</span> propertyNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            PropertyDescriptor pd <span class="token operator">=</span> bw<span class="token punctuation">.</span><span class="token function">getPropertyDescriptor</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Don't try autowiring by type for type Object: never makes sense,</span>            <span class="token comment" spellcheck="true">// even if it technically is a unsatisfied, non-simple property.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">!=</span> pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                MethodParameter methodParam <span class="token operator">=</span> BeanUtils<span class="token punctuation">.</span><span class="token function">getWriteMethodParameter</span><span class="token punctuation">(</span>pd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Do not allow eager init for type matching in case of a prioritized post-processor.</span>                <span class="token comment" spellcheck="true">// eager表示立即初始化，表示在根据类型查找Bean时，允不允许进行Bean的创建，如果当前bean实现了PriorityOrdered，那么则不允许</span>                <span class="token comment" spellcheck="true">// 为什么不允许，因为我自己是PriorityOrdered，是优先级最高的，不能有比我创建得更早的</span>                <span class="token keyword">boolean</span> eager <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">PriorityOrdered</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DependencyDescriptor desc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutowireByTypeDependencyDescriptor</span><span class="token punctuation">(</span>methodParam<span class="token punctuation">,</span> eager<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 根据类型找到的结果</span>                Object autowiredArgument <span class="token operator">=</span> <span class="token function">resolveDependency</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredArgument <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pvs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> autowiredArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String autowiredBeanName <span class="token operator">:</span> autowiredBeanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Autowiring by type from bean name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' via property '"</span> <span class="token operator">+</span>                                propertyName <span class="token operator">+</span> <span class="token string">"' to bean named '"</span> <span class="token operator">+</span> autowiredBeanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                autowiredBeanNames<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedDependencyException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> propertyName<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Return an array of non-simple bean properties that are unsatisfied. * These are probably unsatisfied references to other beans in the * factory. Does not include simple properties like primitives or Strings. * @param mbd the merged bean definition the bean was created with * @param bw the BeanWrapper the bean was created with * @return an array of bean property names * @see org.springframework.beans.BeanUtils#isSimpleProperty */</span><span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">unsatisfiedNonSimpleProperties</span><span class="token punctuation">(</span>AbstractBeanDefinition mbd<span class="token punctuation">,</span> BeanWrapper bw<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PropertyValues pvs <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> pds <span class="token operator">=</span> bw<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 什么样的属性能进行自动注入？</span>    <span class="token comment" spellcheck="true">// 1.该属性有对应的set方法</span>    <span class="token comment" spellcheck="true">// 2.没有在ignoredDependencyTypes中</span>    <span class="token comment" spellcheck="true">// 3.如果该属性对应的set方法是实现的某个接口中所定义的，那么接口没有在ignoredDependencyInterfaces中</span>    <span class="token comment" spellcheck="true">// 4.属性类型不是简单类型，比如int、Integer、int[]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertyDescriptor pd <span class="token operator">:</span> pds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getWriteMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isExcludedFromDependencyCheck</span><span class="token punctuation">(</span>pd<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pvs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>BeanUtils<span class="token punctuation">.</span><span class="token function">isSimpleProperty</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getPropertyType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="XML的autowire自动注入"><a href="#XML的autowire自动注入" class="headerlink" title="XML的autowire自动注入"></a>XML的autowire自动注入</h3><pre><code>&lt;bean id="userService" class="com.gax.service.UserService" autowire="byType"/&gt;// Bean的自动注入模式包括：byType、byName、constructor、default、no</code></pre><p>注意：上面这种写法Spring会自动给<strong>所有属性</strong>赋值，<font color="red">不需要</font>在属性上添加@Autowired注解，但是需要属性对应的<font color="red">set方法</font></p><p><strong>get方法的定义：</strong> 方法参数个数为0个，并且（方法名字以”get”开头或者方法名字以”is”开头并且方法的返回类型为boolean）</p><p> <strong>set方法的定义：</strong>方法参数个数为1个，并且（方法名字以”set”开头并且方法返回类型为void）</p><p>在创建Bean的过程-填充属性时，Spring会去解析当前类，把<strong>当前类的所有方法</strong>都解析出来，解析每个方法得到对应的<code>PropertyDescriptor</code>对象（属性描述器）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertyDescriptor</span> <span class="token keyword">extends</span> <span class="token class-name">FeatureDescriptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// get方法对应返回值类型，set方法对应唯一参数类型</span>    <span class="token keyword">private</span> Reference<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> propertyTypeRef<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get方法的Method对象的引用</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MethodRef readMethodRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// set方法的Method对象的引用</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MethodRef writeMethodRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Reference<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> propertyEditorClassRef<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> bound<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> constrained<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// The base name of the method name which will be prefixed with the</span>    <span class="token comment" spellcheck="true">// read and write method. If name == "foo" then the baseName is "Foo"</span>    <span class="token keyword">private</span> String baseName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// set方法的名字</span>    <span class="token keyword">private</span> String writeMethodName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get方法的名字</span>    <span class="token keyword">private</span> String readMethodName<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>Spring通过byName自动填充属性流程：</strong></p><p>1、找到所有set方法所对应的XXX部分的名字</p><p>（public void set<font color="red">XXX</font>(XXX xxx){ … …}）</p><p>2、根据XXX部分的名字去获取bean</p><p><strong>Spring通过byType自动填充属性流程：</strong></p><p>1、获取到set方法中的唯一参数的类型，并且根据该类型去容器中获取bean</p><p>（public void setXXX(<font color="red">XXX</font> xxx){ … …}）</p><p>2、如果找到多个会报错</p><p><strong>Spring通过constructor自动填充属性流程：</strong><font color="red">因为推断构造方法，所以只考虑一个有参构造方法的情况</font></p><p>1、利用构造方法的参数信息从Spring容器中去找bean</p><p>2、找到bean之后作为参数传给构造方法，从而实例化得到一个bean对象，并完成属性赋值</p><p>（属性赋值的代码得程序员来写，this.XXX = XXX）</p><p>构造方法注入相当于<strong>byType+byName</strong>，普通的byType是根据set方法中的参数类型去找bean，找到多个会报错，而constructor就是通过构造方法中的参数类型去找bean，如果找到多个会根据参数名确定。</p><p><strong>no，表示关闭autowire</strong></p><p><strong>default，表示默认值</strong>，<code>&lt;bean&gt; 标签可以定义在&lt;beans&gt;里面，此时设置&lt;bean&gt;的autowire属性为default，就会去使用&lt;beans&gt;标签中设置的注入方式，作为默认</code></p><h4 id="为什么平时都是用的-Autowired注解？而没有用XML自动注入方式呢？"><a href="#为什么平时都是用的-Autowired注解？而没有用XML自动注入方式呢？" class="headerlink" title="为什么平时都是用的@Autowired注解？而没有用XML自动注入方式呢？"></a>为什么平时都是用的@Autowired注解？而没有用XML自动注入方式呢？</h4><p>官方描述：</p><blockquote><p>Essentially, the @Autowired annotation provides the same capabilities as described in Autowiring Collaborators but with more fine‐grained control and wider applicability</p></blockquote><p>翻译：从本质上讲，@Autowired注解提供了与autowire相同的功能，但是拥有<font color="red">更细粒度的控制</font>和更广泛的适用性。</p><p>XML中的autowire控制的是<strong>整个bean的所有属性</strong>，而@Autowired注解是直接写在<strong>某个属性、某个set方法、某个构造方法</strong>上的。</p><h3 id="Autowired注解的自动注入"><a href="#Autowired注解的自动注入" class="headerlink" title="@Autowired注解的自动注入"></a>@Autowired注解的自动注入</h3><p>@Autowired注解，是byType和byName的结合</p><p>@Autowired注解可以写在：</p><p>1、属性上：先根据<strong>属性类型</strong>去找Bean，如果找到多个再根据<strong>属性名</strong>确定一个</p><p>2、构造方法上：先根据方法<strong>参数类型</strong>去找Bean，如果找到多个再根据<strong>参数名</strong>确定一个</p><p>3、set方法上：先根据方法<strong>参数类型</strong>去找Bean，如果找到多个再根据<strong>参数名</strong>确定一个</p><p>底层用到：属性注入、set方法注入、构造方法注入</p><h3 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h3><p>在创建一个Bean的过程中，Spring会利用AutowiredAnnotationBeanPostProcessor的**postProcessMergedBeanDefinition()**找出注入点并缓存，找注入点的流程为：</p><p>1、遍历当前类的所有的属性字段Field</p><p>2、字段上存在@Autowired、@Value、@Inject中的任意一个，就认为该字段是一个注入点</p><p>3、如果字段是static的，则不进行注入</p><p>4、获取@Autowired中的required属性的值</p><p>5、将字段信息构造成一个<strong>AutowiredFieldElement对象</strong>，作为一个<strong>注入点对象</strong>添加到currElements集合中</p><p>6、遍历当前类的所有方法Method</p><p>7、判断当前Method是否是桥接方法，如果是找到原方法</p><p>找到原方法后重复上面的2-5步</p><p>8、遍历完当前类的字段和方法后，再<strong>遍历父类</strong>的，直到没有父类。</p><p>9、最后将currElements集合封装成一个InjectionMetadata对象，作为当前Bean对应的注入点集合对象并缓存。</p><h3 id="static的字段或方法为什么不支持"><a href="#static的字段或方法为什么不支持" class="headerlink" title="static的字段或方法为什么不支持"></a>static的字段或方法为什么不支持</h3><p>static修饰的字段和方法是属于类的，在多例Bean的情况下很可能发生覆盖，相互影响导致错误发生</p><h3 id="桥接方法"><a href="#桥接方法" class="headerlink" title="桥接方法"></a>桥接方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接口、泛型</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInterface</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">setOrderService</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">UserInterface</span><span class="token operator">&lt;</span>OrderService<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> OrderService orderService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderService</span><span class="token punctuation">(</span>OrderService orderService<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在Spring中当遍历到桥接方法时，得找到原方法</p><h3 id="注入点进行注入"><a href="#注入点进行注入" class="headerlink" title="注入点进行注入"></a>注入点进行注入</h3><p>Spring在AutowiredAnnotationBeanPostProcessor的**postProcessProperties()**方法中，会遍历所找到的注入点依次进行注入。</p><h4 id="字段注入"><a href="#字段注入" class="headerlink" title="字段注入"></a>字段注入</h4><p>1、遍历所有的<strong>AutowiredFieldElement对象</strong></p><p>2、将对应的字段封装为<strong>DependencyDescriptor对象</strong></p><p>3、调用BeanFactory的resolveDependency()方法，传入<strong>DependencyDescriptor对象</strong>，进行依赖查找，找到当前字段所匹配的Bean对象</p><p>4、将<strong>DependencyDescriptor对象</strong>和所找到的<strong>结果对象beanName</strong>封装成一个<strong>ShortcutDependencyDescriptor对象</strong>作为缓存</p><p>5、利用反射将结果对象赋值给字段</p><h4 id="Set方法注入"><a href="#Set方法注入" class="headerlink" title="Set方法注入"></a>Set方法注入</h4><p>1、遍历所有的<strong>AutowiredFieldElement对象</strong></p><p>2、遍历将对应的方法的参数，将每个参数封装成<strong>MethodParameter对象</strong></p><p>3、将<strong>MethodParameter对象</strong>封装为<strong>DependencyDescriptor对象</strong></p><p>4、调用BeanFactory的resolveDependency()方法，传入<strong>DependencyDescriptor对象</strong>，进行依赖查找，找到当前方法参数所匹配的Bean对象</p><p>5、将<strong>DependencyDescriptor对象</strong>和所找到的<strong>结果对象beanName</strong>封装成一个<strong>ShortcutDependencyDescriptor对象</strong>作为缓存</p><p>6、利用反射将找到的所有结果对象传给当前方法，并执行</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Bean生命周期源码</title>
      <link href="/posts/spring-family/4/"/>
      <url>/posts/spring-family/4/</url>
      
        <content type="html"><![CDATA[<h2 id="Bean的生成过程"><a href="#Bean的生成过程" class="headerlink" title="Bean的生成过程"></a>Bean的生成过程</h2><p>首先看创建一个Spring容器的代码：</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>源码：<span class="token comment" spellcheck="true">/** * Create a new AnnotationConfigApplicationContext that needs to be populated * through {@link #register} calls and then manually {@linkplain #refresh refreshed}. */</span><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    StartupStep createAnnotatedBeanDefReader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.context.annotated-bean-reader.create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 额外会创建StandardEnvironment</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    createAnnotatedBeanDefReader<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><span id="more"></span><p><strong>StartupStep是什么？</strong></p><p>StartupStep是Spring5.3版本新增的，有两个实现类：DefaultStartupStep和FlightRecorderStartupStep</p><p>默认使用的是DefaultStartupStep，其实里面什么事情都没有做</p><p>FlightRecorderStartupStep使用了jdk9还是11以后的一个新特性，叫JFR</p><p>JFR简述：在jdk层面，提供的java程序，在生产运行过程中可以监控的一种机制<font color="red">，就像飞机的黑盒子，记录运行速度、性能</font></p><p>注意：这里不是Spring内部提供的牛逼功能，而是<font color="red">Spring利用jdk新特性的一个点</font>，例如记录执行步骤的时间</p><p>了解JFR，可参考文章：<a href="https://zhuanlan.zhihu.com/p/122247741">https://zhuanlan.zhihu.com/p/122247741</a></p><p><strong>创建一个Spring容器主要做了什么事情呢？</strong></p><p>扫描、创建非懒加载的单例Bean</p><p>接下来再看ClassPathBeanDefinitionScanner的扫描方法：<font color="red">（重点关注doScan方法）</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span> <span class="token keyword">extends</span> <span class="token class-name">ClassPathScanningCandidateComponentProvider</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> BeanDefinitionRegistry registry<span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Perform a scan within the specified base packages,     * returning the registered bean definitions.     * &lt;p>This method does &lt;i>not&lt;/i> register an annotation config processor     * but rather leaves this up to the caller.     * @param basePackages the packages to check for annotated classes     * @return set of beans registered if any for tooling registration purposes (never {@code null})     */</span>    <span class="token keyword">protected</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">doScan</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> <span class="token string">"At least one base package must be specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 核心扫描逻辑，得到BeanDefinition</span>            Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinition candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 解析Scope注解，单例还是原型设置进来</span>                ScopeMetadata scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>                candidate<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// @Component注解有没有指定名字，指定直接返回，没有指定构造默认的</span>                <span class="token comment" spellcheck="true">// 默认根据类的短名生成。大部分情况首字母小写，但是类名前两个字母都是大写就直接返回类名</span>                <span class="token comment" spellcheck="true">// 举例默认情况：UserService - userService; ABTest - ABTest</span>                String beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 遍历出来的BeanDefinition设置默认值</span>                    <span class="token function">postProcessBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 解析@Lazy、@Primary、@DependsOn、@Role、@Description，设置给BeanDefinition对应的属性</span>                    AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 检查Spring容器中是否已经存在该beanName</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkCandidate</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    BeanDefinitionHolder definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    definitionHolder <span class="token operator">=</span>                            AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                    beanDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 注册</span>                    <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> beanDefinitions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Scan the class path for candidate components.     * @param basePackage the package to check for annotated classes     * @return a corresponding Set of autodetected bean definitions     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> <span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>String basePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>componentsIndex <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">indexSupportsIncludeFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">addCandidateComponentsFromIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>componentsIndex<span class="token punctuation">,</span> basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">scanCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> <span class="token function">scanCandidateComponents</span><span class="token punctuation">(</span>String basePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取basePackage下所有的文件资源，匹配所有的class文件</span>            String packageSearchPath <span class="token operator">=</span> ResourcePatternResolver<span class="token punctuation">.</span>CLASSPATH_ALL_URL_PREFIX <span class="token operator">+</span>                    <span class="token function">resolveBasePackage</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePattern<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 资源，class文件的File对象</span>            Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> <span class="token function">getResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>packageSearchPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> traceEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> debugEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Scanning "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 类的元数据读取器，类的注解信息、名字、是不是抽象、实现的接口名字、父类等</span>                        <span class="token comment" spellcheck="true">// 底层使用的ASM技术，metadataReader相当于类的一个代表</span>                        MetadataReader metadataReader <span class="token operator">=</span> <span class="token function">getMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// excludeFilters、includeFilters判断</span>                        <span class="token comment" spellcheck="true">// includeFilters判断：默认添加一个@Component注解（创建扫描器时添加的）</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                             ScannedGenericBeanDefinition sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScannedGenericBeanDefinition</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">;</span>                            sbd<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Identified candidate component class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Ignored because not a concrete top-level class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Ignored because not matching any filter: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                                <span class="token string">"Failed to read candidate component class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Ignored because not readable: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"I/O failure during classpath scanning"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> candidates<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Determine whether the given class does not match any exclude filter     * and does match at least one include filter.     * @param metadataReader the ASM ClassReader for the class     * @return whether the class qualifies as a candidate component     */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>MetadataReader metadataReader<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果传入的类和任何一个排除过滤器匹配了，就返回false，表示不是一个Bean</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TypeFilter tf <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>excludeFilters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tf<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">,</span> <span class="token function">getMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 符合includeFilters的会进行条件匹配，通过了才是Bean，也就是先看有没有@Component，再看是否符合@Conditional</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TypeFilter tf <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>includeFilters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 有@Component注解匹配</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tf<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">,</span> <span class="token function">getMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">isConditionMatch</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Determine whether the given class is a candidate component based on any     * {@code @Conditional} annotations.     * @param metadataReader the ASM ClassReader for the class     * @return whether the class qualifies as a candidate component     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isConditionMatch</span><span class="token punctuation">(</span>MetadataReader metadataReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">ConditionEvaluator</span><span class="token punctuation">(</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePatternResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Determine if an item should be skipped based on {@code @Conditional} annotations.     * The {@link ConfigurationPhase} will be deduced from the type of item (i.e. a     * {@code @Configuration} class will be {@link ConfigurationPhase#PARSE_CONFIGURATION})     * @param metadata the meta data     * @return if the item should be skipped     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>AnnotatedTypeMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Determine if an item should be skipped based on {@code @Conditional} annotations.     * @param metadata the meta data     * @param phase the phase of the call     * @return if the item should be skipped     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> AnnotatedTypeMetadata metadata<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ConfigurationPhase phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有@Conditional注解，就不要跳过，当前类是一个Bean（有@Component，没有@Conditional）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>metadata<span class="token punctuation">.</span><span class="token function">isAnnotated</span><span class="token punctuation">(</span>Conditional<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata <span class="token keyword">instanceof</span> <span class="token class-name">AnnotationMetadata</span> <span class="token operator">&amp;&amp;</span>                    ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isConfigurationCandidate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotationMetadata<span class="token punctuation">)</span> metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> ConfigurationPhase<span class="token punctuation">.</span>PARSE_CONFIGURATION<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> ConfigurationPhase<span class="token punctuation">.</span>REGISTER_BEAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Condition<span class="token operator">></span> conditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> conditionClasses <span class="token operator">:</span> <span class="token function">getConditionClasses</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String conditionClass <span class="token operator">:</span> conditionClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Condition condition <span class="token operator">=</span> <span class="token function">getCondition</span><span class="token punctuation">(</span>conditionClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                conditions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        AnnotationAwareOrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>conditions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Condition condition <span class="token operator">:</span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ConfigurationPhase requiredPhase <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurationCondition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                requiredPhase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ConfigurationCondition<span class="token punctuation">)</span> condition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfigurationPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>requiredPhase <span class="token operator">==</span> null <span class="token operator">||</span> requiredPhase <span class="token operator">==</span> phase<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>condition<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Create a new ScannedGenericBeanDefinition for the class that the     * given MetadataReader describes.     * @param metadataReader the MetadataReader for the scanned target class     */</span>    <span class="token keyword">public</span> <span class="token function">ScannedGenericBeanDefinition</span><span class="token punctuation">(</span>MetadataReader metadataReader<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">,</span> <span class="token string">"MetadataReader must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>metadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里只是把className设置到BeanDefinition中</span>        <span class="token function">setBeanClassName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setResource</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Specify the bean class name of this bean definition.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanClassName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> String beanClassName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 把className设置到BeanDefinition的beanClass属性，beanClass是Object类型</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beanClass <span class="token operator">=</span> beanClassName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Determine whether the given bean definition qualifies as candidate.     * &lt;p>The default implementation checks whether the class is not an interface     * and not dependent on an enclosing class.     * &lt;p>Can be overridden in subclasses.     * @param beanDefinition the bean definition to check     * @return whether the bean definition qualifies as a candidate component     */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>AnnotatedBeanDefinition beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationMetadata metadata <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不是独立的，不能成为Bean（如果是一个顶级类或者静态内部类，那么就是独立的）</span>        <span class="token comment" spellcheck="true">// isConcrete：!(是接口||是抽象类)，说白了就不是接口，也不是抽象类</span>        <span class="token comment" spellcheck="true">// 是抽象类，但是类里面有@Lookup注解修饰的方法，可以成为Bean</span>        <span class="token comment" spellcheck="true">// 总结：独立的；不是接口也不是抽象类；是抽象类，并且类内方法有@Lookup注解。三种情况是Bean</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isIndependent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isConcrete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> metadata<span class="token punctuation">.</span><span class="token function">hasAnnotatedMethods</span><span class="token punctuation">(</span>Lookup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Check the given candidate's bean name, determining whether the corresponding     * bean definition needs to be registered or conflicts with an existing definition.     * @param beanName the suggested name for the bean     * @param beanDefinition the corresponding bean definition     * @return {@code true} if the bean can be registered as-is;     * {@code false} if it should be skipped because there is an     * existing, compatible bean definition for the specified name     * @throws ConflictingBeanDefinitionException if an existing, incompatible     * bean definition has been found for the specified name     */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">checkCandidate</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> BeanDefinition beanDefinition<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalStateException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BeanDefinition existingDef <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanDefinition originatingDef <span class="token operator">=</span> existingDef<span class="token punctuation">.</span><span class="token function">getOriginatingBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>originatingDef <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            existingDef <span class="token operator">=</span> originatingDef<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 是否兼容，如果兼容返回false表示不会重新注册到Spring容器中，如果不冲突则会抛异常。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCompatible</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> existingDef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConflictingBeanDefinitionException</span><span class="token punctuation">(</span><span class="token string">"Annotation-specified bean name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                <span class="token string">"' for bean class ["</span> <span class="token operator">+</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] conflicts with existing, "</span> <span class="token operator">+</span>                <span class="token string">"non-compatible bean definition of same name and class ["</span> <span class="token operator">+</span> existingDef<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>思考：BeanDefinitionRegistry能不能用<font color="red">DefaultListableBeanFactory</font>替换？</strong></p><p>DefaultListableBeanFactory是BeanDefinitionRegistry的重要实现类，功能上可以替换但是没有必要。</p><p>这里扫描器主要的功能是：把扫描得到的BeanDefinition注册到Spring容器里面去，注册功能是BeanDefinitionRegistry这个接口提供的。DefaultListableBeanFactory确实有注册的功能，但是DefaultListableBeanFactory还有很多其他的功能，这里并不需要。单一职责</p><p>实际运行的时候registry属性的值就是DefaultListableBeanFactory对象</p><p>注意：有@Component注解不一定是一个Bean。如果还有@Conditional注解，就要看条件是否匹配，条件匹配了才是一个Bean，条件不匹配就不是一个Bean<font color="red">（@Conditional注解指定的类需要实现Condition接口，并且重写matches方法，matches方法返回true表示匹配，返回false不匹配）</font></p><p><strong>BeanDefinition的beanClass属性为什么是Object类型？而不是Class？</strong></p><p>扫描到<code>setBeanClassName</code>方法这里时，是通过ASM技术去解析这个类，并没有去加载这个类，只是把Bean的名字设置给BeanDefinition的beanClass属性。等真正的去加载这个Bean时，才会得到Class对象，再把这个对象赋值给beanClass属性。这里使用Object就是考虑到两种情况：最开始赋值的是Bean的名字，加载后赋值Class对象</p><p>补充：关于扫描的逻辑</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Scan the class path for candidate components. * @param basePackage the package to check for annotated classes * @return a corresponding Set of autodetected bean definitions */</span><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> <span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>String basePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>componentsIndex <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">indexSupportsIncludeFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">addCandidateComponentsFromIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>componentsIndex<span class="token punctuation">,</span> basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">scanCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 大部分情况是这一种</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中大部分情况是下面一种。上面这种的componentsIndex是为了提高扫描效率</p><p><img src="/images/spring/scan-1.png" alt="scan-1"></p><p>当配置了spring.components文件时，才会走上面的componentsIndex逻辑。</p><p>spring.components文件内容示例：<font color="red">（相当于告诉Spring要去扫描哪些Bean）</font></p><pre class=" language-java"><code class="language-java">com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component#com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>service<span class="token punctuation">.</span>OrderService<span class="token operator">=</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component</code></pre><p>注意：以上配置的类上面仍然需要添加@Component，不添加会报Bean找不到的异常</p><p>实例化非懒加载的单例Bean源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 遍历、合并、创建非懒加载单例Bean</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Pre-instantiating singletons in "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span>    <span class="token comment" spellcheck="true">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Trigger initialization of all non-lazy singleton beans...</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取合并后的BeanDefinition</span>        RootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 非懒加载的单例Bean，注意这里是抽象的BeanDefinition，和抽象类区分开</span>        <span class="token comment" spellcheck="true">// &lt;bean id='user' class='' abstract='true' scope='prototype'> 抽象的BeanDefinition</span>        <span class="token comment" spellcheck="true">// 抽象的BeanDefinition不能生成Bean，但是可以给其他Bean当父BeanDefinition</span>        <span class="token comment" spellcheck="true">// &lt;bean id='userService' class='' parent='user'></span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取FactoryBean对象</span>                Object bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        isEagerInit <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>                            <span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>isEagerInit<span class="token punctuation">,</span>                            <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        isEagerInit <span class="token operator">=</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span> <span class="token operator">&amp;&amp;</span>                                       <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isEagerInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 创建真正的Bean对象(getObject()返回的对象)</span>                        <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 创建Bean对象</span>                <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 所有的非懒加载单例Bean都创建完了后</span>    <span class="token comment" spellcheck="true">// Trigger post-initialization callback for all applicable beans...</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object singletonInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token keyword">instanceof</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            StartupStep smartInitialize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getApplicationStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.beans.smart-initialize"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"beanName"</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            SmartInitializingSingleton smartSingleton <span class="token operator">=</span> <span class="token punctuation">(</span>SmartInitializingSingleton<span class="token punctuation">)</span> singletonInstance<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            smartInitialize<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意：抽象的BeanDefinition和抽象类的区别。思考抽象的BeanDefinition有什么用？</p><p><strong>getMergedLocalBeanDefinition合并BeanDefinition是什么意思？</strong></p><p>这个方法非常重要，合并之后的BeanDefinition。合并属性等信息：自己定义了用自己的，自己没定义用父亲的</p><p>对于父子BeanDefinition，合并是生成一个新的BeanDefinition，原来的父子BeanDefinition不变，把合并后的属性添加给新的BeanDefinition。<font color="red">子BeanDefinition的属性覆盖父BeanDefinition的属性，这就是合并</font></p><p>合并后的BeanDefinition放在mergedBeanDefinitions里面，很重要</p><p><strong>afterSingletonsInstantiated方法什么时候调用的？</strong></p><p>所有的非懒加载单例Bean创建完之后，才会调用每个单例Bean的afterSingletonsInstantiated方法</p><p>isFactoryBean(beanName)方法，也很重要，很多地方有用到</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFactoryBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchBeanDefinitionException <span class="token punctuation">{</span>    String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object beanInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanInstance <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>beanInstance <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// No singleton instance found -> check bean definition.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No bean definition found in this factory -> delegate to parent.</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ConfigurableBeanFactory<span class="token punctuation">)</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Check whether the given bean is defined as a {@link FactoryBean}. * @param beanName the name of the bean * @param mbd the corresponding bean definition */</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isFactoryBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Boolean result <span class="token operator">=</span> mbd<span class="token punctuation">.</span>isFactoryBean<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据BeanDefinition推测Bean类型（获取BeanDefinition的beanClass属性）</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> <span class="token function">predictBeanType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> FactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是不是实现了FactoryBean接口</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> FactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mbd<span class="token punctuation">.</span>isFactoryBean <span class="token operator">=</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>学习内容：Spring根据BeanDefinition创建Bean</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据userService去获取Bean，如果不是UserService类型尝试去转换，不能转换就报错</p><p>Bean的别名：</p><pre class=" language-java"><code class="language-java">xml方式：userService2是别名<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> name<span class="token operator">=</span><span class="token string">"userService2"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.gax.service.UserService"</span><span class="token operator">></span>注解方式：userService1和userService2是别名<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"userService"</span><span class="token punctuation">,</span><span class="token string">"userService1"</span><span class="token punctuation">,</span><span class="token string">"userService2"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> UserService <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// map&lt;key,value>  &lt;userService1,userService></span><span class="token comment" spellcheck="true">// map&lt;key,value>  &lt;userService2,userService></span></code></pre><p>别名源码解析：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// name有可能是 &amp;xxx 或者 xxx，如果name是&amp;xxx，那么beanName就是xxx</span><span class="token comment" spellcheck="true">// name有可能传入进来的是别名，那么beanName就是id</span>String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Return the bean name, stripping out the factory dereference prefix if necessary, * and resolving aliases to canonical names. * @param name the user-specified name * @return the transformed bean name */</span><span class="token keyword">protected</span> String <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">canonicalName</span><span class="token punctuation">(</span>BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Determine the raw name, resolving aliases to canonical names. * @param name the user-specified name * @return the transformed name */</span><span class="token keyword">public</span> String <span class="token function">canonicalName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String canonicalName <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Handle aliasing...</span>    String resolvedName<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        resolvedName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aliasMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>canonicalName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            canonicalName <span class="token operator">=</span> resolvedName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>resolvedName <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> canonicalName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>canonicalName方法里使用do…while循环是考虑到，beanName=”userService1”，map&lt;”userService1”,”userService2”&gt;，其中userService2也是别名的情况，所以循环判断</p><p>Bean类型转换源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 检查通过name所获得到的beanInstance的类型是否是requiredType, requiredType是getBean指定的类型</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">adaptBeanInstance</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check if required type matches the type of the actual bean instance.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// SimpleTypeConverter</span>            Object convertedBean <span class="token operator">=</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>convertedBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不能转换，报错</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> convertedBean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Failed to convert bean '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"' to required type '"</span> <span class="token operator">+</span>                        ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>getBean关键源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Return an instance, which may be shared or independent, of the specified bean. * @param name the name of the bean to retrieve * @param requiredType the required type of the bean to retrieve * @param args arguments to use when creating a bean instance using explicit arguments * (only applied when creating a new instance as opposed to retrieving an existing one) * @param typeCheckOnly whether the instance is obtained for a type check, * not for actual use * @return an instance of the bean * @throws BeansException if the bean could not be created */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span>        String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// name有可能是 &amp;xxx 或者 xxx，如果name是&amp;xxx，那么beanName就是xxx</span>    <span class="token comment" spellcheck="true">// name有可能传入进来的是别名，那么beanName就是id</span>    String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object beanInstance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Eagerly check singleton cache for manually registered singletons.</span>    Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning eagerly cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                        <span class="token string">"' that is not fully initialized yet - a consequence of a circular reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果sharedInstance是FactoryBean，那么就调用getObject()返回对象</span>        beanInstance <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Fail if we're already creating this bean instance:</span>        <span class="token comment" spellcheck="true">// We're assumably within a circular reference.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Check if bean definition exists in this factory.</span>        BeanFactory parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Not found -> check parent.</span>            <span class="token comment" spellcheck="true">// &amp;&amp;&amp;&amp;xxx---->&amp;xxx</span>            String nameToLookup <span class="token operator">=</span> <span class="token function">originalBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span>                        nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> args<span class="token punctuation">,</span> typeCheckOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Delegation to parent with explicit args.</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// No args -> delegate to standard getBean method.</span>                <span class="token keyword">return</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        StartupStep beanCreation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationStartup<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"spring.beans.instantiate"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"beanName"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanCreation<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"beanType"</span><span class="token punctuation">,</span> requiredType<span class="token operator">:</span><span class="token operator">:</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            RootBeanDefinition mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 检查BeanDefinition是不是Abstract的，是Abstract抛出异常BeanIsAbstractException</span>            <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Guarantee initialization of beans that the current bean depends on.</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// dependsOn表示当前beanName所依赖的，当前Bean创建之前dependsOn所依赖的Bean必须已经创建好了</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// beanName是不是被dep依赖了，如果是则出现了循环依赖</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                                <span class="token string">"Circular depends-on relationship between '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// dep被beanName依赖了，存入dependentBeanMap中，dep为key，beanName为value</span>                    <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 创建所依赖的bean</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                                <span class="token string">"'"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' depends on missing bean '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Create bean instance.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Explicitly remove instance from singleton cache: It might have been put there</span>                        <span class="token comment" spellcheck="true">// eagerly by the creation process, to allow for circular reference resolution.</span>                        <span class="token comment" spellcheck="true">// Also remove any beans that received a temporary reference to the bean.</span>                        <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                beanInstance <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// It's a prototype -> create a new instance.</span>                Object prototypeInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                beanInstance <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 考虑到SpringMVC，request、application、session等作用域</span>                <span class="token comment" spellcheck="true">// 其实都用到缓存，getAttribute()、setAttribute()</span>                <span class="token comment" spellcheck="true">// 缓存有就直接返回，缓存没有就创建出来存到缓存里</span>                String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No scope name defined for bean ´"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No Scope registered for scope name '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// session.getAttriute(beaName)  setAttri</span>                    Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">finally</span> <span class="token punctuation">{</span>                            <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    beanInstance <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ScopeNotActiveException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> scopeName<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            beanCreation<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"exception"</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            beanCreation<span class="token punctuation">.</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            beanCreation<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查通过name所获得到的beanInstance的类型是否是requiredType</span>    <span class="token keyword">return</span> <span class="token function">adaptBeanInstance</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanInstance<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意：dependsOn导致的循环依赖解决不了，会报错。和创建Bean没有关系，只是判断注解</p><p>createBean源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Central method of this class: creates a bean instance, * populates the bean instance, applies post-processors, etc. * @see #doCreateBean */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    RootBeanDefinition mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Make sure bean class is actually resolved at this point, and</span>    <span class="token comment" spellcheck="true">// clone the bean definition in case of a dynamically resolved Class</span>    <span class="token comment" spellcheck="true">// which cannot be stored in the shared merged bean definition.</span>    <span class="token comment" spellcheck="true">// 马上就要实例化Bean了，确保beanClass被加载了</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mbdToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>        mbdToUse<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>resolvedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Prepare method overrides.</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                beanName<span class="token punctuation">,</span> <span class="token string">"Validation of method overrides failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span>        <span class="token comment" spellcheck="true">// 实例化前</span>        Object bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                <span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> <span class="token operator">|</span> ImplicitlyAppearedSingletonException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// A previously detected exception with proper bean creation context already,</span>        <span class="token comment" spellcheck="true">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Unexpected exception during bean creation"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Resolve the bean class for the specified bean definition, * resolving a bean class name into a Class reference (if necessary) * and storing the resolved Class in the bean definition for further use. * @param mbd the merged bean definition to determine the class for * @param beanName the name of the bean (for error handling purposes) * @param typesToMatch the types to match in case of internal type matching purposes * (also signals that the returned {@code Class} will never be exposed to application code) * @return the resolved bean class (or {@code null} if none) * @throws CannotLoadBeanClassException if we failed to load the class */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>RootBeanDefinition mbd<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> typesToMatch<span class="token punctuation">)</span>        <span class="token keyword">throws</span> CannotLoadBeanClassException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果beanClass被加载了，return (this.beanClass instanceof Class);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果beanClass没有被加载</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedExceptionAction<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">doResolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> typesToMatch<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">doResolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> typesToMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrivilegedActionException</span> pae<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassNotFoundException ex <span class="token operator">=</span> <span class="token punctuation">(</span>ClassNotFoundException<span class="token punctuation">)</span> pae<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotLoadBeanClassException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotLoadBeanClassException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LinkageError</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotLoadBeanClassException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">doResolveBeanClass</span><span class="token punctuation">(</span>RootBeanDefinition mbd<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> typesToMatch<span class="token punctuation">)</span>        <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>    ClassLoader beanClassLoader <span class="token operator">=</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ClassLoader dynamicLoader <span class="token operator">=</span> beanClassLoader<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> freshResolve <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>typesToMatch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// When just doing type checks (i.e. not creating an actual instance yet),</span>        <span class="token comment" spellcheck="true">// use the specified temporary class loader (e.g. in a weaving scenario).</span>        ClassLoader tempClassLoader <span class="token operator">=</span> <span class="token function">getTempClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempClassLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dynamicLoader <span class="token operator">=</span> tempClassLoader<span class="token punctuation">;</span>            freshResolve <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempClassLoader <span class="token keyword">instanceof</span> <span class="token class-name">DecoratingClassLoader</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                DecoratingClassLoader dcl <span class="token operator">=</span> <span class="token punctuation">(</span>DecoratingClassLoader<span class="token punctuation">)</span> tempClassLoader<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> typeToMatch <span class="token operator">:</span> typesToMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dcl<span class="token punctuation">.</span><span class="token function">excludeClass</span><span class="token punctuation">(</span>typeToMatch<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    String className <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>className <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析Spring表达式，有可能直接返回了一个Class对象</span>        Object evaluated <span class="token operator">=</span> <span class="token function">evaluateBeanDefinitionString</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>className<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>evaluated<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// A dynamically resolved expression, supported as of 4.2...</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>evaluated <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> evaluated<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>evaluated <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                className <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> evaluated<span class="token punctuation">;</span>                freshResolve <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Invalid class name expression result: "</span> <span class="token operator">+</span> evaluated<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>freshResolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// When resolving against a temporary class loader, exit early in order</span>            <span class="token comment" spellcheck="true">// to avoid storing the resolved Class in the bean definition.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> dynamicLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Could not load class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"] from "</span> <span class="token operator">+</span> dynamicLoader <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> dynamicLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Resolve regularly, caching the result in the BeanDefinition...</span>    <span class="token keyword">return</span> mbd<span class="token punctuation">.</span><span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Apply before-instantiation post-processors, resolving whether there is a * before-instantiation shortcut for the specified bean. * @param beanName the name of the bean * @param mbd the bean definition for the bean * @return the shortcut-determined bean instance, or {@code null} if none */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> Object <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object bean <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>beforeInstantiationResolved<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Make sure bean class is actually resolved at this point.</span>        <span class="token comment" spellcheck="true">// synthetic表示合成，如果某些Bean式合成的，那么则不会经过BeanPostProcessor的处理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetType <span class="token operator">=</span> <span class="token function">determineTargetType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInstantiation</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    bean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        mbd<span class="token punctuation">.</span>beforeInstantiationResolved <span class="token operator">=</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Apply InstantiationAwareBeanPostProcessors to the specified bean definition * (by class and name), invoking their {@code postProcessBeforeInstantiation} methods. * &lt;p>Any returned object will be used as the bean instead of actually instantiating * the target bean. A {@code null} return value from the post-processor will * result in the target bean being instantiated. * @param beanClass the class of the bean to be instantiated * @param beanName the name of the bean * @return the bean object to use instead of a default instance of the target bean, or {@code null} * @see InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation */</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> Object <span class="token function">applyBeanPostProcessorsBeforeInstantiation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>instantiationAware<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object result <span class="token operator">=</span> bp<span class="token punctuation">.</span><span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注意：返回的类型没判断，可以和参数beanClass类型不一样</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 有结果就返回，没有结果循环。实例化前取第一个</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>Object existingBean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    Object result <span class="token operator">=</span> existingBean<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor processor <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object current <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result <span class="token operator">=</span> current<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>doCreateBean源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Actually create the specified bean. Pre-creation processing has already happened * at this point, e.g. checking {@code postProcessBeforeInstantiation} callbacks. * &lt;p>Differentiates between default bean instantiation, use of a * factory method, and autowiring a constructor. * @param beanName the name of the bean * @param mbd the merged bean definition for the bean * @param args explicit arguments to use for constructor or factory method invocation * @return a new instance of the bean * @throws BeanCreationException if the bean could not be created * @see #instantiateBean * @see #instantiateUsingFactoryMethod * @see #autowireConstructor */</span><span class="token keyword">protected</span> Object <span class="token function">doCreateBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 实例化bean</span>    <span class="token comment" spellcheck="true">// Instantiate the bean.</span>    BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 有可能在本Bean创建之前，就有其他Bean把当前Bean给创建出来了（比如依赖注入过程中）</span>        instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Bean实例</span>        instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object bean <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> NullBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 后置处理合并后的BeanDefinition</span>    <span class="token comment" spellcheck="true">// Allow post-processors to modify the merged bean definition.</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>postProcessingLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span>postProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">applyMergedBeanDefinitionPostProcessors</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                        <span class="token string">"Post-processing of merged bean definition failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mbd<span class="token punctuation">.</span>postProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 为了解决循环依赖提前缓存单例创建工厂</span>    <span class="token comment" spellcheck="true">// Eagerly cache singletons to be able to resolve circular references</span>    <span class="token comment" spellcheck="true">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span>    <span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>            <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                    <span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 循环依赖-添加到三级缓存</span>        <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Initialize the bean instance.</span>    Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 属性填充</span>        <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化</span>        exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">BeanCreationException</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                    mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Initialization of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object earlySingletonReference <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonReference <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">==</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>                exposedObject <span class="token operator">=</span> earlySingletonReference<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowRawInjectionDespiteWrapping <span class="token operator">&amp;&amp;</span> <span class="token function">hasDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// beanName被哪些bean依赖了，现在发现beanName所对应的bean对象发生了改变，那么则会报错</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependentBeans <span class="token operator">=</span> <span class="token function">getDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                Set<span class="token operator">&lt;</span>String<span class="token operator">></span> actualDependentBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>dependentBeans<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String dependentBean <span class="token operator">:</span> dependentBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">removeSingletonIfCreatedForTypeCheckOnly</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        actualDependentBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>actualDependentBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                            <span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' has been injected into other beans ["</span> <span class="token operator">+</span>                            StringUtils<span class="token punctuation">.</span><span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span>actualDependentBeans<span class="token punctuation">)</span> <span class="token operator">+</span>                            <span class="token string">"] in its raw version as part of a circular reference, but has eventually been "</span> <span class="token operator">+</span>                            <span class="token string">"wrapped. This means that said other beans do not use the final version of the "</span> <span class="token operator">+</span>                            <span class="token string">"bean. This is often the result of over-eager type matching - consider using "</span> <span class="token operator">+</span>                            <span class="token string">"'getBeanNamesForType' with the 'allowEagerInit' flag turned off, for example."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Register bean as disposable.</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Invalid destruction signature"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Bean的销毁"><a href="#Bean的销毁" class="headerlink" title="Bean的销毁"></a>Bean的销毁</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractBeanFactory</span> <span class="token keyword">extends</span> <span class="token class-name">FactoryBeanRegistrySupport</span> <span class="token keyword">implements</span> <span class="token class-name">ConfigurableBeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Add the given bean to the list of disposable beans in this factory,     * registering its DisposableBean interface and/or the given destroy method     * to be called on factory shutdown (if applicable). Only applies to singletons.     * @param beanName the name of the bean     * @param bean the bean instance     * @param mbd the bean definition for the bean     * @see RootBeanDefinition#isSingleton     * @see RootBeanDefinition#getDependsOn     * @see #registerDisposableBean     * @see #registerDependentBean     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AccessControlContext acc <span class="token operator">=</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">requiresDestruction</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Register a DisposableBean implementation that performs all destruction</span>                <span class="token comment" spellcheck="true">// work for the given bean: DestructionAwareBeanPostProcessors,</span>                <span class="token comment" spellcheck="true">// DisposableBean interface, custom destroy method.</span>                <span class="token comment" spellcheck="true">// 销毁的Bean就是这里存进Map中的</span>                <span class="token function">registerDisposableBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DisposableBeanAdapter</span><span class="token punctuation">(</span>                        bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> <span class="token function">getBeanPostProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>destructionAware<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// A bean with a custom scope...</span>                Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No Scope registered for scope name '"</span> <span class="token operator">+</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                scope<span class="token punctuation">.</span><span class="token function">registerDestructionCallback</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DisposableBeanAdapter</span><span class="token punctuation">(</span>                        bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> <span class="token function">getBeanPostProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>destructionAware<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Determine whether the given bean requires destruction on shutdown.     * &lt;p>The default implementation checks the DisposableBean interface as well as     * a specified destroy method and registered DestructionAwareBeanPostProcessors.     * @param bean the bean instance to check     * @param mbd the corresponding bean definition     * @see org.springframework.beans.factory.DisposableBean     * @see AbstractBeanDefinition#getDestroyMethodName()     * @see org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor     */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">requiresDestruction</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 有没有销毁方法，有没有指定销毁方法</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> NullBean<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>DisposableBeanAdapter<span class="token punctuation">.</span><span class="token function">hasDestroyMethod</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span><span class="token function">hasDestructionAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> DisposableBeanAdapter<span class="token punctuation">.</span><span class="token function">hasApplicableProcessors</span><span class="token punctuation">(</span>                        bean<span class="token punctuation">,</span> <span class="token function">getBeanPostProcessorCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>destructionAware<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DisposableBeanAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span><span class="token punctuation">,</span> Runnable<span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Check whether the given bean has any kind of destroy method to call.     * @param bean the bean instance     * @param beanDefinition the corresponding bean definition     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">hasDestroyMethod</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> RootBeanDefinition beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现接口DisposableBean或者AutoCloseable，有销毁的方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">DisposableBean</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">AutoCloseable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">inferDestroyMethodIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * If the current value of the given beanDefinition's "destroyMethodName" property is     * {@link AbstractBeanDefinition#INFER_METHOD}, then attempt to infer a destroy method.     * Candidate methods are currently limited to public, no-arg methods named "close" or     * "shutdown" (whether declared locally or inherited). The given BeanDefinition's     * "destroyMethodName" is updated to be null if no such method is found, otherwise set     * to the name of the inferred method. This constant serves as the default for the     * {@code @Bean#destroyMethod} attribute and the value of the constant may also be     * used in XML within the {@code &lt;bean destroy-method="">} or {@code     * &lt;beans default-destroy-method="">} attributes.     * &lt;p>Also processes the {@link java.io.Closeable} and {@link java.lang.AutoCloseable}     * interfaces, reflectively calling the "close" method on implementing beans as well.     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">inferDestroyMethodIfNecessary</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> RootBeanDefinition beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String destroyMethodName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span>resolvedDestroyMethodName<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>destroyMethodName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            destroyMethodName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getDestroyMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// INFER_METHOD = "(inferred)"; 特定情况使用类内部的close和shntdown方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">.</span>INFER_METHOD<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span> <span class="token operator">||</span>                    <span class="token punctuation">(</span>destroyMethodName <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">AutoCloseable</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Only perform destroy method inference or Closeable detection</span>                <span class="token comment" spellcheck="true">// in case of the bean not explicitly implementing DisposableBean</span>                destroyMethodName <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">DisposableBean</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        destroyMethodName <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>CLOSE_METHOD_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            destroyMethodName <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>SHUTDOWN_METHOD_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// no candidate destroy method found</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            beanDefinition<span class="token punctuation">.</span>resolvedDestroyMethodName <span class="token operator">=</span> <span class="token punctuation">(</span>destroyMethodName <span class="token operator">!=</span> null <span class="token operator">?</span> destroyMethodName <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span> <span class="token operator">?</span> destroyMethodName <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Check whether the given bean has destruction-aware post-processors applying to it.     * @param bean the bean instance     * @param postProcessors the post-processor candidates     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">hasApplicableProcessors</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>DestructionAwareBeanPostProcessor<span class="token operator">></span> postProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>postProcessors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>DestructionAwareBeanPostProcessor processor <span class="token operator">:</span> postProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>processor<span class="token punctuation">.</span><span class="token function">requiresDestruction</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行销毁的逻辑：</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方案一: 注册关闭钩子，进程正常关闭的时候会去调用销毁方法</span>applicationContext<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方案二: 调用容器的close方法</span>applicationContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Register a shutdown hook {@linkplain Thread#getName() named} * {@code SpringContextShutdownHook} with the JVM runtime, closing this * context on JVM shutdown unless it has already been closed at that time. * &lt;p>Delegates to {@code doClose()} for the actual closing procedure. * @see Runtime#addShutdownHook * @see ConfigurableApplicationContext#SHUTDOWN_HOOK_THREAD_NAME * @see #doClose() */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shutdownHook <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// No shutdown hook registered yet.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>shutdownHook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>SHUTDOWN_HOOK_THREAD_NAME<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">doClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shutdownHook<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Actually performs context closing: publishes a ContextClosedEvent and * destroys the singletons in the bean factory of this application context. * &lt;p>Called by both {@code close()} and a JVM shutdown hook, if any. * @see org.springframework.context.event.ContextClosedEvent * @see #destroyBeans() * @see #close() * @see #registerShutdownHook() */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check whether an actual close attempt is necessary...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Closing "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>NativeDetector<span class="token punctuation">.</span><span class="token function">inNativeImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LiveBeansView<span class="token punctuation">.</span><span class="token function">unregisterApplicationContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Publish shutdown event.</span>            <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextClosedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception thrown from ApplicationListener handling ContextClosedEvent"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Stop all Lifecycle beans, to avoid delays during individual destruction.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lifecycleProcessor<span class="token punctuation">.</span><span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception thrown from LifecycleProcessor on context close"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Destroy all cached singletons in the context's BeanFactory.</span>        <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Close the state of this context itself.</span>        <span class="token function">closeBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Let subclasses do some final clean-up if they wish...</span>        <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Reset local application listeners to pre-refresh state.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>applicationListeners<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationListeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Switch to inactive.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义销毁逻辑：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方案一: 注册钩子或关闭容器执行销毁逻辑</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方案二: 注册钩子或关闭容器执行销毁逻辑</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方案三: 注册钩子或关闭容器执行销毁逻辑</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GaxBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">MergedBeanDefinitionPostProcessor</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessMergedBeanDefinition</span><span class="token punctuation">(</span>RootBeanDefinition beanDefinition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 指定销毁方法的名字，固定字符串</span>            beanDefinition<span class="token punctuation">.</span><span class="token function">setDestroyMethodName</span><span class="token punctuation">(</span><span class="token string">"(inferred)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 有close方法就执行close销毁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没有close方法，再执行shutdown销毁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>流程简述：</p><p><strong>生成BeanDefinition</strong></p><p><strong>合并BeanDefinition</strong></p><p><strong>加载类</strong></p><p><strong>实例化前</strong></p><p><strong>实例化</strong></p><p>Supplier创建对象</p><p>工厂方法创建对象</p><p><strong>推断构造方法</strong></p><p><strong>BeanDefinition的后置处理</strong></p><p><strong>实例化后</strong></p><p><strong>自动注入</strong></p><p><strong>处理属性</strong></p><p><strong>执行Aware</strong></p><p><strong>初始化前</strong></p><p><strong>初始化</strong></p><p><strong>初始化后</strong></p><h3 id="总结BeanPostProcessor"><a href="#总结BeanPostProcessor" class="headerlink" title="总结BeanPostProcessor"></a>总结BeanPostProcessor</h3><p>1、InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation()</p><p>2、实例化</p><p>3、MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition()</p><p>4、InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation()</p><p>5、自动注入</p><p>6、<font color="red">InstantiationAwareBeanPostProcessor.postProcessProperties()</font></p><p>7、Aware对象</p><p>8、BeanPostProcessor.postProcessBeforeInitialization()</p><p>9、初始化</p><p>10、BeanPostProcessor.postProcessAfterInitialization()</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-底层架构核心概念</title>
      <link href="/posts/spring-family/3/"/>
      <url>/posts/spring-family/3/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring底层核心组件"><a href="#Spring底层核心组件" class="headerlink" title="Spring底层核心组件"></a>Spring底层核心组件</h2><h3 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h3><p>BeanDefinition表示Bean定义，有很多属性用来描述Bean的特点： </p><ul><li>class，表示Bean类型 </li><li>scope，表示Bean作用域，单例或原型等 </li><li>lazyInit：表示Bean是否是懒加载 </li><li>initMethodName：表示Bean初始化时要执行的方法 </li><li>destroyMethodName：表示Bean销毁时要执行的方法 </li><li>还有很多…</li></ul><span id="more"></span><p>定义Bean的方式主要分为两种：</p><ul><li><p>申明式定义</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、<span class="token operator">&lt;</span>bean<span class="token operator">/</span><span class="token operator">></span><span class="token number">2</span>、<span class="token annotation punctuation">@Bean</span><span class="token number">3</span>、<span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">,</span><span class="token annotation punctuation">@Controller</span><span class="token punctuation">)</span></code></pre></li><li><p>编程式定义</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生成一个BeanDefinition对象，并设置beanClass为User.class，并注册到ApplicationContext中</span>AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置作用域</span>beanDefinition<span class="token punctuation">.</span><span class="token function">setInitMethodName</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置初始化方法</span>beanDefinition<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置懒加载</span>context<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="BeanDefinitionReader"><a href="#BeanDefinitionReader" class="headerlink" title="BeanDefinitionReader"></a>BeanDefinitionReader</h3><p>BeanDefinition读取器，虽然开发中用的很少，但是源码中用得很多</p><h4 id="AnnotatedBeanDefinitionReader"><a href="#AnnotatedBeanDefinitionReader" class="headerlink" title="AnnotatedBeanDefinitionReader"></a>AnnotatedBeanDefinitionReader</h4><p>把某个类转换为BeanDefinition，并且解析类上的注解</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span><span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AnnotatedBeanDefinitionReader annotatedBeanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将User.class解析为BeanDefinition</span>annotatedBeanDefinitionReader<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以解析的注解：@Conditional、 <strong>@Scope</strong> 、@Lazy、@Primary、@DependsOn、 @Role、@Description</p><h4 id="XmlBeanDefinitionReader"><a href="#XmlBeanDefinitionReader" class="headerlink" title="XmlBeanDefinitionReader"></a>XmlBeanDefinitionReader</h4><p>解析<code>&lt;bean/&gt;</code>标签</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>XmlBeanDefinitionReader xmlBeanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> xmlBeanDefinitionReader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token string">"spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="ClassPathBeanDefinitionScanner"><a href="#ClassPathBeanDefinitionScanner" class="headerlink" title="ClassPathBeanDefinitionScanner"></a>ClassPathBeanDefinitionScanner</h3><p>扫描器，可以进行扫描，扫描某个包路径，对扫描到的类进行解析</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ClassPathBeanDefinitionScanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"com.gax"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>Bean<strong>工厂</strong>，负责创建Bean，并且提供获取Bean的 API</p><p>ApplicationContext就是BeanFactory的一种</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">EnvironmentCapable</span><span class="token punctuation">,</span> ListableBeanFactory<span class="token punctuation">,</span>HierarchicalBeanFactory<span class="token punctuation">,</span>MessageSource<span class="token punctuation">,</span> ApplicationEventPublisher<span class="token punctuation">,</span> ResourcePatternResolver <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>HierarchicalBeanFactory<span class="token operator">:</span> 支持父子Bean工厂，子Bean工厂获取不到时，可以到父Bean工厂去获取ListableBeanFactory<span class="token operator">:</span> 展示Bean的名字、展示Bean的数量、统计的信息、拿某一个类型的Bean，类似列表的功能EnvironmentCapable<span class="token operator">:</span> 获取环境变量的功能ApplicationEventPublisher<span class="token operator">:</span> 事件发布的功能MessageSource<span class="token operator">:</span> 国际化的功能ResourcePatternResolver<span class="token operator">:</span> 获取某些资源、解析某些资源的功能</code></pre><p>Spring源码中，BeanFactory接口非常重要的实现类： <font color="red">DefaultListableBeanFactory</font></p><p>ApplicationContext.getBean() 调用的就是 DefaultListableBeanFactory 的getBean()方法</p><p>DefaultListableBeanFactory 可以单独使用：</p><pre class=" language-java"><code class="language-java">DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AbstractBeanDefinition beanDefinition <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>ApplicationContext是个接口，实际上也是一个BeanFactory，不过比BeanFactory 更加强大：</p><p>1、HierarchicalBeanFactory：拥有获取父BeanFactory的功能</p><p>2、ListableBeanFactory：拥有获取beanNames的功能</p><p>3、ResourcePatternResolver：资源加载器，可以一次性获取多个资源（文件资源等等）</p><p>4、EnvironmentCapable：可以获取运行时环境（没有设置运行时环境功能）</p><p>5、ApplicationEventPublisher：拥有广播事件的功能（没有添加事件监听器的功能）</p><p>6、MessageSource：拥有国际化功能</p><p>ApplicationContext两个重要的实现类：</p><p>1、AnnotationConfigApplicationContext</p><p>2、ClassPathXmlApplicationContext</p><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>定义一个MessageSource</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> MessageSource <span class="token function">messageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ResourceBundleMessageSource messageSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceBundleMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageSource<span class="token punctuation">.</span><span class="token function">setBasename</span><span class="token punctuation">(</span><span class="token string">"messages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> messageSource<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ApplicationContext拥有国际化的功能，可以直接用</p><pre class=" language-java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span><span class="token string">"en_CN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h3><p>可以利用ApplicationContext获取某个文件的内容</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Resource resource <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"file://D:\\UserService.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Resource resource1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource1<span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource1<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Resource resource2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"classpath:spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource2<span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource2<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath:com/gax/*.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="获取运行时环境"><a href="#获取运行时环境" class="headerlink" title="获取运行时环境"></a>获取运行时环境</h3><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> systemEnvironment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemEnvironment<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作系统层面的环境变量</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> systemProperties <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemProperties<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//运行java通过-D指定的环境变量</span>MutablePropertySources propertySources <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>propertySources<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最强大的，包含上面两种和PropertySources注解的变量</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"NO_PROXY"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//操作系统</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"sun.jnu.encoding"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//jvm -D指定</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"gax"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//property里面的</span></code></pre><h3 id="事件发布"><a href="#事件发布" class="headerlink" title="事件发布"></a>事件发布</h3><p>定义一个事件监听器</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ApplicationListener <span class="token function">applicationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ApplicationEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到了一个事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发布一个事件</p><pre class=" language-java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token string">"yeah"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h3><p>Spring提供了一些方便类型转化的技术</p><h4 id="PropertyEditor"><a href="#PropertyEditor" class="headerlink" title="PropertyEditor"></a>PropertyEditor</h4><p><font color="red">JDK中提供的</font>类型转化工具类，使用示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToUserPropertyEditor</span> <span class="token keyword">extends</span> <span class="token class-name">PropertyEditorSupport</span> <span class="token keyword">implements</span> <span class="token class-name">PropertyEditor</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAsText</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalArgumentException    <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 单独使用示例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        StringToUserPropertyEditor propertyEditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringToUserPropertyEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                propertyEditor<span class="token punctuation">.</span><span class="token function">setAsText</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User value <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span>propertyEditor<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>service<span class="token punctuation">.</span>User<span class="token annotation punctuation">@5a07e868</span><span class="token number">11</span></code></pre><p>向Spring中注册PropertyEditor：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> CustomEditorConfigurer <span class="token function">customEditorConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CustomEditorConfigurer customEditorConfigurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEditorConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">PropertyEditor</span><span class="token operator">>></span> propertyEditorMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// StringToUserPropertyEditor可以将String转化成User类型，</span>    <span class="token comment" spellcheck="true">// 在Spring源码中，如果当前对象是String，而需要的类型是User，就会用该PropertyEditor做类型转化</span>    propertyEditorMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> StringToUserPropertyEditor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    customEditorConfigurer<span class="token punctuation">.</span><span class="token function">setCustomEditors</span><span class="token punctuation">(</span>propertyEditorMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> customEditorConfigurer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 示例代码</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"ccc"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里需要类型转换</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个Spring容器</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：（输出的是一个User，转换成功）com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>service<span class="token punctuation">.</span>User<span class="token annotation punctuation">@17ed40e0</span></code></pre><h4 id="ConversionService"><a href="#ConversionService" class="headerlink" title="ConversionService"></a>ConversionService</h4><p><font color="red">Spring中提供的</font>类型转化服务，它比PropertyEditor更强大</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToUserConverter</span> <span class="token keyword">implements</span> <span class="token class-name">ConditionalGenericConverter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>TypeDescriptor sourceType<span class="token punctuation">,</span> TypeDescriptor targetType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> sourceType<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> targetType<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>GenericConverter<span class="token punctuation">.</span>ConvertiblePair<span class="token operator">></span> <span class="token function">getConvertibleTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericConverter<span class="token punctuation">.</span>ConvertiblePair</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">convert</span><span class="token punctuation">(</span>Object source<span class="token punctuation">,</span> TypeDescriptor sourceType<span class="token punctuation">,</span> TypeDescriptor targetType<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 单独使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        DefaultConversionService conversionService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conversionService<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringToUserConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User value <span class="token operator">=</span> conversionService<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>向Spring中注册ConversionService：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ConversionServiceFactoryBean <span class="token function">conversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ConversionServiceFactoryBean conversionServiceFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConversionServiceFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conversionServiceFactoryBean<span class="token punctuation">.</span><span class="token function">setConverters</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringToUserConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> conversionServiceFactoryBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="TypeConverter"><a href="#TypeConverter" class="headerlink" title="TypeConverter"></a>TypeConverter</h4><p>Spring提供更高级的转换类SimpleTypeConverter，可以支持上面两种</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        SimpleTypeConverter typeConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        typeConverter<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringToUserPropertyEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DefaultConversionService conversionService = new DefaultConversionService();</span><span class="token comment" spellcheck="true">//conversionService.addConverter(new StringToUserConverter());</span><span class="token comment" spellcheck="true">//typeConverter.setConversionService(conversionService);</span>        User value <span class="token operator">=</span> typeConverter<span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>扩展：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// getBean指定类型转换</span>AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserService userService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以对应到Spring源码：AbstractBeanFactory#adaptBeanInstance</span><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">adaptBeanInstance</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> requiredType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Check if required type matches the type of the actual bean instance.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// SimpleTypeConverter</span>            Object convertedBean <span class="token operator">=</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>convertedBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 已经转换过了返回，没转换报错</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> convertedBean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Failed to convert bean '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"' to required type '"</span> <span class="token operator">+</span>                        ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="OrderComparator"><a href="#OrderComparator" class="headerlink" title="OrderComparator"></a>OrderComparator</h3><p>Spring所提供的一种比较器，有@Order注解、实现Ordered接口两种使用方式，通过指定的值进行比较或排序。</p><p>实现Ordered接口示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Ordered</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Ordered</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// order=3</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// order=2</span>        OrderComparator comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 (a>b,a&lt;b时返回-1)</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按order值升序排序</span>        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// B，A</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token number">1</span><span class="token punctuation">[</span>B<span class="token punctuation">,</span> A<span class="token punctuation">]</span></code></pre><p>Spring还提供了一个OrderComparator的子类： <strong>AnnotationAwareOrderComparator</strong>，它支持用@Order来指定order值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// order=3</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// order=2</span>        AnnotationAwareOrderComparator comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>        List list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 按order值升序排序</span>        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// B，A</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：<span class="token number">1</span><span class="token punctuation">[</span>B<span class="token punctuation">,</span> A<span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 关键源码：AnnotationAwareOrderComparator#findOrder</span><span class="token keyword">protected</span> Integer <span class="token function">findOrder</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先获取Ordered接口中getOrder()方法返回的数值</span>    Integer order <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findOrder</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果没有实现Ordered接口，则获取@Order注解中指定的值</span>    <span class="token keyword">return</span> <span class="token function">findOrderFromAnnotation</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p>BeanPostProcess表示Bean的后置处理器，可以定义一个或多个BeanPostProcessor</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GaxBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>BeanPostProcessor可以在<strong>任意一个Bean的初始化之前</strong>以及<strong>初始化之后</strong>去额外的做一些用户自定义的逻辑，当然还可以通过判断beanName来进行针对性处理（针对某个Bean，或某部分Bean）。 </p><p>我们可以通过定义BeanPostProcessor来干涉Spring创建Bean的过程</p><h3 id="BeanFactoryPostProcessor"><a href="#BeanFactoryPostProcessor" class="headerlink" title="BeanFactoryPostProcessor"></a>BeanFactoryPostProcessor</h3><p>Bean工厂的后置处理器，和BeanPostProcessor类似。</p><p>BeanPostProcessor是干涉Bean的创建过程，BeanFactoryPostProcessor是干涉BeanFactory的创建过程。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GaxBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加工beanFactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>上面提到，可以通过BeanPostPorcessor来干涉Spring创建Bean的过程。但是如果我们想一个Bean完完全全由我们来创造，也是可以的，比如通过FactoryBean：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GaxFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个Spring容器</span>        AnnotationConfigApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object gaxFactoryBean <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"gaxFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object gaxFactoryBean2 <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"&amp;gaxFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object gaxFactoryBean3 <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"&amp;&amp;&amp;&amp;&amp;&amp;gaxFactoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gaxFactoryBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gaxFactoryBean2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gaxFactoryBean3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token annotation punctuation">@6e3c1e69</span>com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>GaxFactoryBean<span class="token annotation punctuation">@5f150435</span>com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>GaxFactoryBean<span class="token annotation punctuation">@5f150435</span></code></pre><p>注意：通过这种方式创造出来的UserService的Bean，<strong>只会经过初始化后</strong>，其他Spring的生命周期步骤是不会经过的，比如依赖注入。</p><p><strong>通过@Bean也可以生成一个对象作为Bean，那么和FactoryBean的区别是什么呢？</strong></p><p>其实在很多场景下他俩是可以替换的，但是站在原理层面来说的，区别很明显，@Bean定义的Bean是会经过完整的Bean生命周期的。</p><h3 id="ExcludeFilter和IncludeFilter"><a href="#ExcludeFilter和IncludeFilter" class="headerlink" title="ExcludeFilter和IncludeFilter"></a>ExcludeFilter和IncludeFilter</h3><p>ExcludeFilter表示<strong>排除过滤器</strong>，IncludeFilter表示<strong>包含过滤器</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 扫描com.gax这个包下面的所有类，但是排除UserService类</span><span class="token comment" spellcheck="true">// 也就是就算类上面有@Component注解也不会成为Bean</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.gax"</span><span class="token punctuation">,</span> excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>ASSIGNABLE_TYPE<span class="token punctuation">,</span> classes <span class="token operator">=</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 就算UserService类上没有@Component注解，也会被扫描成为一个Bean</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"com.gax"</span><span class="token punctuation">,</span> includeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>ASSIGNABLE_TYPE<span class="token punctuation">,</span> classes <span class="token operator">=</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>FilterType分为：</p><p>1、ANNOTATION：是否包含某个注解</p><p>2、ASSIGNABLE_TYPE：是否是某个类</p><p>3、ASPECTJ：是否符合某个Aspectj表达式</p><p>4、REGEX：是否符合某个正则表达式</p><p>5、CUSTOM：自定义</p><p><strong>Spring内部怎么支持@Component注解扫描的？</strong></p><p>在Spring的扫描逻辑中，默认会添加一个AnnotationTypeFilter给includeFilters，表示默认情况下 Spring扫描过程中会认为类上有@Component注解的就是Bean。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ClassPathScanningCandidateComponentProvider#registerDefaultFilters</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerDefaultFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注册@Component对应的AnnotationTypeFilter</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>includeFilters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><h3 id="MetadataReader、ClassMetadata、-AnnotationMetadata"><a href="#MetadataReader、ClassMetadata、-AnnotationMetadata" class="headerlink" title="MetadataReader、ClassMetadata、 AnnotationMetadata"></a>MetadataReader、ClassMetadata、 AnnotationMetadata</h3><p>在Spring中需要去解析类的信息，比如类名、类中的方法、类上的注解，这些都可以称之为类的元数 据，所以Spring中对类的元数据做了抽象，并提供了一些工具类。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MetadataReader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Return the resource reference for the class file.     */</span>    Resource <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Read basic class metadata for the underlying class.     */</span>    ClassMetadata <span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Read full annotation metadata for the underlying class,     * including metadata for annotated methods.     */</span>    AnnotationMetadata <span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 类的元数据</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClassMetadata</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Return the name of the underlying class.     */</span>    String <span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Return whether the underlying class represents an interface.     */</span>    <span class="token keyword">boolean</span> <span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Return whether the underlying class represents an annotation.     * @since 4.1     */</span>    <span class="token keyword">boolean</span> <span class="token function">isAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Return whether the underlying class is marked as abstract.     */</span>    <span class="token keyword">boolean</span> <span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Return whether the underlying class represents a concrete class,     * i.e. neither an interface nor an abstract class.     */</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isConcrete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注解元数据</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AnnotationMetadata</span> <span class="token keyword">extends</span> <span class="token class-name">ClassMetadata</span><span class="token punctuation">,</span> AnnotatedTypeMetadata <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Get the fully qualified class names of all annotation types that     * are &lt;em>present&lt;/em> on the underlying class.     * @return the annotation type names     */</span>    <span class="token keyword">default</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>MergedAnnotation<span class="token operator">:</span><span class="token operator">:</span>isDirectlyPresent<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>annotation <span class="token operator">-</span><span class="token operator">></span> annotation<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>LinkedHashSet<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * Determine whether an annotation of the given type is &lt;em>present&lt;/em> on     * the underlying class.     * @param annotationName the fully qualified class name of the annotation     * type to look for     * @return {@code true} if a matching annotation is present     */</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">hasAnnotation</span><span class="token punctuation">(</span>String annotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDirectlyPresent</span><span class="token punctuation">(</span>annotationName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 可以判断类下面有没有指定注解，比如说判断一个类下面有没有@Bean修饰的方法     * Determine whether the underlying class has an annotation that is itself     * annotated with the meta-annotation of the given type.     * @param metaAnnotationName the fully qualified class name of the     * meta-annotation type to look for     * @return {@code true} if a matching meta-annotation is present     */</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">hasMetaAnnotation</span><span class="token punctuation">(</span>String metaAnnotationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>metaAnnotationName<span class="token punctuation">,</span>                MergedAnnotation<span class="token operator">:</span><span class="token operator">:</span>isMetaPresent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>MetadataReader表示类的元数据读取器，默认实现类为<strong>SimpleMetadataReader</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException    <span class="token punctuation">{</span>        SimpleMetadataReaderFactory simpleMetadataReaderFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造一个MetadataReader</span>        MetadataReader metadataReader <span class="token operator">=</span> simpleMetadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span><span class="token string">"com.gax.service.UserService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到一个ClassMetadata，并获取了类名</span>        ClassMetadata classMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取一个AnnotationMetadata，并获取类上的注解信息</span>        AnnotationMetadata annotationMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String annotationType <span class="token operator">:</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>输出：com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserServiceorg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component</code></pre><p>注意：SimpleMetadataReader去解析类时，使用的ASM技术。 </p><p><font color="red">ASM简述：把类当成普通文件，通过字节流读出来，如果符合字节码规范，就根据字节码的格式获取类的信息</font></p><p><strong>为什么要使用ASM技术？</strong></p><p>Spring启动的时候需要去扫描，如果指定的包路径比较宽泛，那么扫描的类是非常多的，那如果在Spring启动时就把这些类全部加载进JVM了，这样不太好，所以使用了 ASM技术</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-手写模拟Spring底层原理</title>
      <link href="/posts/spring-family/2/"/>
      <url>/posts/spring-family/2/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>模拟大致的底层原理，为学习Spring源码做铺垫。</p><p>实现的功能：扫描路径、依赖注入、aware回调、初始化前、初始化、初始化后、切面</p><p>未实现的功能：构造器推断、循环依赖</p><p><font color="red">重点：BeanDefinition、BeanPostProcessor</font></p><p>学习Spring源码的重点：设计模式、编码规范、<font color="red">设计思想、扩展点</font></p><span id="more"></span><p>启动类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Yeah</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        GaxApplicationContext gaxApplicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GaxApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserInterface userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserInterface<span class="token punctuation">)</span> gaxApplicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>关键方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GaxApplicationContext</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Class <span class="token class-name">configClass</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SINGLETON <span class="token operator">=</span> <span class="token string">"singleton"</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Spring源码用的是LinkedList</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>BeanPostProcessor<span class="token operator">></span> beanPostProcessorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">GaxApplicationContext</span><span class="token punctuation">(</span>Class <span class="token class-name">configClass</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>configClass <span class="token operator">=</span> configClass<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 扫描指定路径，找到所有@Component注解的类，封装成beanDefinition保存再Map中</span>        <span class="token function">scan</span><span class="token punctuation">(</span>configClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 思考个问题：beanDefinitionMap.keySet()和beanDefinitionMap.entrySet()两种遍历的区别？选用哪个好？</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span> entry <span class="token operator">:</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            String beanName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BeanDefinition beanDefinition <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>SINGLETON<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Object bean <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> BeanDefinition beanDefinition<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object instance <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 直接使用默认的无参构造器，多个构造器的场景未实现</span>            instance <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 属性填充，依赖注入</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Autowired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token function">getBean</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// aware回调</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>BeanNameAware<span class="token punctuation">)</span>instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 初始化前</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor beanPostProcessor <span class="token operator">:</span> beanPostProcessorList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                instance <span class="token operator">=</span> beanPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 初始化</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>InitializingBean<span class="token punctuation">)</span>instance<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 初始化后</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor beanPostProcessor <span class="token operator">:</span> beanPostProcessorList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                instance <span class="token operator">=</span> beanPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> <span class="token operator">|</span> NoSuchMethodException <span class="token operator">|</span> IllegalAccessException <span class="token operator">|</span> InvocationTargetException e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                BeanDefinition beanDefinition <span class="token operator">=</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SINGLETON<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Object singletonBean <span class="token operator">=</span> singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> singletonBean<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                singletonBean <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonBean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> singletonBean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 原型Bean</span>            Object prototypeBean <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> prototypeBean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scan</span><span class="token punctuation">(</span>Class <span class="token class-name">configClass</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>ComponentScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ComponentScan componentScanAnnotation <span class="token operator">=</span> <span class="token punctuation">(</span>ComponentScan<span class="token punctuation">)</span>configClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>ComponentScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> componentScanAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// path = com/gax/service</span>            path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        ClassLoader classLoader <span class="token operator">=</span> GaxApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            URL resource <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">assert</span> resource <span class="token operator">!=</span> null<span class="token punctuation">;</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>File f <span class="token operator">:</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    String absolutePath <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    absolutePath <span class="token operator">=</span> absolutePath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>absolutePath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> absolutePath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 类加载器入参需要的格式：com.gax.service.XXX</span>                    absolutePath <span class="token operator">=</span> absolutePath<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">try</span>                    <span class="token punctuation">{</span>                        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>absolutePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                BeanPostProcessor instance <span class="token operator">=</span> <span class="token punctuation">(</span>BeanPostProcessor<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                beanPostProcessorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                                                        Component componentAnnotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            String beanName <span class="token operator">=</span> componentAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 默认beanName</span>                                beanName <span class="token operator">=</span> Introspector<span class="token punctuation">.</span><span class="token function">decapitalize</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                                                        BeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            beanDefinition<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Scope<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                Scope scopeAnnotation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Scope<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                String value <span class="token operator">=</span> scopeAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span>                            <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 默认单例Bean</span>                                beanDefinition<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>SINGLETON<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> NoSuchMethodException <span class="token operator">|</span> InvocationTargetException                        <span class="token operator">|</span> InstantiationException <span class="token operator">|</span> IllegalAccessException e<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>gitee地址：</p><pre class=" language-java"><code class="language-java">git clone https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>gitee<span class="token punctuation">.</span>com<span class="token operator">/</span>seek6174<span class="token operator">/</span>spring<span class="token operator">-</span>seek<span class="token punctuation">.</span>git</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Bean的生命周期概述</title>
      <link href="/posts/spring-family/1/"/>
      <url>/posts/spring-family/1/</url>
      
        <content type="html"><![CDATA[<h2 id="Bean的生命周期概述"><a href="#Bean的生命周期概述" class="headerlink" title="Bean的生命周期概述"></a>Bean的生命周期概述</h2><p>入门使用的Spring代码：</p><pre class=" language-java"><code class="language-java">ClassPathXmlApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>思考问题：</p><p>1、第一行代码都做了哪些事情？</p><p>2、第二行代码<code>getBean()</code>如何实现的？返回的<code>UserService</code>对象和new创建的对象有什么区别？</p><span id="more"></span><p>在新版的<code>Spring MVC</code>和<code>Spring Boot</code>的底层主要用的都是<code>AnnotationConfigApplicationContext</code>：</p><pre class=" language-java"><code class="language-java">AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserService userService <span class="token operator">=</span> <span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>userService<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：<code>AppConfig.class</code>和<code>spring.xml</code>的本质是一样的，都表示Spring的配置，类比两种写法：</p><pre class=" language-java"><code class="language-java">spring<span class="token punctuation">.</span>xml中的内容为：<span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.gax"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.gax.service.UserService"</span><span class="token operator">/</span><span class="token operator">></span>    AppConfig中的内容为：<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.gax"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserService <span class="token function">userService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>目前<code>spring.xml</code>这种方式已经很少见了；更多的是使用<code>Spring MVC</code>或者<code>Spring Boot</code>，这两种也是基于<code>spring.xml</code>这种方式，在内部创建一个<code>ApplicationContext</code>，但是也有区别：</p><p>1、<code>Spring MVC</code>创建的是<code>XmlWebApplicationContext</code>，和<code>ClassPathXmlApplicationContext</code>类似，都是基于XML配置的</p><p>2、<code>Spring Boot</code>创建的是<code>AnnotationConfigApplicationContext</code></p><p>后续重点学习研究的是<code>AnnotationConfigApplicationContext</code>这一种</p><h3 id="Spring中是如何创建一个对象？"><a href="#Spring中是如何创建一个对象？" class="headerlink" title="Spring中是如何创建一个对象？"></a>Spring中是如何创建一个对象？</h3><p><code>AnnotationConfigApplicationContext</code>可以简单理解为创建Java对象，当调用<code>context.getBean("userService")</code>方法时创建一个对象。那么问题来了，方法内部如何知道<code>"userService"</code>对应的是<code>UserService</code>类呢？</p><p>可以分析出来<code>AnnotationConfigApplicationContext</code>的构造方法做的一些事情：</p><p>1、解析<code>AppConfig.class</code>，得到扫描路径</p><p>2、遍历扫描路径下的所有Java类，如果类上面有@Component、@Service等注解，那么Spring就会把这个类记录下来，存放在一个Map里，比如像<code>Map&lt;String, Class&gt;</code><font color="red">，Spring源码中叫BeanDefinitionMap</font></p><p>3、Spring根据规则生成当前类的<code>beanName</code>，作为存入Map时的key，当前类作为存入Map时的value（Spring中的<code>beanName</code>默认是类名首字母小写）</p><h3 id="Bean的创建过程"><a href="#Bean的创建过程" class="headerlink" title="Bean的创建过程"></a>Bean的创建过程</h3><p>Spring到底是如何来创建一个Bean的呢，也就是Bean创建的生命周期。大致流程如下：</p><p>1、利用该类的构造方法来实例化得到一个对象（有多个构造方法时，Spring会做出选择<font color="red">，推断构造方法</font>）</p><p>2、得到一个对象后，Spring会判断该对象中是否存在被@Autowired注解了的属性，把这些属性找出来并由Spring进行赋值<font color="red">，依赖注入</font></p><p>3、依赖注入后，Spring会判断该对象是否实现了BeanNameAware接口、BeanClassLoaderAware接口、BeanFactoryAware接口，如果实现了，就表示当前对象必须实现该接口中所定义的setBeanName()、setBeanClassLoader()、 setBeanFactory()方法，那Spring就会调用这些方法并传入相应的参数<font color="red">，Aware回调</font></p><p>4、Aware回调后，Spring会判断该对象中是否存在某个方法被@PostConstruct注解了，如果存在，Spring会调用当前对象的此方法<font color="red">，初始化前</font></p><p>5、Spring会判断该对象是否实现了InitializingBean接口，如果实现了，就表示当前对象必须实现该接口中的afterPropertiesSet()方法，那Spring就会调用当前对象中的afterPropertiesSet()方法<font color="red">，初始化</font></p><p>6、Spring会判断当前对象需不需要进行AOP，如果不需要那么Bean就创建完了，如果需要进行AOP，则会进行动态代理并生成一个代理对象做为Bean<font color="red">，初始化后</font></p><p>注意：不用AOP时，Bean就是构造方法创建的普通对象；需要AOP时，Bean是代理类实例化的对象</p><p>Bean对象创建完成后，如果是单例Bean就放在Map里，下次可以直接从Map中直接获取（Spring源码中Map就是单例池）；如果是原型Bean就不用放在Map里，下次重新创建</p><h4 id="推断构造方法"><a href="#推断构造方法" class="headerlink" title="推断构造方法"></a>推断构造方法</h4><p>选择构造方法的判断逻辑：</p><p>1、只有一个构造方法，无论是否有参，Spring都会选择这个</p><p>2、有多个构造方法时，Spring会选择无参的构造方法（无参本身就是一种默认）</p><p>没有无参构造方法，且构造方法上面都没有@Autowired注解时报错，Spring不知道选择哪一个</p><p>没有无参构造方法，但是某个构造方法上面添加了@Autowired注解，Spring选择这一个构造方法</p><p>注意：Spring选择有参构造方法时，Spring会先根据参数类型，类型相同再根据参数名字去找Bean对象，类型和名字都找不到就报错</p><p>推断构造方法：确定用哪个构造方法，确定入参的Bean对象</p><h4 id="AOP大致流程"><a href="#AOP大致流程" class="headerlink" title="AOP大致流程"></a>AOP大致流程</h4><p>判断当前Bean对象需不需要进行AOP：</p><p>1、找出所有的切面Bean</p><p>2、遍历切面中的每个方法，看是否写了@Before、@After等注解</p><p>3、如果写了，则判断所对应的Pointcut是否和当前Bean对象的类匹配</p><p>4、如果匹配则表示当前Bean对象有匹配的的Pointcut，需要进行AOP</p><p>利用cglib进行AOP的大致流程：<font color="red">（cglib说白了就是父子类）</font></p><p>1、生成代理类XXServiceProxy，代理类继承XXService</p><p>2、代理类中重写了父类的方法</p><p>3、代理类中有一个target属性，该属性的值为被代理对象</p><p><font color="red">（这里的被代理对象：是推断构造方法实例化的对象，完成了依赖注入、初始化等）</font></p><p>4、代理类中的方法被执行时，先执行before的切面逻辑，再执行<code>target.目标方法</code></p><p>注意：XXServiceProxy是代理类，它实例化出来的是代理对象；target是被代理对象</p><p>思考：代理对象的属性是null，没有进行依赖注入，为什么？</p><p>没有必要，大部分情况用不到，需要用的话也可以通过target获取</p><h4 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h4><p>在某个方法上加了@Transactional注解后，就表示该方法在调用时会开启Spring事务，而这个方法所在的类所对应的Bean对象会是该类的代理对象。</p><p>1、判断当前执行的方法是否存在@Transactional注解</p><p>2、如果存在，则利用事务管理器（TransactionMananger）新建一个数据库连接</p><p>3、修改数据库连接的autocommit为false</p><p>4、执行target.目标方法，业务逻辑的sql</p><p>5、执行完之后没有异常则提交，否则回滚</p><p>事务失效的场景分析：</p><p>1、调用目标方法的是否为代理类，使用代理类调用时才有切面的逻辑</p><p>2、是否使用的同一个事务管理器（或者说是否同一个数据库连接）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-Java内存模型</title>
      <link href="/posts/cp-family/20/"/>
      <url>/posts/cp-family/20/</url>
      
        <content type="html"><![CDATA[<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>在并发编程中，需要处理的两个关键问题： </p><p>1）<font color="red">多线程之间如何通信</font>（线程之间以何种机制来交换数据）</p><p>2）<font color="red">多线程之间如何同步</font>（控制不同线程间操作发生的相对顺序）</p><p>线程之间常用的通信机制有两种：共享内存和消息传递，Java采用的是<strong>共享内存</strong>模型</p><span id="more"></span><h3 id="Java内存模型的抽象结构"><a href="#Java内存模型的抽象结构" class="headerlink" title="Java内存模型的抽象结构"></a>Java内存模型的抽象结构</h3><p>Java线程之间的通信由Java内存模型<font color="red">（Java Memory Model，简称JMM）</font>控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。</p><p><font color="red">JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了共享变量的副本。</font>本地内存是JMM的一个抽象概念，并不真实存在，它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。</p><p>根据JMM的规定，<font color="red">线程对共享变量的所有操作都必须在自己的本地内存中进行，不能直接从主内存中读取。JMM通过控制主内存与每个线程的本地内存之间的交互，来为Java程序提供内存可见性的保证。</font></p><p><img src="/images/cp/tmf-1.png" alt="tmf-1"></p><h4 id="主内存与工作内存交互协议"><a href="#主内存与工作内存交互协议" class="headerlink" title="主内存与工作内存交互协议"></a>主内存与工作内存交互协议</h4><p><font color="red">Java内存模型定义了以下八种<strong>原子操作</strong>来完成：</font></p><ul><li>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。</li><li>unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</li></ul><p><img src="/images/cp/jmm-1.png" alt="jmm-1"></p><p>Java内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：</p><ul><li>如果要把一个变量从主内存中复制到工作内存，就需要按顺序地执行read和load操作， 如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作。但<font color="red">Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行</font></li><li>不允许read和load、store和write操作之一单独出现</li><li>不允许一个线程丢弃它的最近assign的操作，即<font color="red">变量在工作内存中改变了之后必须同步到主内存中</font></li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了load和assign操作</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。lock和unlock必须成对出现</li><li><font color="red">如果对一个变量执行lock操作，将会清空工作内存中此变量的值，</font>在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</li><li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量</li><li><font color="red">对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）</font></li></ul><p><strong>Java中可见性底层有两种实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、内存屏障    （<span class="token keyword">synchronized</span>  Threed<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">volatile</span>）lock addl $<span class="token number">0x0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">%</span>rsp<span class="token punctuation">)</span><span class="token number">2</span>、cpu上下文切换    （Threed<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   Threed<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>）</code></pre><h3 id="锁的内存语义"><a href="#锁的内存语义" class="headerlink" title="锁的内存语义"></a>锁的内存语义</h3><p>锁获取和释放的内存语义：</p><ul><li>当线程获取锁时，<font color="red">JMM会把该线程对应的本地内存置为无效。</font></li><li>当线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中。</li></ul><p>synchronized关键字的作用是确保多个线程访问共享资源时的互斥性和可见性。在获取锁之前，线程会将共享变量的最新值从主内存中读取到线程本地的缓存中，释放锁时会将修改后的共享变量的值刷新到主内存中，以保证可见性。</p><h3 id="volatile内存语义"><a href="#volatile内存语义" class="headerlink" title="volatile内存语义"></a>volatile内存语义</h3><p>volatile写：<font color="red">当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存。</font></p><p>volatile读：<font color="red">当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效，线程接下来将从主内存中读取共享变量。</font></p><h4 id="volatile内存语义的实现原理"><a href="#volatile内存语义的实现原理" class="headerlink" title="volatile内存语义的实现原理"></a>volatile内存语义的实现原理</h4><p>JMM属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p><h4 id="volatile禁止重排序规则"><a href="#volatile禁止重排序规则" class="headerlink" title="volatile禁止重排序规则"></a>volatile禁止重排序规则</h4><p>为了实现volatile的内存语义，JMM会限制编译器重排序，JMM针对编译器制定了volatile重排序规则表。</p><p><img src="/images/cp/jmm-2.png" alt="jmm-2"></p><p><font color="red">volatile禁止重排序场景：</font></p><p>1、当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。</p><p>2、当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。</p><p>3、当第一个操作是volatile写，第二个操作是volatile读时，不能重排序。</p><h3 id="有序性案例深入分析"><a href="#有序性案例深入分析" class="headerlink" title="有序性案例深入分析"></a>有序性案例深入分析</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在Java多线程程序中，有时候需要采用延迟初始化来降低初始化类和创建对象的开销。</span><span class="token comment" spellcheck="true">// 双重检查锁定是常用的延迟初始化技术，但它有一个错误的用法。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 双重检查锁定（Double-checked Locking）实现单例对象的延迟初始化     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>正确用法：<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton singleton<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加volatile关键字</span>原因分析：singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//执行过程分为如下三步</span><span class="token number">1</span>、分配对象内存空间，memory <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2</span>、初始化对象，<span class="token function">ctorInstance</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token number">3</span>、设置instance指向刚刚分配的内存地址，instance <span class="token operator">=</span> memory注意：上面的第<span class="token number">2</span>步和第<span class="token number">3</span>步，可能发生重排序，即<span class="token number">3</span>发生在<span class="token number">2</span>的前面。导致可能获得未初始化的对象发生错误</code></pre><h3 id="JMM内存屏障插入策略"><a href="#JMM内存屏障插入策略" class="headerlink" title="JMM内存屏障插入策略"></a>JMM内存屏障插入策略</h3><p>为了实现volatile的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p><p><font color="red">JMM内存屏障插入策略：</font></p><p>1、在每个volatile写操作的<strong>前面</strong>插入一个StoreStore屏障</p><p>2、在每个volatile写操作的<strong>后面</strong>插入一个StoreLoad屏障</p><p>3、在每个volatile读操作的<strong>后面</strong>插入一个LoadLoad屏障</p><p>4、在每个volatile读操作的<strong>后面</strong>插入一个LoadStore屏障</p><p><img src="/images/cp/jmm-3.png" alt="jmm-3"></p><p>注意：x86不会对读-读、读-写、写-写操作做重排序，仅会对写-读操作做重排序。</p><p><img src="/images/cp/jmm-4.png" alt="jmm-4"></p><p>不同硬件实现内存屏障的方式不同，Java内存模型屏蔽了这种底层硬件平台的差异，由JVM来为不同的平台生成相应的机器码。</p><h4 id="Hotspots源码中内存屏障的实现"><a href="#Hotspots源码中内存屏障的实现" class="headerlink" title="Hotspots源码中内存屏障的实现"></a>Hotspots源码中内存屏障的实现</h4><pre class=" language-C++"><code class="language-C++">inline void OrderAccess::storeload()  { fence(); }inline void OrderAccess::fence() {  if (os::is_MP()) {    // always use locked addl since mfence is sometimes expensive#ifdef AMD64    __asm__ volatile ("lock; addl $0,0(%%rsp)" : : : "cc", "memory");#else    __asm__ volatile ("lock; addl $0,0(%%esp)" : : : "cc", "memory");#endif  }}</code></pre><h3 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h3><h4 id="happens-before的定义"><a href="#happens-before的定义" class="headerlink" title="happens-before的定义"></a>happens-before的定义</h4><p><font color="red">JSR-133使用happens-before的概念来指定两个操作之间的执行顺序。</font></p><ul><li>as-if-serial语义保证单线程内程序的执行结果不被改变</li><li>happens-before关系保证正确同步的多线程程序的执行结果不被改变。</li></ul><h4 id="happens-before规则"><a href="#happens-before规则" class="headerlink" title="happens-before规则"></a>happens-before规则</h4><p>JSR-133规范定义了如下happens-before规则：</p><p>1）程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作；</p><p>2）锁定规则：对一个锁的解锁，happens-before于随后对这个锁的加锁；</p><p>3）volatile变量规则：对一个volatile变量的写操作，happens-before于任意后续对这个volatile变量的读操作；</p><p>4）传递规则：如果A happens-before B，并且B happens-before C，则A happens-before C；</p><p>5）线程启动规则：如果线程A调用线程B的start()方法来启动线程B，则start()操作happens-before于线程B中的任意操作；</p><p>6）线程中断规则：对线程interrupt()方法的调用happens-before于被中断线程的代码检测到中断事件的发生；</p><p>7）线程终结规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回；</p><p>8）对象终结规则：一个对象的初始化完成happens-before于它的finalize()方法的开始。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><font color="red">Java中的volatile关键字可以保证多线程操作共享变量的可见性以及禁止指令重排序，synchronized关键字不仅保证可见性，同时也保证了原子性（互斥性）。在更底层，JMM通过内存屏障来实现内存的可见性以及禁止重排序。</font>为了程序员的方便理解，提出了happens-before，它更加的简单易懂，从而避免了程序员为了理解内存可见性而去学习复杂的重排序规则以及这些规则的具体实现方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-并发三大特性</title>
      <link href="/posts/cp-family/19/"/>
      <url>/posts/cp-family/19/</url>
      
        <content type="html"><![CDATA[<h2 id="并发三大特性"><a href="#并发三大特性" class="headerlink" title="并发三大特性"></a>并发三大特性</h2><p>并发编程Bug源头：原子性、可见性和有序性问题。</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p><font color="red">一个或多个操作，要么全部执行且在执行过程中不被任何因素打断，要么全部不执行。</font></p><p>注意：不采取任何的原子性保障措施的自增操作并不是原子性的，比如i++操作。</p><span id="more"></span><p>原子性案例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 模拟多线程累加操作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    counter<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">try</span>        <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 思考counter=？</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>未保证原子性，输出结果：<span class="token number">38865</span>（随机值）</code></pre><h4 id="如何保证原子性"><a href="#如何保证原子性" class="headerlink" title="如何保证原子性"></a>如何保证原子性</h4><ul><li>通过 synchronized 关键字保证原子性 </li><li>通过 Lock锁保证原子性 </li><li>通过 CAS保证原子性</li></ul><p><font color="red">思考：在 32 位的机器上对 long 型变量进行加减操作是否存在并发隐患？</font></p><p>存在安全隐患，32位机器上操作 long 类型分为两步：高32位、低32位，并发可能有脏读问题</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><p>可见性案例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 模拟两个线程对共享变量操作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisibilityTest</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// volatile -> lock addl $0x0,(%rsp)</span>    <span class="token comment" spellcheck="true">// 1、volatile 保证可见性</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// private volatile int count;</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 希望结束数据加载工作</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"修改flag:"</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始执行....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO 业务逻辑：加载数据</span>                        <span class="token comment" spellcheck="true">// 2、让出CPU时保证可见性，1000不会跳出循环，10000跳出，因为时间片用完了</span>            <span class="token comment" spellcheck="true">// shortWait(10000);</span>                        <span class="token comment" spellcheck="true">// 3、synchronized 保证可见性</span>            <span class="token comment" spellcheck="true">// System.out.println("正在加载数据......");</span>                        <span class="token comment" spellcheck="true">// 4、volatile count 保证可见性</span>            <span class="token comment" spellcheck="true">// count++;</span>                        <span class="token comment" spellcheck="true">// 5、添加一个内存屏障，保证可见性</span>            <span class="token comment" spellcheck="true">// UnsafeFactory.getUnsafe().storeFence();</span>                        <span class="token comment" spellcheck="true">// 6、sleep 保证可见性，方法内部使用了内存屏障</span>            <span class="token comment" spellcheck="true">// try {</span>            <span class="token comment" spellcheck="true">// Thread.sleep(0);</span>            <span class="token comment" spellcheck="true">// } catch (InterruptedException e) {</span>            <span class="token comment" spellcheck="true">// throw new RuntimeException(e);</span>            <span class="token comment" spellcheck="true">// }</span>                        <span class="token comment" spellcheck="true">// 7、保证可见性</span>            <span class="token comment" spellcheck="true">// 让出cpu使用权</span>            <span class="token comment" spellcheck="true">// Thread.yield(); </span>        <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"数据加载完成，跳出循环"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException    <span class="token punctuation">{</span>        VisibilityTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VisibilityTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 线程threadA模拟数据加载场景</span>        Thread threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> test<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"threadA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 让threadA先执行一会儿后再启动线程B</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 线程threadB通过修改flag控制threadA的执行时间，数据加载可以结束了</span>        Thread threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> test<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"threadB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shortWait</span><span class="token punctuation">(</span><span class="token keyword">long</span> interval<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end<span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> interval <span class="token operator">>=</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Unsafe工具类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnsafeFactory</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取 Unsafe 对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Unsafe <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            Field field <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 获取字段的内存偏移量     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getFieldOffset</span><span class="token punctuation">(</span>Unsafe unsafe<span class="token punctuation">,</span> Class <span class="token class-name">clazz</span><span class="token punctuation">,</span> String fieldName<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="如何保证可见性"><a href="#如何保证可见性" class="headerlink" title="如何保证可见性"></a>如何保证可见性</h4><ul><li>通过 volatile 关键字保证可见性 </li><li>通过内存屏障保证可见性 </li><li>通过 synchronized 关键字保证可见性 </li><li>通过 Lock锁保证可见性</li></ul><p><font color="red">思考：为什么多线程对共享变量的操作存在可见性问题？</font></p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p><font color="red">程序执行的顺序按照代码的先后顺序执行。</font>为了提升性能，编译器和处理器常常会对指令做重排序，所以存在有序性问题。</p><p>有序性案例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 从代码顺序看，不会出现(0,0)的结果。指令重排序就有可能出现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReOrderTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**             * x,y的值是多少: 0,1 1,0 1,1 0,0             */</span>            Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    x <span class="token operator">=</span> b<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    y <span class="token operator">=</span> a<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次（"</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="如何保证有序性"><a href="#如何保证有序性" class="headerlink" title="如何保证有序性"></a>如何保证有序性</h4><ul><li>通过 volatile 关键字保证有序性 </li><li>通过内存屏障保证有序性 </li><li>通过 synchronized关键字保证有序性 </li><li>通过Lock锁保证有序性</li></ul><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>在并发编程中，需要处理的两个关键问题： </p><p>1）<font color="red">多线程之间如何通信</font>（线程之间以何种机制来交换数据）</p><p>2）<font color="red">多线程之间如何同步</font>（控制不同线程间操作发生的相对顺序）</p><p>线程之间常用的通信机制有两种：共享内存和消息传递，Java采用的是<strong>共享内存</strong>模型</p><h3 id="Java内存模型的抽象结构"><a href="#Java内存模型的抽象结构" class="headerlink" title="Java内存模型的抽象结构"></a>Java内存模型的抽象结构</h3><p>Java线程之间的通信由Java内存模型<font color="red">（Java Memory Model，简称JMM）</font>控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。</p><p><font color="red">JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存中存储了共享变量的副本。</font>本地内存是JMM的一个抽象概念，并不真实存在，它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。</p><p>根据JMM的规定，<font color="red">线程对共享变量的所有操作都必须在自己的本地内存中进行，不能直接从主内存中读取。JMM通过控制主内存与每个线程的本地内存之间的交互，来为Java程序提供内存可见性的保证。</font></p><p><img src="/images/cp/tmf-1.png" alt="tmf-1"></p><h4 id="主内存与工作内存交互协议"><a href="#主内存与工作内存交互协议" class="headerlink" title="主内存与工作内存交互协议"></a>主内存与工作内存交互协议</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-线程池ForkJoinPool(二)</title>
      <link href="/posts/cp-family/18/"/>
      <url>/posts/cp-family/18/</url>
      
        <content type="html"><![CDATA[<h2 id="Fork-x2F-Join框架介绍"><a href="#Fork-x2F-Join框架介绍" class="headerlink" title="Fork/Join框架介绍"></a>Fork/Join框架介绍</h2><h3 id="什么是Fork-x2F-Join"><a href="#什么是Fork-x2F-Join" class="headerlink" title="什么是Fork/Join"></a>什么是Fork/Join</h3><p>Fork/Join是一个是一个并行计算的框架，主要就是用来<font color="red">支持分治任务模型。</font></p><p><font color="red">Fork 对应的是分治任务模型里的任务分解，Join 对应的是结果合并。</font></p><p>核心思想：将一个大任务分成许多小任务，然后并行执行这些小任务，最终将它们的结果合并成一个大的结果。</p><span id="more"></span><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>1、递归分解型任务</p><p>这类任务通常可以将大任务分解成若干子任务，每个子任务可以独立执行，并且可以归并子任务得到有序的结果</p><p>举例：排序、归并、遍历</p><p>2、数组处理</p><p>处理大型数组时，可以将大数组分解成若干子数组，子数组并行处理，最后归并子数组的结果</p><p>举例：数组的排序、统计、查找</p><p>3、并行化算法</p><p>将问题分解成若干子问题，并行解决每个子问题，最后合并子问题得到最终解决方案</p><p>举例：并行化图像处理算法、并行化机器学习算法</p><p>4、大数据处理</p><p>将数据分成若干分片，并行处理每个分片，最后将处理后的分片合并成完整结果</p><p>举例：大型日志文件处理、大型数据库的查询</p><h3 id="Fork-x2F-Join使用"><a href="#Fork-x2F-Join使用" class="headerlink" title="Fork/Join使用"></a>Fork/Join使用</h3><p>Fork/Join框架的主要组成部分是ForkJoinPool、ForkJoinTask。ForkJoinPool是一个线程池，它用于管理ForkJoin任务的执行。ForkJoinTask是一个抽象类，用于表示可以被分割成更小部分的任务。</p><h4 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h4><p>ForkJoinPool是Fork/Join框架中的线程池类，它用于管理Fork/Join任务的线程。</p><p>方法：submit()、invoke()、shutdown()、awaitTermination()等</p><p>（提交任务、执行任务、关闭线程池、等待任务执行结果）</p><p>参数：线程池的大小、工作线程的优先级、任务队列的容量等，根据具体应用场景设置</p><p><strong>构造器</strong></p><p>ForkJoinPool中有四个核心参数，用于控制线程池的<font color="red">并行数、工作线程的创建、异常处理和模式指定</font>等。</p><ul><li>int parallelism：<font color="red">指定并行级别（parallelism level）。</font>ForkJoinPool将根据这个设定，决定工作线程的数量。如果未设置的话，将使用Runtime.getRuntime().availableProcessors()来设置并行级别；</li><li>ForkJoinWorkerThreadFactory factory：ForkJoinPool在创建线程时，会通过factory来创建。注意，这里需要实现的是ForkJoinWorkerThreadFactory，而不是ThreadFactory。如果不指定factory，那么将由默认的DefaultForkJoinWorkerThreadFactory负责线程的创建工作；</li><li>UncaughtExceptionHandler handler：指定异常处理器，当任务在运行中出错时，将由设定的处理器处理；</li><li>boolean asyncMode：<font color="red">设置队列的工作模式。</font>当asyncMode为true时，将使用先进先出队列，而为false时则使用后进先出的模式。<font color="red">默认是false，后进先出</font></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取处理器数量，注意这里是逻辑核</span><span class="token keyword">int</span> processors <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 构建forkjoin线程池</span>ForkJoinPool forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span>processors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">ForkJoinPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> parallelism<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>parallelism<span class="token punctuation">,</span> defaultForkJoinWorkerThreadFactory<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>任务提交方式</strong>（核心能力之一）</p><table><thead><tr><th></th><th>返回值</th><th>方法</th></tr></thead><tbody><tr><td>提交异步执行</td><td>void</td><td><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">execute</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html">ForkJoinTask</a> task)<br><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">execute</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html">Runnable tas</a>k)</td></tr><tr><td>等待并获取结果</td><td>T</td><td><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">invoke</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html">ForkJoinTask</a> task)</td></tr><tr><td>提交执行获取Future结果</td><td>ForkJoinTask</td><td><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">submit</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html">ForkJoinTask</a> task)<br><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">submit</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html">Callable </a>task)<br><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">submit</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html">Runnable tas</a>k)<br><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">submit</a>(<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html">Runnable tas</a>k, T resul<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html">t)</a></td></tr></tbody></table><p><strong>和普通线程池之间的区别</strong></p><ul><li><strong>工作窃取算法</strong></li></ul><p><font color="red">ForkJoinPool采用工作窃取算法来提高线程的利用率，</font>而普通线程池则采用任务队列来管理任务。</p><p>工作窃取：一个线程完成自己的任务后，可以从其它线程的队列中获取一个任务来执行，提高线程的利用率。</p><ul><li><strong>任务的分解和合并</strong></li></ul><p>ForkJoinPool可以将一个大任务分解为多个小任务，并行地执行这些小任务，最终将它们的结果合并起来得到最终结果。而普通线程池只能按照提交的任务顺序一个一个地执行任务。</p><ul><li><strong>工作线程的数量</strong></li></ul><p>ForkJoinPool会根据当前系统的CPU核心数来自动设置工作线程的数量，以最大限度地发挥CPU的性能优势。而普通线程池需要手动设置线程池的大小，如果设置不合理，可能会导致线程过多或过少，从而影响程序的性能。</p><ul><li><strong>任务类型</strong></li></ul><p><font color="red">ForkJoinPool适用于执行大规模任务并行化，</font>而普通线程池适用于执行一些短小的任务，如处理请求等。</p><h4 id="ForkJoinTask"><a href="#ForkJoinTask" class="headerlink" title="ForkJoinTask"></a>ForkJoinTask</h4><p>ForkJoinTask是Fork/Join框架中的抽象类，它定义了执行任务的基本接口。用户可以通过继承ForkJoinTask类来实现自己的任务类，并重写其中的compute()方法来定义任务的执行逻辑。通常情况下我们不需要直接继承ForkJoinTask类，而只需要继承它的子类，Fork/Join框架提供了以下三个子类：</p><ul><li><strong>RecursiveAction</strong>：<font color="red">用于递归执行但不需要返回结果的任务。</font></li><li><strong>RecursiveTask</strong> ：<font color="red">用于递归执行需要返回结果的任务。</font></li><li>CountedCompleter<t>：在任务完成执行后会触发执行一个自定义的钩子函数</t></li></ul><p><strong>调用方法</strong></p><ul><li><strong>fork()——提交任务</strong></li></ul><p>fork()方法用于<font color="red">向当前任务所运行的线程池中提交任务。</font>如果当前线程是ForkJoinWorkerThread类型，将会放入该线程的工作队列，否则放入common线程池的工作队列中。</p><ul><li><strong>join()——获取任务执行结果</strong></li></ul><p>join()方法用于<font color="red">获取任务的执行结果。</font>调用join()时，将阻塞当前线程直到对应的子任务完成运行并返回结果。</p><h4 id="计算斐波那契数列（处理递归任务）"><a href="#计算斐波那契数列（处理递归任务）" class="headerlink" title="计算斐波那契数列（处理递归任务）"></a>计算斐波那契数列（处理递归任务）</h4><p>斐波那契数列指的是这样一个数列：1，1，2，3，5，8，13，21，34，55，89… 这个数列从第3项 开始，每一项都等于前两项之和。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FibonacciDemo</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token function">FibonacciDemo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 重写RecursiveTask的compute()方法     */</span>    <span class="token keyword">protected</span> Integer <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        FibonacciDemo f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FibonacciDemo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 提交任务</span>        f1<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FibonacciDemo f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FibonacciDemo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 合并结果</span>        <span class="token keyword">return</span> f2<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> f1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构建forkjoin线程池</span>        ForkJoinPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FibonacciDemo task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FibonacciDemo</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 参数大，抛出StackOverflowError</span>        <span class="token comment" spellcheck="true">// 提交任务并一直阻塞直到任务 执行完成返回合并结果。</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="栈溢出如何解决"><a href="#栈溢出如何解决" class="headerlink" title="栈溢出如何解决"></a>栈溢出如何解决</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用迭代方式，防止栈溢出</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FibonacciDemo2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fib <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        fib<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        fib<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            fib<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fib<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> fib<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fib<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="处理递归任务注意事项"><a href="#处理递归任务注意事项" class="headerlink" title="处理递归任务注意事项"></a>处理递归任务注意事项</h4><p><font color="red">在使用Fork/Join框架处理递归任务时，需要根据实际情况来评估递归深度和任务粒度，</font>以避免任务调度和内存消耗的问题。如果递归深度较大，可以尝试采用其他方法来优化算法，如使用迭代方式替代递归，或者限制递归深度来减少任务数量，以避免Fork/Join框架的缺点。</p><p>递归深度较大时，子任务可能被调度到不同的线程执行，线程的创建、销毁、任务调度占用大量资源。另外递归调用方法时，创建大量方法栈帧，可能导致栈内存溢出StackOverflowError</p><h4 id="处理阻塞任务"><a href="#处理阻塞任务" class="headerlink" title="处理阻塞任务"></a>处理阻塞任务</h4><p>1、<strong>防止线程饥饿</strong>：当一个线程在执行一个阻塞型任务时，它将会一直等待任务完成，没有任务窃取的情况下可能会一直阻塞下去。为防止这种情况发生，应该<font color="red">避免在ForkJoinPool中提交大量的阻塞型任务。</font></p><p>2、<strong>使用特定的线程池</strong>：为了最大程度地利用ForkJoinPool的性能，可以使用专门的线程池来处理阻塞型任务，这些线程不会被ForkJoinPool的窃取机制所影响。例如，可以使用ThreadPoolExecutor来创建一个线程池，然后将这个线程池作为ForkJoinPool的执行器，这样就可以使用ThreadPoolExecutor来处理阻塞型任务，而使用ForkJoinPool来处理非阻塞型任务。</p><p>3、<strong>不要阻塞工作线程</strong>：如果在ForkJoinPool中使用阻塞型任务，那么需要确保这些任务不会阻塞工作线程，否则会导致整个线程池的性能下降。为了避免这种情况，可以将阻塞型任务提交到一个专门的线程池中，或者<font color="red">使用CompletableFuture等异步编程工具来处理阻塞型任务。</font></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 结合CompletableFuture使用示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingTaskDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构建一个forkjoin线程池</span>        ForkJoinPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建一个异步任务，并将其提交到ForkJoinPool中执行</span>        CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> future <span class="token operator">=</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 模拟一个耗时的任务</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> pool<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 等待任务完成，并获取结果</span>            String result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 关闭ForkJoinPool，释放资源</span>            pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ForkJoinPool工作原理"><a href="#ForkJoinPool工作原理" class="headerlink" title="ForkJoinPool工作原理"></a>ForkJoinPool工作原理</h4><p>ForkJoinPool 内部有多个任务队列，当我们通过 ForkJoinPool 的 invoke() 或者 submit() 方法提交任务时，ForkJoinPool 根据一定的路由规则把任务提交到一个任务队列中，如果任务在执行过程中会创建出子任务，那么子任务会提交到工作线程对应的任务队列中。</p><p>另外，ForkJoinPool 支持一种叫 做“任务窃取”的机制，如果工作线程空闲了，那它可以“窃取”其他工作任务队列里的任务。充分利用CPU的性能。</p><p><font color="red">工作任务队列是一个双端链表，窃取是从base端窃取，top端是正常执行取任务</font></p><p><strong>工作线程ForkJoinWorkerThread</strong></p><p>ForkJoinWorkerThread是ForkJoinPool中的一个专门用于执行任务的线程。</p><p>当一个ForkJoinWorkerThread被创建时，它会自动注册一个WorkQueue到ForkJoinPool中。这个WorkQueue是该线程专门用于存储自己的任务的队列，只能出现在WorkQueues[]的奇数位。在ForkJoinPool中，WorkQueues[]是一个数组，用于存储所有线程的WorkQueue。</p><p><img src="/images/cp/fjp-1.png" alt="fjp-1"></p><p><strong>工作队列WorkQueue</strong></p><p>WorkQueue是一个双端队列，用于存储工作线程自己的任务。每个工作线程都会维护一个本地的WorkQueue，并且优先执行本地队列中的任务。当本地队列中的任务执行完毕后，工作线程会尝试从其他线程的WorkQueue中窃取任务。</p><p><img src="/images/cp/fjp-2.png" alt="fjp-2"></p><p>注意：在ForkJoinPool中，只有WorkQueues[]奇数位的WorkQueue是属于ForkJoinWorkerThread线程的，因此只有这些WorkQueue才能被线程本身使用和窃取任务。偶数位的WorkQueue是用于外部线程提交任务的，而且是由多个线程共享的，因此它们不能被线程窃取任务。</p><p><strong>工作窃取</strong></p><p><font color="red">工作窃取，就是允许空闲线程从繁忙线程的双端队列中窃取任务。</font>默认情况下，工作线程从它自己的双端队列的头部获取任务。但是，当自己的任务为空时，线程会从其他繁忙线程双端队列的尾部中获取任务。这种方法，最大限度地减少了线程竞争任务的可能性。</p><p>ForkJoinPool的大部分操作都发生在工作窃取队列（work-stealing queues ）中，该队列由内部类WorkQueue实现。<font color="red">它是Deques的特殊形式，但仅支持三种操作方式：push、pop和poll（也称为窃取）。</font>在ForkJoinPool中，队列的读取有着严格的约束，push和pop仅能从其所属线程调用，而poll则可以从其他线程调用。</p><p><img src="/images/cp/fjp-3.png" alt="fjp-3"></p><p>通过工作窃取，Fork/Join框架可以实现任务的自动负载均衡，以<font color="red">充分利用多核CPU的计算能力，同时也可以避免线程的饥饿和延迟问题</font></p><p>如果对 ForkJoinPool 详细的实现细节感兴趣，也可以参考<a href="https://gee.cs.oswego.edu/dl/papers/fj.pdf">Doug Lea 的论文</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Fork/Join是一种基于分治思想的模型，在并发处理计算型任务时有着显著的优势。</p><ul><li>任务切分：将大的任务分割成更小粒度的小任务，让更多的线程参与执行； </li><li>任务窃取：通过任务窃取，充分地利用空闲线程，并减少竞争。</li></ul><p>使用ForkJoinPool时，需要特别注意任务的类型是否为纯函数计算类型，也就是这些任务不应该关心状态或者外界的变化，这样才是最安全的做法。如果是阻塞类型任务，那么你需要谨慎评估技术方案。虽然ForkJoinPool也能处理阻塞类型任务，但可能会带来复杂的管理成本。</p><p>处理阻塞任务重点学习CompletableFuture，包含各种编排任务的方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-线程池ForkJoinPool</title>
      <link href="/posts/cp-family/17/"/>
      <url>/posts/cp-family/17/</url>
      
        <content type="html"><![CDATA[<h2 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h2><p><font color="red">算法题：如何充分利用多核CPU的性能，快速对一个2千万大小的数组进行排序？</font></p><p>分治思想：分解 求解 合并</p><p>分治思想是<font color="red">将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。</font></p><p>分治思想的步骤如下：</p><p>1、分解：将要解决的问题划分成若干规模较小的同类问题；（子问题不能无限小，所以通常会设置阈值）</p><p>2、求解：当子问题划分得足够小时，用较简单的方法解决；</p><p>3、合并：按原问题的要求，将子问题的解逐层合并构成原问题的解。</p><p>计算机十大经典算法中的归并排序、快速排序、二分查找都是基于分治思想实现的算法</p><blockquote><p>归并排序（Merge Sort）演示：</p><p><a href="https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html">https://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html</a></p></blockquote><span id="more"></span><p>扩展：<code>Arrays.sort()</code> 非常高效的算法，快速排序，并且进行了优化</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Sorts the specified array into ascending numerical order. * * &lt;p>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort * by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm * offers O(n log(n)) performance on many data sets that cause other * quicksorts to degrade to quadratic performance, and is typically * faster than traditional (one-pivot) Quicksort implementations. * * @param a the array to be sorted */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DualPivotQuicksort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Sorts the specified array into ascending numerical order. * * @implNote The sorting algorithm is a parallel sort-merge that breaks the * array into sub-arrays that are themselves sorted and then merged. When * the sub-array length reaches a minimum granularity, the sub-array is * sorted using the appropriate {@link Arrays#sort(byte[]) Arrays.sort} * method. If the length of the specified array is less than the minimum * granularity, then it is sorted using the appropriate {@link * Arrays#sort(byte[]) Arrays.sort} method. The algorithm requires a * working space no greater than the size of the original array. The * {@link ForkJoinPool#commonPool() ForkJoin common pool} is used to * execute any parallel tasks. * * @param a the array to be sorted * * @since 1.8 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parallelSort</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> p<span class="token punctuation">,</span> g<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> MIN_ARRAY_SORT_GRAN <span class="token operator">||</span>        <span class="token punctuation">(</span>p <span class="token operator">=</span> ForkJoinPool<span class="token punctuation">.</span><span class="token function">getCommonPoolParallelism</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        DualPivotQuicksort<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">new</span> <span class="token class-name">ArraysParallelSortHelpers<span class="token punctuation">.</span>FJByte<span class="token punctuation">.</span>Sorter</span>            <span class="token punctuation">(</span>null<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token punctuation">(</span><span class="token punctuation">(</span>g <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> MIN_ARRAY_SORT_GRAN<span class="token punctuation">)</span> <span class="token operator">?</span>             MIN_ARRAY_SORT_GRAN <span class="token operator">:</span> g<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="基于归并排序算法实现"><a href="#基于归并排序算法实现" class="headerlink" title="基于归并排序算法实现"></a>基于归并排序算法实现</h3><p><font color="red">对于大小为2千万的数组进行快速排序，可以使用高效的归并排序算法来实现。</font></p><h4 id="什么是归并排序"><a href="#什么是归并排序" class="headerlink" title="什么是归并排序"></a>什么是归并排序</h4><p><font color="red">归并排序（Merge Sort）是一种基于分治思想的排序算法。</font>归并排序的基本思想是将一个大数组分成两个相等大小的子数组，对每个子数组分别进行排序，然后将两个子数组合并成一个有序的大数组。因为常常使用递归实现（由先拆分后合并的性质决定的），所以我们称其为归并排序。</p><p>归并排序的步骤包括：</p><ul><li>将数组分成两个子数组</li><li>对每个子数组进行排序</li><li>合并两个有序的子数组<font color="red">（合并后仍是有序的，用双指针排序保证）</font></li></ul><p>归并排序的时间复杂度为O(nlogn)，空间复杂度为O(n)，其中n为数组的长度。</p><h3 id="使用归并排序实现上面的算法题"><a href="#使用归并排序实现上面的算法题" class="headerlink" title="使用归并排序实现上面的算法题"></a>使用归并排序实现上面的算法题</h3><h4 id="单线程实现归并排序"><a href="#单线程实现归并排序" class="headerlink" title="单线程实现归并排序"></a>单线程实现归并排序</h4><p>单线程归并算法的实现：将序列分成两个部分，分别进行递归排序，然后将排序好的子序列合并起来。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 要排序的数组 */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayToSort<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 拆分的阈值，低于此阈值就不再进行拆分 */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayToSort<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arrayToSort <span class="token operator">=</span> arrayToSort<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 排序     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arrayToSort<span class="token punctuation">,</span> threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayToSort<span class="token punctuation">,</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拆分后的数组长度小于阈值，直接进行排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayToSort<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> threshold<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用jdk提供的排序方法</span>            Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arrayToSort<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> arrayToSort<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">int</span> midpoint <span class="token operator">=</span> arrayToSort<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对数组进行拆分</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftArray <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arrayToSort<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> midpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightArray <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arrayToSort<span class="token punctuation">,</span> midpoint<span class="token punctuation">,</span> arrayToSort<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 递归调用</span>        leftArray <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>leftArray<span class="token punctuation">,</span> threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>        rightArray <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>rightArray<span class="token punctuation">,</span> threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 合并排序结果</span>        <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>leftArray<span class="token punctuation">,</span> rightArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftArray<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightArray<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义用于合并结果的数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mergedArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>leftArray<span class="token punctuation">.</span>length <span class="token operator">+</span> rightArray<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mergedArrayPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 利用双指针进行两个数的比较</span>        <span class="token keyword">int</span> leftArrayPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightArrayPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>leftArrayPos <span class="token operator">&lt;</span> leftArray<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> rightArrayPos <span class="token operator">&lt;</span> rightArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftArray<span class="token punctuation">[</span>leftArrayPos<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> rightArray<span class="token punctuation">[</span>rightArrayPos<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                mergedArray<span class="token punctuation">[</span>mergedArrayPos<span class="token punctuation">]</span> <span class="token operator">=</span> leftArray<span class="token punctuation">[</span>leftArrayPos<span class="token punctuation">]</span><span class="token punctuation">;</span>                leftArrayPos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                mergedArray<span class="token punctuation">[</span>mergedArrayPos<span class="token punctuation">]</span> <span class="token operator">=</span> rightArray<span class="token punctuation">[</span>rightArrayPos<span class="token punctuation">]</span><span class="token punctuation">;</span>                rightArrayPos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            mergedArrayPos<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>leftArrayPos <span class="token operator">&lt;</span> leftArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            mergedArray<span class="token punctuation">[</span>mergedArrayPos<span class="token punctuation">]</span> <span class="token operator">=</span> leftArray<span class="token punctuation">[</span>leftArrayPos<span class="token punctuation">]</span><span class="token punctuation">;</span>            leftArrayPos<span class="token operator">++</span><span class="token punctuation">;</span>            mergedArrayPos<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>rightArrayPos <span class="token operator">&lt;</span> rightArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            mergedArray<span class="token punctuation">[</span>mergedArrayPos<span class="token punctuation">]</span> <span class="token operator">=</span> rightArray<span class="token punctuation">[</span>rightArrayPos<span class="token punctuation">]</span><span class="token punctuation">;</span>            rightArrayPos<span class="token operator">++</span><span class="token punctuation">;</span>            mergedArrayPos<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> mergedArray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生成测试数组 用于归并排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayToSortByMergeSort <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">buildRandomIntArray</span><span class="token punctuation">(</span><span class="token number">20000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取处理器数量</span>        <span class="token keyword">int</span> processors <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MergeSort mergeSort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MergeSort</span><span class="token punctuation">(</span>arrayToSortByMergeSort<span class="token punctuation">,</span> processors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 归并排序</span>        mergeSort<span class="token punctuation">.</span><span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> duration <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单线程归并排序时间: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>duration <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000f</span> <span class="token operator">*</span> <span class="token number">1000f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 随机生成数组工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">buildRandomIntArray</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayToCalculateSumOf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        Random generator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayToCalculateSumOf<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            arrayToCalculateSumOf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arrayToCalculateSumOf<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Fork-x2F-Join并行归并排序"><a href="#Fork-x2F-Join并行归并排序" class="headerlink" title="Fork/Join并行归并排序"></a>Fork/Join并行归并排序</h4><p>并行归并排序是一种利用多线程实现的归并排序算法。基本思路：将数据分成若干部分，然后在不同线程上对这些部分进行归并排序，最后将排好序的部分合并成有序数组。在多核CPU上，这种算法也能够有效提高排序速度。</p><p>可以使用Java的Fork/Join框架来实现归并排序的并行化：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 利用fork-join实现数组排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSortTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveAction</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** 拆分的阈值，低于此阈值就不再进行拆分 */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 要排序的数组 */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayToSort<span class="token punctuation">;</span>         <span class="token keyword">public</span> <span class="token function">MergeSortTask</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayToSort<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threshold<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arrayToSort <span class="token operator">=</span> arrayToSort<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拆分后的数组长度小于阈值，直接进行排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arrayToSort<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> threshold<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用jdk提供的排序方法</span>            Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arrayToSort<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 对数组进行拆分</span>        <span class="token keyword">int</span> midpoint <span class="token operator">=</span> arrayToSort<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftArray <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arrayToSort<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> midpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightArray <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arrayToSort<span class="token punctuation">,</span> midpoint<span class="token punctuation">,</span> arrayToSort<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                MergeSortTask leftTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MergeSortTask</span><span class="token punctuation">(</span>leftArray<span class="token punctuation">,</span> threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>        MergeSortTask rightTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MergeSortTask</span><span class="token punctuation">(</span>rightArray<span class="token punctuation">,</span> threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方案一：调用任务，阻塞当前线程，直到所有子任务执行完成</span>        <span class="token function">invokeAll</span><span class="token punctuation">(</span>leftTask<span class="token punctuation">,</span> rightTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方案二：包括提交任务fork和合并结果join</span>        <span class="token comment" spellcheck="true">// leftTask.fork();</span>        <span class="token comment" spellcheck="true">// rightTask.fork();</span>        <span class="token comment" spellcheck="true">// leftTask.join();</span>        <span class="token comment" spellcheck="true">// rightTask.join();</span>        <span class="token comment" spellcheck="true">// 注意：方案一和方案二可以替换，方案一的优势在于可以充分利用CPU的多核能力</span>                <span class="token comment" spellcheck="true">// 合并排序结果</span>        arrayToSort <span class="token operator">=</span> MergeSort<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>leftTask<span class="token punctuation">.</span><span class="token function">getSortedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rightTask<span class="token punctuation">.</span><span class="token function">getSortedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSortedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> arrayToSort<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生成测试数组 用于归并排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayToSortByMergeSort <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">buildRandomIntArray</span><span class="token punctuation">(</span><span class="token number">20000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成测试数组 用于forkjoin排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrayToSortByForkJoin <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arrayToSortByMergeSort<span class="token punctuation">,</span> arrayToSortByMergeSort<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取处理器数量</span>        <span class="token keyword">int</span> processors <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 利用forkjoin排序</span>        MergeSortTask mergeSortTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MergeSortTask</span><span class="token punctuation">(</span>arrayToSortByForkJoin<span class="token punctuation">,</span> processors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建forkjoin线程池</span>        ForkJoinPool forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span>processors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行排序任务</span>        forkJoinPool<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>mergeSortTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> duration <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"forkjoin排序时间: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>duration <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000f</span> <span class="token operator">*</span> <span class="token number">1000f</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对比输出结果：</p><pre class=" language-java"><code class="language-java">单线程归并排序时间<span class="token operator">:</span> <span class="token number">3411.657</span>毫秒forkjoin排序时间<span class="token operator">:</span> <span class="token number">1744.5936</span>毫秒</code></pre><p>总结：数组越大，利用Fork/Join框架实现的并行化归并排序比单线程归并排序的效率越高</p><h4 id="并行实现归并排序的优化和注意事项"><a href="#并行实现归并排序的优化和注意事项" class="headerlink" title="并行实现归并排序的优化和注意事项"></a>并行实现归并排序的优化和注意事项</h4><ul><li>任务的大小：<font color="red">任务大小的选择会影响并行算法的效率和负载均衡。</font>如果任务太小，会造成任务划分和合并的开销过大；如果任务太大，会导致任务无法充分利用多核CPU并行处理能力。因此，在实际应用中需要根据数据量、CPU核心数等因素选择合适的任务大小。</li><li>负载均衡：<font color="red">并行算法需要保证负载均衡。</font>各个线程执行的任务大小和时间应该尽可能相等，否则会导致某些线程负载过重，而其他线程负载过轻的情况。在归并排序中，可以通过递归调用实现负载均衡，但是需要注意递归的层数不能太深，否则会导致任务划分和合并的开销过大。</li><li>数据分布：<font color="red">数据分布的均匀性也会影响并行算法的效率和负载均衡。</font>在归并排序中，如果数据分布不均匀，会导致某些线程处理的数据量过大，而其他线程处理的数据量过小的情况。因此，在实际应用中需要考虑数据的分布情况，尽可能将数据分成大小相等的子数组。</li><li>内存使用：<font color="red">并行算法需要考虑内存的使用情况。</font>特别是在处理大规模数据时，内存的使用情况会对算法的执行效率产生重要影响。在归并排序中，可以通过对数据进行原地归并实现内存的节约，但是需要注意归并的实现方式，以避免数据的覆盖和不稳定排序等问题。</li><li>线程切换：<font color="red">线程切换是并行算法的一个重要开销。</font>需要尽量减少线程的切换次数，以提高算法的执行效率。在归并排序中，可以通过设置线程池的大小和调整任务大小等方式控制线程的数量和切换开销，以实现算法的最优性能。</li></ul><h3 id="Fork-x2F-Join框架介绍"><a href="#Fork-x2F-Join框架介绍" class="headerlink" title="Fork/Join框架介绍"></a>Fork/Join框架介绍</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-线程池底层原理</title>
      <link href="/posts/cp-family/16/"/>
      <url>/posts/cp-family/16/</url>
      
        <content type="html"><![CDATA[<h2 id="线程池底层原理"><a href="#线程池底层原理" class="headerlink" title="线程池底层原理"></a>线程池底层原理</h2><h3 id="为什么需要线程池？"><a href="#为什么需要线程池？" class="headerlink" title="为什么需要线程池？"></a>为什么需要线程池？</h3><p>每次新开线程去执行任务，运行完任务销毁线程，都会消耗资源（操作系统级别的线程）</p><p>线程池就可以提前创建线程、保留线程，节约资源、节省掉开辟线程和销毁线程的消耗、提高效率</p><span id="more"></span><h3 id="线程池的五种状态如何流转？"><a href="#线程池的五种状态如何流转？" class="headerlink" title="线程池的五种状态如何流转？"></a>线程池的五种状态如何流转？</h3><p>线程池的五种状态，源码注释：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * The runState provides the main lifecycle control, taking on values: * *   RUNNING:  Accept new tasks and process queued tasks *   SHUTDOWN: Don't accept new tasks, but process queued tasks *   STOP:     Don't accept new tasks, don't process queued tasks, *             and interrupt in-progress tasks *   TIDYING:  All tasks have terminated, workerCount is zero, *             the thread transitioning to state TIDYING *             will run the terminated() hook method *   TERMINATED: terminated() has completed */</span></code></pre><p><font color="red">注意几种状态的区别：</font></p><table><thead><tr><th>状态</th><th>会接受新任务</th><th>会处理队列中任务</th><th>说明</th></tr></thead><tbody><tr><td>RUNNING</td><td>会</td><td>会</td><td>运行态，包括RUNNING和RUNNABLE</td></tr><tr><td>SHUTDOWN</td><td><font color="red">不会</font></td><td>会</td><td>调用shutdown()方法，设置为这个状态</td></tr><tr><td>STOP</td><td>不会</td><td><font color="red">不会</font></td><td>调用shutdownNow()方法，设置该状态<br><font color="red">注意：会中断在处理的任务</font><br><font color="red">（一个任务能不能被中断得看任务本身）</font></td></tr><tr><td>TIDYING</td><td>不会</td><td>不会</td><td><font color="red">所有线程都停掉</font>以后，变成这个状态<br>最后一个线程退出时，CAS成功设置该状态<br>最后一个线程判断依据：workCount为0</td></tr><tr><td>TERMINATED</td><td>不会</td><td>不会</td><td>TIDYING状态的线程，会调用terminated()方法<br>执行terminated()方法后，变成该状态</td></tr></tbody></table><p><font color="red">注意：线程池调用shutdown()和shutdownNow()方法后，线程不会马上关闭，而是执行完任务后再关闭。</font></p><p>部分源码分析：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 线程正常退出和异常退出，最终都会执行ThreadPoolExecutor#processWorkerExit方法</span><span class="token comment" spellcheck="true">// processWorkerExit方法的内部调用ThreadPoolExecutor#tryTerminate方法</span><span class="token comment" spellcheck="true">// tryTerminate方法中的workerCountOf为线程计数器。正常和异常退出的情况workerCount都会减一</span><span class="token comment" spellcheck="true">// 正常退出：ThreadPoolExecutor#getTask方法调用compareAndDecrementWorkerCount方法</span><span class="token comment" spellcheck="true">// 异常退出：ThreadPoolExecutor#processWorkerExit方法调用decrementWorkerCount方法</span><span class="token comment" spellcheck="true">// 上面的compareAndDecrementWorkerCount和decrementWorkerCount都会对workerCount减一</span><span class="token comment" spellcheck="true">// ThreadPoolExecutor#tryTerminate</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> TIDYING<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Eligible to terminate，关键，等于0表示最后一个线程</span>            <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span>ONLY_ONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span>TIDYING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// TIDYING状态</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">terminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用terminated方法后。变为TERMINATED状态</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    ctl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>TERMINATED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// TERMINATED状态</span>                    termination<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// else retry on failed CAS</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>线程池状态的表示方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * The numerical order among these values matters, to allow * ordered comparisons. The runState monotonically increases over * time, but need not hit each state. The transitions are: * * RUNNING -> SHUTDOWN *    On invocation of shutdown(), perhaps implicitly in finalize() * (RUNNING or SHUTDOWN) -> STOP *    On invocation of shutdownNow() * SHUTDOWN -> TIDYING *    When both queue and pool are empty * STOP -> TIDYING *    When pool is empty * TIDYING -> TERMINATED *    When the terminated() hook method has completed */</span><span class="token comment" spellcheck="true">// Integer类型是4个字节，也就是32位。因为线程池有5种状态，所以需要3位来表示状态</span><span class="token comment" spellcheck="true">// 高3位用来表示线程池的状态，剩余的29位用来表示线程的个数</span><span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span>RUNNING<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT_BITS <span class="token operator">=</span> Integer<span class="token punctuation">.</span>SIZE <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// runState is stored in the high-order bits</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Packing and unpacking ctl</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span>CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> CAPACITY<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 当前线程的个数</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> wc<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> rs <span class="token operator">|</span> wc<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>开启线程源码分析：（需要根据状态判断是否需要新开一个线程）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ThreadPoolExecutor#execute</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>    retry<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>               firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 多个线程执行这行代码，只有一个成功</span>                <span class="token keyword">break</span> retry<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结束外层循环，执行下面的创建线程</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 状态改变去执行外层循环，没改变执行当前循环</span>            <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 假设核心线程数是10，已有线程数9，这个时候有两个任务进来，结果是一个创建线程一个入队</span>    <span class="token comment" spellcheck="true">// 上面的compareAndIncrementWorkerCount成功，会创建一个新的线程执行任务</span>    <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                    <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                        largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                    workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>            <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ThreadPoolExecutor#execute</code>方法源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Executes the given task sometime in the future.  The task * may execute in a new thread or in an existing pooled thread. * * If the task cannot be submitted for execution, either because this * executor has been shutdown or because its capacity has been reached, * the task is handled by the current {@code RejectedExecutionHandler}. * * @param command the task to execute * @throws RejectedExecutionException at discretion of *         {@code RejectedExecutionHandler}, if the task *         cannot be accepted for execution * @throws NullPointerException if {@code command} is null */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Proceed in 3 steps:     *     * 1. If fewer than corePoolSize threads are running, try to     * start a new thread with the given command as its first     * task.  The call to addWorker atomically checks runState and     * workerCount, and so prevents false alarms that would add     * threads when it shouldn't, by returning false.     *     * 2. If a task can be successfully queued, then we still need     * to double-check whether we should have added a thread     * (because existing ones died since last checking) or that     * the pool shut down since entry into this method. So we     * recheck state and if necessary roll back the enqueuing if     * stopped, or start a new thread if there are none.     *     * 3. If we cannot queue task, then we try to add a new     * thread.  If it fails, we know we are shut down or saturated     * and so reject the task.     */</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//小于核心线程数创建线程。并发CAS成功创建，失败入队</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//运行态，入队</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//被其他线程修改线程池状态，移除</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//核心线程允许销毁的情况，该判断可能成功</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//入队失败，创建线程直到最大线程数，或拒绝</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>shutdown方法（中断空闲的线程）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ThreadPoolExecutor#shutdown</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span>SHUTDOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hook for ScheduledThreadPoolExecutor</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ThreadPoolExecutor#interruptIdleWorkers</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ThreadPoolExecutor#interruptIdleWorkers，onlyOne is false</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> onlyOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Worker w <span class="token operator">:</span> workers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加锁成功表示空闲线程</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>onlyOne<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>shutdownNow方法（中断所有的线程）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ThreadPoolExecutor#shutdownNow</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> tasks<span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tasks <span class="token operator">=</span> <span class="token function">drainQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tasks<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ThreadPoolExecutor#interruptWorkers</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Worker w <span class="token operator">:</span> workers<span class="token punctuation">)</span>            w<span class="token punctuation">.</span><span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ThreadPoolExecutor#Worker#interruptIfStarted</span><span class="token keyword">void</span> <span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> thread<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>mainLock</p><p>全局锁，用到Workers的地方添加这把锁。保证操作的原子性，不发生幻读</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-线程池</title>
      <link href="/posts/cp-family/15/"/>
      <url>/posts/cp-family/15/</url>
      
        <content type="html"><![CDATA[<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p><strong>为什么需要线程池？</strong></p><p>每次新开线程去执行任务，运行完任务销毁线程，都会消耗资源（操作系统级别的线程）</p><p>线程池就可以提前创建线程、保留线程，节约资源、节省掉开辟线程和销毁线程的消耗、提高效率</p><span id="more"></span><p><strong>如何设置线程池的核心线程数和最大线程数？</strong></p><p>CPU密集型任务：依靠CPU去进行计算。<font color="red">线程池开CPU核心数+1个线程（任务线程中断/阻塞的情况，保证CPU仍然有任务执行，充分压榨CPU的性能所以+1）</font></p><p>IO密集型任务：网络相关，文件IO，网络IO，磁盘IO。例：等待MySQL返回结果，等待接口返回响应；等待阻塞时不需要用到CPU。理论上执行IO的时间越长，可以开辟更多的线程。<font color="red">线程数和IO时间有关，和CPU核数无关</font></p><p>混合任务：根据业务场景拆分</p><p><font color="red">理论上：线程数 = CPU核心数 * (1 + 线程等待时间/线程运行总时间)</font></p><p>通常先计算出理论的线程数，再去压测尽量模拟生产环境，得到最优的线程数。</p><p><strong>线程池参数设置？</strong></p><p>队列大小：队列必须是<font color="red">阻塞队列</font>，<font color="red">能容忍最多几秒拿到结果，能接受的最多的排队时间</font>，根据任务平均执行时间计算。（假设通过压测得到最优线程数为100，平均任务执行时间1s，也就是说1s可以处理完100个任务。这种情况下，队列长度如果设置500，就代表从进入队列到拿到结果最多要经历5s的时间，等待5s可以接受就能设置队列长度为500，接受不了就必须砍掉队列长度，根据实际容忍排队时间来设置队列长度）</p><p>核心线程数：假设通过压测得到最优线程数为500，核心业务/请求数多的可以设置为500；其他业务/几分钟请求一次这种，可以设置20或者其他，设置小一些没关系</p><p>最大线程数：假设通过压测得到最优线程数为500，可以设置最大线程数为500，也可以设置其他压测结果ok的。</p><p>最大空闲时间：1分钟，半分钟都可以</p><p><strong>ThreadPoolExecutor中执行任务的方法？</strong></p><p>1、void execute(Runnable command)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ThreadPoolExecutor#execute</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Proceed in 3 steps:     *     * 1. If fewer than corePoolSize threads are running, try to     * start a new thread with the given command as its first     * task.  The call to addWorker atomically checks runState and     * workerCount, and so prevents false alarms that would add     * threads when it shouldn't, by returning false.     *     * 2. If a task can be successfully queued, then we still need     * to double-check whether we should have added a thread     * (because existing ones died since last checking) or that     * the pool shut down since entry into this method. So we     * recheck state and if necessary roll back the enqueuing if     * stopped, or start a new thread if there are none.     *     * 3. If we cannot queue task, then we try to add a new     * thread.  If it fails, we know we are shut down or saturated     * and so reject the task.     */</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、Future submit(Runnable task) </p><p><font color="red">submit中最终还是调用的execute()方法，区别是会返回一个Future对象，用来获取任务执行结果</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ThreadPoolExecutor extends AbstractExecutorService</span><span class="token comment" spellcheck="true">// AbstractExecutorService#submit</span><span class="token keyword">public</span> Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RunnableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> ftask <span class="token operator">=</span> <span class="token function">newTaskFor</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execute</span><span class="token punctuation">(</span>ftask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ftask<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>execute(Runnable command)方法执行步骤：</strong></p><p><img src="/images/cp/tp-1.png" alt="tp-1"></p><p><font color="red">注意：提交一个Runnable时，不管当前线程池中的线程是否空闲，只要数量小于核心线程数就会创建新线程。 </font></p><p><font color="red">注意：ThreadPoolExecutor相当于是非公平的，比如队列满了之后提交的Runnable可能会比正在排队的Runnable先执行。</font></p><p>非公平体现在：线程数大于核心线程数，小于最大线程数，阻塞队列满的情况下，新添加的任务可能先于队列中的任务执行</p><p><strong>线程池中的线程是如何关闭的？</strong></p><p>1、Thread类提供了一个stop()，但是标记了@Deprecated，为什么不推荐用stop()方法来停掉线程呢？ </p><p>因为stop()方法太粗暴了，一旦调用了stop()，就会直接停掉线程，但是调用的时候根本不知道线程刚刚在做什么，任务做到哪一步了，这是很危险的。 </p><p>注意：stop()会释放线程占用的synchronized锁（不会自动释放ReentrantLock锁，这也是不建议用stop()的一个因素）。</p><p>2、非核心线程，超过最大空闲时间后，自动销毁关闭</p><p><font color="red">（注意：核心线程和非核心线程实际上没有区别，哪个线程CAS获取到锁，就会销毁哪个线程）</font></p><p>3、线程的内部发生异常时，线程关闭销毁。<font color="red">（销毁后小于核心线程数时，立刻补充创建一个空任务的线程）</font></p><p>4、推荐：<font color="red">自定义一个变量</font>（默认false，修改为true 后结束线程），或者通过<font color="red">中断 interrupt</font> 停掉线程，线程池就是用的 interrupt。自定义变量的好处是：线程自身可以控制到底要不要停止，何时停止</p><p><font color="red">注意：线程sleep过程中如果被中断了会接收到异常。</font></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ThreadPoolExecutor#shutdownNow</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> tasks<span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tasks <span class="token operator">=</span> <span class="token function">drainQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tasks<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ThreadPoolExecutor#interruptWorkers</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Worker w <span class="token operator">:</span> workers<span class="token punctuation">)</span>            w<span class="token punctuation">.</span><span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ThreadPoolExecutor#Worker#interruptIfStarted</span><span class="token keyword">void</span> <span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> thread<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>线程池为什么一定得是阻塞队列？</strong></p><p>线程池中的线程在运行过程中，执行完创建线程时绑定的第一个任务后，就会不断的从队列中获取任务并执行，那么如果队列中没有任务了，线程为了不自然消亡，就会阻塞在获取队列任务时，等着队列中有任务过来就会拿到任务从而去执行任务。</p><p>通过这种方法能最终确保，线程池中能保留指定个数的核心线程数</p><p><font color="red">workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</font><br><font color="red">workQueue.take();</font></p><p>线程阻塞在这里，核心线程可以保活；并且阻塞队列中有任务时，可以立刻取出来执行</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ThreadPoolExecutor#getTask</span><span class="token keyword">private</span> Runnable <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Did the last poll() time out?</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> STOP <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Are workers subject to culling?</span>        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">></span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">></span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Runnable r <span class="token operator">=</span> timed <span class="token operator">?</span>                workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">:</span>                workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>某个线程在从队列获取任务时，会判断是否使用超时阻塞获取，我们可以认为非核心线程会poll()，核 心线程会take()，非核心线程超过时间还没获取到任务后面就会自然消亡了。</p><p><strong>线程发生异常，会被移出线程池吗？</strong></p><p>会的，那有没有可能核心线程数在执行任务时都出错了，导致所有核心线程都被移出了线程池？ </p><p>在源码中，当执行任务时出现异常时，最终会执行processWorkerExit()，执行完这个方法后，当前线程也就自然消亡了，但是！processWorkerExit()方法中会额外再新增一个线程，这样就能维持住固定的核心线程数。</p><p><strong>Tomcat是如何自定义线程池的？</strong></p><p>Tomcat中用的线程池为org.apache.tomcat.util.threads.ThreadPoolExecutor，注意类名和JUC下的 一样，但是包名不一样。</p><p>Tomcat创建这个线程池：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    internalExecutor <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    TaskQueue taskqueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TaskThreadFactory tf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskThreadFactory</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-exec-"</span><span class="token punctuation">,</span> daemon<span class="token punctuation">,</span> <span class="token function">getThreadPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token function">getMinSpareThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getMaxThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>taskqueue<span class="token punctuation">,</span> tf<span class="token punctuation">)</span><span class="token punctuation">;</span>    taskqueue<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">)</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>TaskQueue的入队逻辑：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>Runnable o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//we can't do any checks</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果线程池的线程个数等于最大线程池数才入队。注意和JUC下面线程池入队的区别</span>    <span class="token comment" spellcheck="true">//we are maxed out on threads, simply queue the object</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> parent<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 正在处理的任务数小于线程池中的线程个数，会直接入队，而不会去创建线程。优先使用空闲线程</span>    <span class="token comment" spellcheck="true">//we have idle threads, just add it to the queue</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getSubmittedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 线程池的线程个数小于最大线程池数，返回false，入队失败。这里表示创建线程直到达到最大线程数</span>    <span class="token comment" spellcheck="true">//if we have less threads than maximum force creation of a new thread</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>parent<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//if we reached here, we need to add it to the queue</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>总结Tomcat的线程池：随着任务的提交，会优先创建线程，直到线程个数等于最大线程数才会入队。</p><p>创建Tomcat的ThreadPoolExecutor时，自动创建核心线程。JUC的ThreadPoolExecutor不会提前创建核心线程</p><p>当线程数小于最大线程数，并且存在空闲线程时，优先入队使用空闲线程来执行任务，充分利用线程资源</p><p><strong>思考：线程池的五种状态是如何流转的？</strong></p><p><strong>总结：</strong> </p><p>1、CPU密集型任务：CPU核心数+1，这样既能充分利用CPU，也不至于有太多的上下文切换成本 </p><p>2、IO型任务：建议压测，或者先用公式计算出一个理论值（理论值通常都比较小） </p><p>3、对于核心业务（访问频率高），可以把核心线程数设置为我们压测出来的结果，最大线程数可以等于核心线程数，或者大一点点，比如我们压测时可能会发现500个线程最佳，但是600个线程时也还行，此时600就可以为最大线程数 </p><p>4、对于非核心业务（访问频率不高），核心线程数可以比较小，避免操作系统去维护不必要的线程，最大线程数可以设置为我们计算或压测出来的结果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-阻塞队列二</title>
      <link href="/posts/cp-family/14/"/>
      <url>/posts/cp-family/14/</url>
      
        <content type="html"><![CDATA[<h2 id="阻塞队列介绍"><a href="#阻塞队列介绍" class="headerlink" title="阻塞队列介绍"></a>阻塞队列介绍</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>先进先出的线性表；一端进行插入，另一端进行删除；允许出队的一端为队头，允许入队的一端为队尾</p><p>包括数组、链表、延迟队列，天然适合生产者和消费者的模式</p><span id="more"></span><h3 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h3><p><strong>无界阻塞队列，可以指定容量，默认为 Integer.MAX_VALUE，先进先出，存取互不干扰</strong></p><p><font color="red">由于默认值特别大，也被称作无界队列，但是如果没有剩余内存，会抛出OOM错误。所以为了避免队列过大造成机器负载或内存爆满，使用时建议手动传队列大小</font></p><p>数据结构：链表。可以指定容量，默认为Integer.MAX_VALUE，内部类 Node 存储元素</p><p>锁分离：存取互不干扰，存取操作的是不同的Node对象。takeLock（取Node节点保证前驱后继不会乱）、putLock（存Node节点保证前驱后继不会乱）</p><p>阻塞对象：notEmpty（出队：队列count=0，无元素可取时，阻塞在该对象上）、notFull（入队：队列count=capacity，放不进去元素时，阻塞在该对象上）</p><p>入队：队尾入队，由last指针记录</p><p>出队：队首出队，由head指针记录</p><p>先进先出</p><p><font color="red">线程池中为什么使用LinkedBlockingQueue而不用ArrayBlockingQueue？</font></p><p>锁分离：LinkedBlockingQueue入队和出队是两把锁，存取元素互不干扰</p><h4 id="LinkedBlockingQueue使用"><a href="#LinkedBlockingQueue使用" class="headerlink" title="LinkedBlockingQueue使用"></a>LinkedBlockingQueue使用</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//指定队列的大小创建有界队列</span>BlockingQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> boundedQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无界队列</span>BlockingQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> unboundedQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="LinkedBlockingQueue原理"><a href="#LinkedBlockingQueue原理" class="headerlink" title="LinkedBlockingQueue原理"></a>LinkedBlockingQueue原理</h4><p>LinkedBlockingQueue内部由单链表实现，只能从head取元素，从tail添加元素。</p><p>LinkedBlockingQueue采用两把锁的锁分离技术实现入队出队互不阻塞，添加元素和获取元素都有独立的锁，也就是说LinkedBlockingQueue是读写分离的，读写操作可以并行执行。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 容量,指定容量就是有界队列</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 元素数量</span><span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 链表头  本身是不存储任何元素的，初始化时item指向null</span><span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 链表尾</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> last<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// take锁   锁分离，提高效率</span><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// notEmpty条件</span><span class="token comment" spellcheck="true">// 当队列无元素时，take锁会阻塞在notEmpty条件上，等待其它线程唤醒</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty <span class="token operator">=</span> takeLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// put锁</span><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// notFull条件</span><span class="token comment" spellcheck="true">// 当队列满了时，put锁会阻塞在notFull上，等待其它线程唤醒</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull <span class="token operator">=</span> putLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//典型的单链表结构</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    E item<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//存储元素</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//后继节点    单链表结构</span>    <span class="token function">Node</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span> item <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果没传容量，就使用最大int值初始化其容量</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化head和last指针为空值节点</span>    last <span class="token operator">=</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="入队put方法"><a href="#入队put方法" class="headerlink" title="入队put方法"></a>入队put方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不允许null元素</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新建一个节点</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putLock<span class="token punctuation">;</span>    <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用put锁加锁</span>    putLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果队列满了，就阻塞在notFull上等待被其它线程唤醒（阻塞生产者线程）</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 队列不满，就入队</span>        <span class="token function">enqueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 队列长度加1，返回原值</span>        <span class="token comment" spellcheck="true">// 如果现队列长度小于容量，notFull条件队列转同步队列，准备唤醒一个阻塞在notFull条件上的线程(可以继续入队) </span>        <span class="token comment" spellcheck="true">// 这里为啥要唤醒一下呢？</span>        <span class="token comment" spellcheck="true">// 因为可能有很多线程阻塞在notFull这个条件上，而取元素时只有取之前队列是满的才会唤醒notFull，此处不用等到取元素时才唤醒</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span>            notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        putLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 真正唤醒生产者线程</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果原队列长度为0，现在加了一个元素后立即唤醒阻塞在notEmpty上的线程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">signalNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 直接加到last后面,last指向入队元素</span>    last <span class="token operator">=</span> last<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">signalNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>takeLock<span class="token punctuation">;</span>     takeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加take锁</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>          notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// notEmpty条件队列转同步队列，准备唤醒阻塞在notEmpty上的线程</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 真正唤醒消费者线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="出队take方法"><a href="#出队take方法" class="headerlink" title="出队take方法"></a>出队take方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    E x<span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> AtomicInteger count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock takeLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>takeLock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用takeLock加锁</span>    takeLock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果队列无元素，则阻塞在notEmpty条件上（消费者线程阻塞）</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 否则，出队</span>        x <span class="token operator">=</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//长度-1，返回原值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果取之前队列长度大于1，notEmpty条件队列转同步队列，准备唤醒阻塞在notEmpty上的线程，原因与入队同理</span>            notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        takeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 真正唤醒消费者线程</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 为什么队列是满的才唤醒阻塞在notFull上的线程呢？</span>    <span class="token comment" spellcheck="true">// 因为唤醒是需要加putLock的，这是为了减少锁的次数，所以，这里索性在放完元素就检测一下，未满就唤醒其它notFull上的线程</span>    <span class="token comment" spellcheck="true">// 这也是锁分离带来的代价</span>    <span class="token comment" spellcheck="true">// 如果取之前队列长度等于容量（已满），则唤醒阻塞在notFull的线程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> capacity<span class="token punctuation">)</span>        <span class="token function">signalNotFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// head节点本身是不存储任何元素的</span>    <span class="token comment" spellcheck="true">// 这里把head删除，并把head下一个节点作为新的值</span>    <span class="token comment" spellcheck="true">// 并把其值置空，返回原来的值</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>    Node<span class="token operator">&lt;</span>E<span class="token operator">></span> first <span class="token operator">=</span> h<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    h<span class="token punctuation">.</span>next <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方便GC</span>    head <span class="token operator">=</span> first<span class="token punctuation">;</span>    E x <span class="token operator">=</span> first<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    first<span class="token punctuation">.</span>item <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">signalNotFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock putLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>putLock<span class="token punctuation">;</span>    putLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// notFull条件队列转同步队列，准备唤醒阻塞在notFull上的线程</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        putLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解锁，这才会真正的唤醒生产者线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="LinkedBlockingQueue与ArrayBlockingQueue对比"><a href="#LinkedBlockingQueue与ArrayBlockingQueue对比" class="headerlink" title="LinkedBlockingQueue与ArrayBlockingQueue对比"></a>LinkedBlockingQueue与ArrayBlockingQueue对比</h3><p>LinkedBlockingQueue是一个阻塞队列，内部由两个ReentrantLock来实现出入队列的线程安 全，由各自的Condition对象的await和signal来实现等待和唤醒功能。它和ArrayBlockingQueue的 不同点在于：</p><ul><li>队列大小不同。ArrayBlockingQueue是有界队列必须初始化容量；LinkedBlockingQueue指定容量是有界，不指定容量是无界队列，无界情况可能会OOM（添加速度大于移除速度时）</li><li><font color="red">数据存储容量不同。</font>ArrayBlockingQueue是数组结构；LinkedBlockingQueue是Node节点的链表结构</li><li>ArrayBlockingQueue在插入和删除时，不需要销毁额外的对象实例；LinkedBlockingQueue会产生额外的Node对象，在长时间高效并发处理大批量数据时，对GC可能造成较大影响</li><li>实现队列添加或移除的锁不一样。<font color="red">ArrayBlockingQueue中锁没有分离</font>，添加和移除是同一把ReenterLock锁；<font color="red">LinkedBlockingQueue是锁分离，添加采用的是putLock，移除采用的是takeLock，大大提高队列的吞吐量</font>，高并发的场景下可以并行操作。</li></ul><h3 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h3><p>使用优先级队列实现的无界阻塞队列，<font color="red">支持延时获取元素</font></p><p>数据结构：用PriorityQueue存储，且元素必须实现 Delayed 接口，与PriorityBlockingQueue类似，没有阻塞</p><p>特点：<font color="red">不是先进先出，而是按照延迟时间的长短来排序，下一个即将执行的任务会排到队列的最前面。</font></p><p>锁：ReentrantLock</p><p>阻塞对象：Condition available</p><p>入队：不阻塞，无界队列，与优先级队列入队相同，available</p><p>出队：为空时阻塞；检查堆顶元素过期时间，小于等于0则出队，大于0说明没过期则阻塞；判断leader线程是否为空（为了保证优先级），不为空（已有线程阻塞）直接阻塞，为空则将当前线程置为leader，并按照过期时间进行阻塞</p><p>应用场景：</p><ul><li>商城订单超时关闭，淘宝订单业务:下单之后如果三十分钟之内没有付款就自动取消订单</li><li>异步短信通知功能，饿了么订餐通知:下单成功后60s之后给用户发送短信通知</li><li>关闭空闲连接。服务器中，有很多客户端的连接，空闲一段时间之后需要关闭</li><li>缓存过期清除。缓存中的对象，超过了存活时间，需要从缓存中移出</li><li>任务超时处理。在网络协议滑动窗口请求应答式交互时，处理超时未响应的请求等</li></ul><p>DelayQueue是无界队列，放入的元素必须实现 Delayed 接口，而 Delayed 接口又继承了 Comparable 接口，所以自然就拥有了比较和排序的能力：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delayed</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Delayed<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//getDelay 方法返回的是“还剩下多长的延迟时间才会被执行”，</span>    <span class="token comment" spellcheck="true">//如果返回 0 或者负数则代表任务已过期。</span>    <span class="token comment" spellcheck="true">//元素会根据延迟时间的长短被放到队列的不同位置，越靠近队列头代表越早过期。</span>    <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="DelayQueue使用"><a href="#DelayQueue使用" class="headerlink" title="DelayQueue使用"></a>DelayQueue使用</h4><p><strong>DelayQueue 实现延迟订单</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueueExample</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException    <span class="token punctuation">{</span>        DelayQueue<span class="token operator">&lt;</span>Order<span class="token operator">></span> delayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 添加三个订单，分别延迟 5 秒、2 秒和 3 秒</span>        delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"order1"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"order2"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"order3"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 循环取出订单，直到所有订单都被处理完毕</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>delayQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Order order <span class="token operator">=</span> delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理订单："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> String orderId<span class="token punctuation">;</span>                <span class="token keyword">private</span> <span class="token keyword">long</span> createTime<span class="token punctuation">;</span>                <span class="token keyword">private</span> <span class="token keyword">long</span> delayTime<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">,</span> <span class="token keyword">long</span> createTime<span class="token punctuation">,</span> <span class="token keyword">long</span> delayTime<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>createTime <span class="token operator">=</span> createTime<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>delayTime <span class="token operator">=</span> delayTime<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> String <span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> orderId<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">long</span> diff <span class="token operator">=</span> createTime <span class="token operator">+</span> delayTime <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>diff<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed o<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">long</span> diff <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">-</span> o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Long<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>diff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="DelayQueue原理"><a href="#DelayQueue原理" class="headerlink" title="DelayQueue原理"></a>DelayQueue原理</h4><p><strong>数据结构</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用于保证队列操作的线程安全</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 优先级队列,存储元素，用于保证延迟低的优先执行</span><span class="token keyword">private</span> <span class="token keyword">final</span> PriorityQueue<span class="token operator">&lt;</span>E<span class="token operator">></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用于标记当前是否有线程在排队（仅用于取元素时） leader 指向的是第一个从队列获取元素阻塞的线程</span><span class="token keyword">private</span> Thread leader <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 条件，用于表示现在是否有可取的元素   当新元素到达，或新线程可能需要成为leader时被通知</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition available <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">DelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">DelayQueue</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>入队put方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 入队</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若入队的元素位于队列头部，说明当前元素延迟最小</span>            <span class="token comment" spellcheck="true">// 将 leader 置空</span>            leader <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// available条件队列转同步队列,准备唤醒阻塞在available上的线程</span>            available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解锁，真正唤醒阻塞的线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>出队take方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            E first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取出堆顶元素( 最早过期的元素，但是不弹出对象)   </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果堆顶元素为空，说明队列中还没有元素，直接阻塞等待</span>                available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前线程无限期等待，直到被唤醒，并且释放锁。</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 堆顶元素的到期时间             </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果小于0说明已到期，直接调用poll()方法弹出堆顶元素</span>                    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 如果delay大于0 ，则下面要阻塞了</span>                <span class="token comment" spellcheck="true">// 将first置为空方便gc</span>                first <span class="token operator">=</span> null<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 如果有线程争抢的Leader线程，则进行无限期等待。</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 如果leader为null，把当前线程赋值给它</span>                    Thread thisThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 等待剩余等待时间</span>                        available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 如果leader还是当前线程就把它置为空，让其它线程有机会获取元素</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span>                            leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 成功出队后，如果leader为空且堆顶还有元素，就唤醒下一个等待的线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// available条件队列转同步队列,准备唤醒阻塞在available上的线程</span>            available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解锁，真正唤醒阻塞的线程</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="如何选择适合的阻塞队列"><a href="#如何选择适合的阻塞队列" class="headerlink" title="如何选择适合的阻塞队列"></a>如何选择适合的阻塞队列</h3><h4 id="选择策略"><a href="#选择策略" class="headerlink" title="选择策略"></a>选择策略</h4><ul><li>功能：是否需要优先级排序、延迟执行等</li><li>容量：<font color="red">需要根据任务数量来推算出合适的容量</font></li><li>能否扩容：业务有高峰期、低谷期。根据是否需要扩容，选择合适的队列</li><li>内存结构：数组/链表。数组没有链表的节点，空间利用率更高</li><li>性能：数组结构空间利用率更高；链表结构两把锁并发性能更高；直接传递优先考虑 SynchronousQueue</li></ul><h4 id="线程池对于阻塞队列的选择"><a href="#线程池对于阻塞队列的选择" class="headerlink" title="线程池对于阻塞队列的选择"></a>线程池对于阻塞队列的选择</h4><p>线程池有很多种，不同种类的线程池会根据自己的特点，来选择适合自己的阻塞队列。</p><p>Executors类下的线程池类型：</p><ul><li>FixedThreadPool（SingleThreadExecutor 同理）选取的是 LinkedBlockingQueue</li><li>CachedThreadPool 选取的是 SynchronousQueue</li><li>ScheduledThreadPool（SingleThreadScheduledExecutor同理）选取的是延迟队列</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-阻塞队列</title>
      <link href="/posts/cp-family/13/"/>
      <url>/posts/cp-family/13/</url>
      
        <content type="html"><![CDATA[<h2 id="阻塞队列介绍"><a href="#阻塞队列介绍" class="headerlink" title="阻塞队列介绍"></a>阻塞队列介绍</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>先进先出的线性表；一端进行插入，另一端进行删除；允许出队的一端为队头，允许入队的一端为队尾</p><p>包括数组、链表、延迟队列，天然适合生产者和消费者的模式</p><span id="more"></span><h3 id="Queue接口"><a href="#Queue接口" class="headerlink" title="Queue接口"></a>Queue接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/** * 添加一个元素，添加成功返回true, 如果队列满了，就会抛出异常 */</span><span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 添加一个元素，添加成功返回true, 如果队列满了，返回false */</span><span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 返回并删除队首元素，队列为空则抛出异常 */</span>E <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 返回并删除队首元素，队列为空则返回null */</span>E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 返回队首元素，但不移除，队列为空则抛出异常 */</span>E <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 获取队首元素，但不移除，队列为空则返回null */</span>E <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>阻塞队列 (BlockingQueue)是Java util.concurrent包下重要的数据结构，BlockingQueue提供了<strong>线程安全</strong>的队列访问方式。</p><p><font color="red">阻塞队列插入时，如果队列已满，线程进入阻塞直到队列非满</font></p><p><font color="red">阻塞队列获取时，如果队列为空，线程进入阻塞直到队列非空</font></p><h3 id="BlockingQueue接口"><a href="#BlockingQueue接口" class="headerlink" title="BlockingQueue接口"></a>BlockingQueue接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlockingQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/** * Inserts the specified element into this queue if it is possible to do * so immediately without violating capacity restrictions, returning * {@code true} upon success and throwing an * {@code IllegalStateException} if no space is currently available. * When using a capacity-restricted queue, it is generally preferable to * use {@link #offer(Object) offer}. * * @param e the element to add * @return {@code true} (as specified by {@link Collection#add}) * @throws IllegalStateException if the element cannot be added at this *         time due to capacity restrictions * @throws ClassCastException if the class of the specified element *         prevents it from being added to this queue * @throws NullPointerException if the specified element is null * @throws IllegalArgumentException if some property of the specified *         element prevents it from being added to this queue */</span><span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Inserts the specified element into this queue if it is possible to do * so immediately without violating capacity restrictions, returning * {@code true} upon success and {@code false} if no space is currently * available.  When using a capacity-restricted queue, this method is * generally preferable to {@link #add}, which can fail to insert an * element only by throwing an exception. * * @param e the element to add * @return {@code true} if the element was added to this queue, else *         {@code false} * @throws ClassCastException if the class of the specified element *         prevents it from being added to this queue * @throws NullPointerException if the specified element is null * @throws IllegalArgumentException if some property of the specified *         element prevents it from being added to this queue */</span><span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Inserts the specified element into this queue, waiting if necessary * for space to become available. * * @param e the element to add * @throws InterruptedException if interrupted while waiting * @throws ClassCastException if the class of the specified element *         prevents it from being added to this queue * @throws NullPointerException if the specified element is null * @throws IllegalArgumentException if some property of the specified *         element prevents it from being added to this queue */</span><span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Inserts the specified element into this queue, waiting up to the * specified wait time if necessary for space to become available. * * @param e the element to add * @param timeout how long to wait before giving up, in units of *        {@code unit} * @param unit a {@code TimeUnit} determining how to interpret the *        {@code timeout} parameter * @return {@code true} if successful, or {@code false} if *         the specified waiting time elapses before space is available * @throws InterruptedException if interrupted while waiting * @throws ClassCastException if the class of the specified element *         prevents it from being added to this queue * @throws NullPointerException if the specified element is null * @throws IllegalArgumentException if some property of the specified *         element prevents it from being added to this queue */</span><span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Retrieves and removes the head of this queue, waiting if necessary * until an element becomes available. * * @return the head of this queue * @throws InterruptedException if interrupted while waiting */</span>E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Retrieves and removes the head of this queue, waiting up to the * specified wait time if necessary for an element to become available. * * @param timeout how long to wait before giving up, in units of *        {@code unit} * @param unit a {@code TimeUnit} determining how to interpret the *        {@code timeout} parameter * @return the head of this queue, or {@code null} if the *         specified waiting time elapses before an element is available * @throws InterruptedException if interrupted while waiting */</span>E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Returns the number of additional elements that this queue can ideally * (in the absence of memory or resource constraints) accept without * blocking, or {@code Integer.MAX_VALUE} if there is no intrinsic * limit. * * &lt;p>Note that you &lt;em>cannot&lt;/em> always tell if an attempt to insert * an element will succeed by inspecting {@code remainingCapacity} * because it may be the case that another thread is about to * insert or remove an element. * * @return the remaining capacity */</span><span class="token keyword">int</span> <span class="token function">remainingCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Removes a single instance of the specified element from this queue, * if it is present.  More formally, removes an element {@code e} such * that {@code o.equals(e)}, if this queue contains one or more such * elements. * Returns {@code true} if this queue contained the specified element * (or equivalently, if this queue changed as a result of the call). * * @param o element to be removed from this queue, if present * @return {@code true} if this queue changed as a result of the call * @throws ClassCastException if the class of the specified element *         is incompatible with this queue *         (&lt;a href="../Collection.html#optional-restrictions">optional&lt;/a>) * @throws NullPointerException if the specified element is null *         (&lt;a href="../Collection.html#optional-restrictions">optional&lt;/a>) */</span><span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>方法总结：</strong></p><table><thead><tr><th>方法</th><th>抛出异常</th><th>返回特定值</th><th>阻塞</th><th>阻塞特定时间</th></tr></thead><tbody><tr><td>入队</td><td>add(e)</td><td>offer(e)</td><td><font color="red">put(e)</font></td><td><font color="red">offer(e, time, unit)</font></td></tr><tr><td>出队</td><td>remove()</td><td>poll()</td><td><font color="red">take()</font></td><td><font color="red">poll(time, unit)</font></td></tr><tr><td>获取队首元素</td><td>element()</td><td>peek()</td><td>不支持</td><td>不支持</td></tr></tbody></table><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>1、线程池</p><p>线程池中的工作队列通常使用阻塞队列。线程池的任务数大于线程池容量时，再有新的任务就会保存到工作队列，线程池空出线程后从队列中取出任务处理；工作队列为空时，工作线程被阻塞。</p><p>2、生产、消费者模型</p><p>生产者向队列中添加元素，消费者从队列中取出元素。阻塞队列可以很好的解决生产者和消费者之间的问题，避免线程间的竞争和冲突。</p><p>3、消息队列</p><p>使用阻塞队列存储信息。消息队列可以实现异步通信，提高系统吞吐量和响应性能，高并发下消峰填谷，不同组件之间解耦，提高系统的可维护性和可扩展性。</p><p>4、缓存系统</p><p>使用阻塞队列存储缓存数据。<font color="red">使用阻塞队列可以避免并发更新缓存数据时的竞争和冲突。</font></p><p>5、并发任务处理</p><p>任务放入阻塞队列中，由多个线程从队列中获取后处理。阻塞队列可以避免多个线程同时处理同一个任务，并将任务的提交和执行解耦，提高系统的可维护性和可扩展性。</p><h3 id="JUC包下的阻塞队列"><a href="#JUC包下的阻塞队列" class="headerlink" title="JUC包下的阻塞队列"></a>JUC包下的阻塞队列</h3><p>BlockingQueue 接口的实现类都被放在了 juc 包中，它们的区别主要体现在存储结构上或对元素操作上的不同，但是对于take与put操作的原理却是类似的。</p><table><thead><tr><th><strong>队列</strong></th><th>描述</th></tr></thead><tbody><tr><td><font color="red">ArrayBlockingQueue</font></td><td>基于数组结构实现的一个有界阻塞队列</td></tr><tr><td><font color="red">LinkedBlockingQueue</font></td><td>基于链表结构实现的一个无界阻塞队列，指定容量为有界阻塞队列</td></tr><tr><td>PriorityBlockingQueue</td><td>支持按优先级排序的无界阻塞队列</td></tr><tr><td><font color="red">DelayQueue</font></td><td>基于优先级队列（PriorityBlockingQueue）实现的无界阻塞队列</td></tr><tr><td>SynchronousQueue</td><td>不存储元素的阻塞队列</td></tr><tr><td>LinkedTransferQueue</td><td>基于链表结构实现的一个无界阻塞队列</td></tr><tr><td>LinkedBlockingDeque</td><td>基于链表结构实现的一个双端阻塞队列</td></tr></tbody></table><h3 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h3><p><strong>有界阻塞队列，先进先出，存取相互排斥</strong></p><p>数据结构：静态数组。容量固定必须指定长度，没有扩容机制；没有元素的位置也占用空间，被 null 占位</p><p>锁：ReentrantLock。<font color="red">存取是同一把锁，操作的是同一个数组对象，存取互相排斥</font></p><p>阻塞对象：notEmpty（出队：队列count=0，无元素可取时，阻塞在该对象上）、notFull（入队：队列count=length，放不进去元素时，阻塞在该对象上）</p><p>入队：从队首开始添加元素，记录putIndex（到队尾时设置为0），唤醒notEmpty</p><p>出队：从队首开始取出元素，记录takeIndex（到队尾时设置为0），唤醒notFull</p><p><font color="red">两个指针都是从队首向队尾移动，保证队列的先进先出原则</font></p><p>ArrayBlockingQueue可以用于实现数据缓存、限流、生产者-消费者模式等各种应用。在生产者-消费者模型中使用时，<font color="red">如果生产速度和消费速度基本匹配的情况下，使用 ArrayBlockingQueue是个不错选择；</font>当如果生产速度远远大于消费速度，则会导致队列填满，大量生产线程被阻塞。</p><h4 id="ArrayBlockingQueue使用"><a href="#ArrayBlockingQueue使用" class="headerlink" title="ArrayBlockingQueue使用"></a>ArrayBlockingQueue使用</h4><pre class=" language-java"><code class="language-java">BlockingQueue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向队列中添加元素</span>Object object <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从队列中取出元素</span></code></pre><h4 id="ArrayBlockingQueue的原理"><a href="#ArrayBlockingQueue的原理" class="headerlink" title="ArrayBlockingQueue的原理"></a>ArrayBlockingQueue的原理</h4><p>ArrayBlockingQueue使用独占锁ReentrantLock实现线程安全，入队和出队操作使用同一个锁对象，也就是只能有一个线程可以进行入队或者出队操作；这也就意味着生产者和消费者无法并行操作，在高并发场景下会成为性能瓶颈。</p><p>数据结构：利用了Lock锁的Condition通知机制进行阻塞控制。核心：一把锁，两个条件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//数据元素数组</span><span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一个待取出元素索引</span><span class="token keyword">int</span> takeIndex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一个待添加元素索引</span><span class="token keyword">int</span> putIndex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//元素个数</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内部锁</span><span class="token keyword">final</span> ReentrantLock lock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消费者</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition notEmpty<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生产者</span><span class="token keyword">private</span> <span class="token keyword">final</span> Condition notFull<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//公平，非公平</span>    notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    notFull <span class="token operator">=</span>  lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>入队put方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//检查是否为空</span>    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加锁，如果线程中断抛出异常 </span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//阻塞队列已满，则将生产者挂起，等待消费者唤醒</span>       <span class="token comment" spellcheck="true">//设计注意点： 用while不用if是为了防止虚假唤醒</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//队列满了，使用notFull等待（生产者阻塞）</span>        <span class="token comment" spellcheck="true">// 入队</span>        <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 唤醒消费者线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>E x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//入队   使用的putIndex</span>    items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>         putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//设计的精髓： 环形数组，putIndex指针到数组尽头了，返回头部</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//notEmpty条件队列转同步队列，准备唤醒消费者线程，因为入队了一个元素，肯定不为空了</span>    notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>出队take方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加锁，如果线程中断抛出异常 </span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//如果队列为空，则消费者挂起</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//出队</span>        <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 唤醒生产者线程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> E <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    E x <span class="token operator">=</span> <span class="token punctuation">(</span>E<span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//取出takeIndex位置的元素</span>    items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设计的精髓： 环形数组，takeIndex 指针到数组尽头了，返回头部</span>    count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> null<span class="token punctuation">)</span>        itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//notFull条件队列转同步队列，准备唤醒生产者线程，此时队列有空位</span>    notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">思考： 为什么ArrayBlockingQueue对数组操作要设计成双指针？</font></p><p><img src="/images/cp/abq-1.png" alt="abq-1"></p><p>使用双指针的好处在于可以避免数组的复制操作。如果使用单指针，每次删除元素时需要将后面的元素全部向前移动，这样会导致时间复杂度为 O(n)。而使用双指针，我们可以直接将 takeIndex 指向下一个元素，而不需要将其前面的元素全部向前移动。同样地，插入新的元素时，我们可以直接将新元素插入到 putIndex 所指向的位置，而不需要将其后面的元素全部向后移动。<font color="red">这样可以使得插入和删除的时间复杂度都是 O(1) 级别，提高了队列的性能。</font></p><h3 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h3><p><strong>无界阻塞队列，可以指定容量，默认为 Integer.MAX_VALUE，先进先出，存取互不干扰</strong></p><p>数据结构：链表。可以指定容量，默认为Integer.MAX_VALUE，内部类 Node 存储元素</p><p>锁分离：存取互不干扰，存取操作的是不同的Node对象。takeLock（取Node节点保证前驱后继不会乱）、putLock（存Node节点保证前驱后继不会乱）</p><p>阻塞对象：notEmpty（出队：队列count=0，无元素可取时，阻塞在该对象上）、notFull（入队：队列count=capacity，放不进去元素时，阻塞在该对象上）</p><p>入队：队尾入队，由last指针记录</p><p>出队：队首出队，由head指针记录</p><p>先进先出</p><p><font color="red">线程池中为什么使用LinkedBlockingQueue而不用ArrayBlockingQueue？</font></p><p>锁分离：LinkedBlockingQueue入队和出队是两把锁，存取元素互不干扰</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-ReentrantLock源码</title>
      <link href="/posts/cp-family/12/"/>
      <url>/posts/cp-family/12/</url>
      
        <content type="html"><![CDATA[<h2 id="ReentrantLock源码分析"><a href="#ReentrantLock源码分析" class="headerlink" title="ReentrantLock源码分析"></a>ReentrantLock源码分析</h2><p>ReentrantLock是一种<strong>基于AQS框架</strong>的应用实现，是JDK中的一种线程并发访问的同步手段，它的功能类似于synchronized是一种<strong>互斥锁</strong>，可以<strong>保证线程安全</strong>。</p><span id="more"></span><p>ReentrantLock基本使用方式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// todo 业务</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span>    <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>源码重点：</p><p>1、公平和非公平锁，可重入锁是如何实现的</p><p>2、设计的精髓：并发场景下入队和出队操作是如何设计的</p><ul><li>线程竞争锁失败入队阻塞逻辑实现</li><li>释放锁的线程唤醒阻塞线程出队竞争锁的逻辑实现</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Inserts node into queue, initializing if necessary. See picture above. * @param node the node to insert * @return node's predecessor */</span><span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Must initialize</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 入队操作的初始化方法，多线程情况下只有一个线程能处理成功。CAS+自旋</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Wakes up node's successor, if one exists. * * @param node the node */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * If status is negative (i.e., possibly needing signal) try     * to clear in anticipation of signalling.  It is OK if this     * fails or if status is changed by waiting thread.     */</span>    <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Thread to unpark is held in successor, which is normally     * just the next node.  But if cancelled or apparently null,     * traverse backwards from tail to find the actual     * non-cancelled successor.     */</span>    Node s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                s <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> null<span class="token punctuation">)</span>        LockSupport<span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>复习AQS</p><p>管程：操作系统层面必须实现的。互斥、同步协作</p><p>管程模型MESA：</p><p>共享变量：加锁标记/资源的标记。0/1表示上锁状态（互斥场景），也可以表示资源数3（同步场景）</p><p>入口等待队列：存放所有获取锁失败的线程，获取锁的线程释放锁以后从这个队列唤醒线程</p><p>条件变量：不同条件场景。比如消费者队列用完了进入阻塞，生产者线程写满了进入阻塞</p><p>条件等待队列：根据条件阻塞的线程放在这个队列里，通过条件队列可以控制线程执行顺序（实现同步）</p><p>方法：wait()，notify()，notifyAll()</p><p>实现一个独占锁关键点：</p><p>1、state 是否加锁，0加锁成功、1加锁失败。CAS保证只有一个线程成功</p><p>2、等待队列 存放竞争锁失败的线程</p><p>3、等待唤醒机制 </p><p><code>synchronized + Object.wait()/Object.notify()/Object.notifyAll()</code></p><p>4、notify随机唤醒不稳定，唤醒某一个线程 LockSupport.park/unpark，入参是线程</p><p>5、公共部分 条件/入口等待队列的入队和出队操作、CAS操作。模板模式</p><p>AbstractQueuedSynchronizer（简称 AQS）抽象队列同步器：实现状态修改、入队、出队等。</p><p>state：是否加锁状态，资源可用状态</p><p>独占/共享模式，实现CAS，等待队列，公平/非公平</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-AQS独占锁</title>
      <link href="/posts/cp-family/11/"/>
      <url>/posts/cp-family/11/</url>
      
        <content type="html"><![CDATA[<h2 id="深入理解AQS独占锁"><a href="#深入理解AQS独占锁" class="headerlink" title="深入理解AQS独占锁"></a>深入理解AQS独占锁</h2><p><font color="red">思考：如何设计独占锁</font></p><span id="more"></span><h3 id="管程-Java同步的设计思想"><a href="#管程-Java同步的设计思想" class="headerlink" title="管程 Java同步的设计思想"></a>管程 Java同步的设计思想</h3><p>管程：指的是<strong>管理共享变量</strong>以及<strong>对共享变量的操作过程</strong>，让他们支持并发。 </p><p>互斥：同一时刻只允许一个线程访问共享资源。</p><p>同步：线程之间如何通信、协作。 </p><h3 id="MESA模型"><a href="#MESA模型" class="headerlink" title="MESA模型"></a>MESA模型</h3><p>在管程的发展史上，先后出现过三种不同的管程模型，分别是Hasen模型、Hoare模型和MESA模型。现在正在广泛使用的是MESA模型。 </p><p><img src="/images/cp/aqs-1.png" alt="aqs-1"></p><p>管程中引入了条件变量的概念，而且每个条件变量都对应有一个等待队列。条件变量和等待队列的作用是解决线程之间的同步问题。</p><p>Java针对管程的两种实现</p><ul><li>synchronized + Object.wait(), Object.notify(),  Object.notifyAll()，对象的Monitor机制</li><li>基于AQS抽象队列同步器，LockSupport.park(), LockSupport.unpark()</li></ul><h3 id="AQS原理分析"><a href="#AQS原理分析" class="headerlink" title="AQS原理分析"></a>AQS原理分析</h3><h4 id="什么是AQS"><a href="#什么是AQS" class="headerlink" title="什么是AQS"></a>什么是AQS</h4><p>java.util.concurrent包中的大多数同步器实现都是围绕着共同的基础行为，比如等待队列、条件队列、独占获取、共享获取等，而这些行为的抽象就是基于<font color="red">AbstractQueuedSynchronizer（简称AQS）</font>实现的，AQS是一个抽象同步框架，可以用来实现一个依赖状态的同步器。</p><p> JDK中提供的大多数的同步器如Lock, Latch, Barrier等，都是基于AQS框架来实现的</p><ul><li><p>一般是通过一个内部类Sync继承 AQS，<font color="red">extends AbstractQueuedSynchronizer</font></p></li><li><p>将同步器所有调用都映射到Sync对应的方法，<font color="red">重写方法tryAcquire、tryRelease等</font></p></li></ul><p>AQS具备的特性： </p><ul><li><p>阻塞等待队列</p></li><li><p>共享/独占 </p></li><li><p>公平/非公平 </p></li><li><p>可重入 </p></li><li><p>允许中断</p></li></ul><h4 id="AQS核心结构"><a href="#AQS核心结构" class="headerlink" title="AQS核心结构"></a>AQS核心结构</h4><p>AQS内部维护属性<font color="red">volatile int state</font></p><ul><li>state表示资源的可用状态</li></ul><p>State三种访问方式：</p><ul><li>getState() </li><li>setState() </li><li><font color="red">compareAndSetState()</font></li></ul><p>定义了两种资源访问方式： </p><ul><li>Exclusive-独占，只有一个线程能执行，如ReentrantLock</li><li>Share-共享，多个线程可以同时执行，如Semaphore/CountDownLatch</li></ul><p>AQS实现时主要实现以下几种方法：</p><ul><li>isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。</li><li><font color="red">tryAcquire(int)：独占方式。</font>尝试获取资源，成功则返回true，失败则返回false。</li><li><font color="red">tryRelease(int)：独占方式。</font>尝试释放资源，成功则返回true，失败则返回false。</li><li><font color="red">tryAcquireShared(int)：共享方式。</font>尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li><li><font color="red">tryReleaseShared(int)：共享方式。</font>尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</li></ul><h4 id="AQS定义两种队列"><a href="#AQS定义两种队列" class="headerlink" title="AQS定义两种队列"></a>AQS定义两种队列</h4><ul><li>同步等待队列：<font color="red">主要用于维护获取锁失败时入队的线程。</font></li><li>条件等待队列：<font color="red">调用await()的时候会释放锁，然后线程会加入到条件队列，调用signal()唤醒的时候会把条件队列中的线程节点移动到同步队列中，等待再次获得锁。</font></li></ul><p>AQS 定义了5个队列中节点状态：</p><ol><li>值为0，初始化状态，表示当前节点在sync队列中，等待着获取锁。</li><li>CANCELLED，值为1，表示当前的线程被取消；</li><li>SIGNAL，值为-1，表示当前节点的后继节点包含的线程需要运行，也就是unpark；</li><li>CONDITION，值为-2，表示当前节点在等待condition，也就是在condition队列中；</li><li>PROPAGATE，值为-3，表示当前场景下后续的acquireShared能够得以执行；</li></ol><h4 id="同步等待队列"><a href="#同步等待队列" class="headerlink" title="同步等待队列"></a>同步等待队列</h4><p>AQS当中的同步等待队列也称CLH队列，CLH队列是Craig、Landin、Hagersten三人发明的一种<font color="red">基于双向链表数据结构的队列，是FIFO先进先出线程等待队列</font>，Java中的CLH队列是原CLH队列的一个变种，线程由原自旋机制改为阻塞机制。</p><p>AQS 依赖CLH同步队列来完成同步状态的管理：</p><ul><li>当前线程如果获取同步状态失败时，AQS则会将当前线程已经等待状态等信息构造成一个节点（Node）并将其加入到CLH同步队列，同时会阻塞当前线程</li><li>当同步状态释放时，会把首节点唤醒（公平锁），使其再次尝试获取同步状态。</li><li>通过signal或signalAll将条件队列中的节点转移到同步队列。（<font color="red">由条件队列转化为同步队列</font>）</li></ul><p><img src="/images/cp/aqs-2.png" alt="aqs-2"></p><h4 id="条件等待队列"><a href="#条件等待队列" class="headerlink" title="条件等待队列"></a>条件等待队列</h4><p>AQS中条件队列是使用单向列表保存的，用nextWaiter来连接:</p><ul><li>调用await方法阻塞线程；</li><li>当前线程存在于同步队列的头结点，调用await方法进行阻塞（<font color="red">从同步队列转化到条件队列</font>）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-JUC并发工具类二</title>
      <link href="/posts/cp-family/10/"/>
      <url>/posts/cp-family/10/</url>
      
        <content type="html"><![CDATA[<h2 id="常用并发同步工具类的真实应用场景"><a href="#常用并发同步工具类的真实应用场景" class="headerlink" title="常用并发同步工具类的真实应用场景"></a>常用并发同步工具类的真实应用场景</h2><h3 id="CountDownLatch（闭锁）"><a href="#CountDownLatch（闭锁）" class="headerlink" title="CountDownLatch（闭锁）"></a>CountDownLatch（闭锁）</h3><p>描述：一个同步协助类，允许一个或多个线程等待，直到其他线程完成操作集。</p><p><font color="red">初始化时定义一个计数器count，每次调用countDown方法计数器减一，调用await方法阻塞直到计数值为0</font></p><span id="more"></span><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><p><strong>构造器</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Constructs a {@code CountDownLatch} initialized with the given count. * * @param count the number of times {@link #countDown} must be invoked *        before threads can pass through {@link #await} * @throws IllegalArgumentException if {@code count} is negative */</span><span class="token keyword">public</span> <span class="token function">CountDownLatch</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"count &lt; 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>常用方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 调用await()方法线程挂起，等待count为0继续执行</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 若等待timeout时长后，即使count没变0，也会继续执行</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireSharedNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// count减1 直到0</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync<span class="token punctuation">.</span><span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="CountDownLatch使用"><a href="#CountDownLatch使用" class="headerlink" title="CountDownLatch使用"></a>CountDownLatch使用</h4><p><strong>模拟百米赛跑</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// begin 代表裁判 初始为 1</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch begin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// end 代表玩家 初始为 8</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> CountDownLatch end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token annotation punctuation">@SneakyThrows</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 预备状态</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参赛者"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"已经准备好了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 等待裁判吹哨</span>                    begin<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 开始跑步</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参赛者"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始跑步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 跑步结束, 跑完了</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参赛者"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"到达终点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 跑到终点, 计数器就减一</span>                    end<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 等待 5s 就开始吹哨</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始比赛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 裁判吹哨, 计数器减一</span>        begin<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 等待所有玩家到达终点</span>        end<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比赛结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>多任务完成后合并汇总</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">+</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务"</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">"执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 主线程在阻塞，当计数器为0，就唤醒主线程往下执行</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程:在所有任务运行完成后，进行结果汇总"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><ul><li><p>并行任务同步：CountDownLatch可以用于协调多个并行任务的完成情况，确保所有任务都完成后再继续执行下一步操作。 </p></li><li><p>多任务汇总：CountDownLatch可以用于统计多个线程的完成情况，以确定所有线程都已完成工作。 </p></li><li><p>资源初始化：CountDownLatch可以用于等待资源的初始化完成，以便在资源初始化完成后开始使用。</p></li></ul><h3 id="CyclicBarrier（回环栅栏或循环屏障）"><a href="#CyclicBarrier（回环栅栏或循环屏障）" class="headerlink" title="CyclicBarrier（回环栅栏或循环屏障）"></a>CyclicBarrier（回环栅栏或循环屏障）</h3><p>描述：Java 并发库中的一个同步工具，通过它可以实现让一组线程等待至某个状态（屏障点）之后再全部同时执行。叫做回环是因为当所有等待线程都被释放以后， <font color="red">CyclicBarrier可以被重用。</font></p><p><img src="/images/cp/cb-1.png" alt="cb-1"></p><h4 id="常用API-1"><a href="#常用API-1" class="headerlink" title="常用API"></a>常用API</h4><p><strong>构造器</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Creates a new {@code CyclicBarrier} that will trip when the * given number of parties (threads) are waiting upon it, and which * will execute the given barrier action when the barrier is tripped, * performed by the last thread entering the barrier. * * @param parties the number of threads that must invoke {@link #await} *        before the barrier is tripped * @param barrierAction the command to execute when the barrier is *        tripped, or {@code null} if there is no action * @throws IllegalArgumentException if {@code parties} is less than 1 */</span><span class="token keyword">public</span> <span class="token function">CyclicBarrier</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">,</span> Runnable barrierAction<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parties <span class="token operator">=</span> parties<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> parties<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>barrierCommand <span class="token operator">=</span> barrierAction<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Creates a new {@code CyclicBarrier} that will trip when the * given number of parties (threads) are waiting upon it, and * does not perform a predefined action when the barrier is tripped. * * @param parties the number of threads that must invoke {@link #await} *        before the barrier is tripped * @throws IllegalArgumentException if {@code parties} is less than 1 */</span><span class="token keyword">public</span> <span class="token function">CyclicBarrier</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>parties<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>常用方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> BrokenBarrierException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">dowait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> toe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>toe<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cannot happen</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span>           BrokenBarrierException<span class="token punctuation">,</span>           TimeoutException <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">dowait</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">breakBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// break the current generation</span>        <span class="token function">nextGeneration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// start a new generation</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="CyclicBarrier使用"><a href="#CyclicBarrier使用" class="headerlink" title="CyclicBarrier使用"></a>CyclicBarrier使用</h3><p><strong>模拟人满发车</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierDemo</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CyclicBarrier cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人齐了，准备发车"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">"号马上就到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> sleepMills <span class="token operator">=</span> ThreadLocalRandom<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleepMills<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">"号到了，上车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>多线程批量处理数据</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierBatchProcessorDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 生成数据 任务分工</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 指定数据处理大小</span>        <span class="token keyword">int</span> batchSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        CyclicBarrierBatchProcessor processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrierBatchProcessor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理数据</span>        processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>batchData <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer i <span class="token operator">:</span> batchData<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"处理数据"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CyclicBarrierBatchProcessor</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> data<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">;</span>        <span class="token keyword">private</span> CyclicBarrier barrier<span class="token punctuation">;</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Thread<span class="token operator">></span> threads<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">CyclicBarrierBatchProcessor</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>batchSize <span class="token operator">=</span> batchSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span>batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>BatchTask task<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对任务分批，获取线程数</span>        <span class="token keyword">int</span> threadCount <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> batchSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> batchSize<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> start <span class="token operator">=</span> i <span class="token operator">*</span> batchSize<span class="token punctuation">;</span>            <span class="token keyword">int</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>start <span class="token operator">+</span> batchSize<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取每个线程处理的任务数</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> batchData <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                task<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>batchData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> <span class="token operator">|</span> BrokenBarrierException e<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threads<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BatchTask</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> batchData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="常见应用场景-1"><a href="#常见应用场景-1" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><ul><li>多线程任务：CyclicBarrier 可以用于将复杂的任务分配给多个线程执行，并在所有线程完成工作后触发后续操作。 </li><li>数据处理：CyclicBarrier 可以用于协调多个线程间的数据处理，在所有线程处理完数据后触发后续操作。</li></ul><h4 id="CyclicBarrier-与-CountDownLatch-区别"><a href="#CyclicBarrier-与-CountDownLatch-区别" class="headerlink" title="CyclicBarrier 与 CountDownLatch 区别"></a>CyclicBarrier 与 CountDownLatch 区别</h4><ul><li>CountDownLatch 是一次性的，CyclicBarrier 是可循环利用的 </li><li>CountDownLatch 参与的线程的职责是不一样的，有的在倒计时，有的在等待倒计时结束。CyclicBarrier 参与的线程职责是一样的。</li></ul><h3 id="Exchanger（数据交换器）"><a href="#Exchanger（数据交换器）" class="headerlink" title="Exchanger（数据交换器）"></a>Exchanger（数据交换器）</h3><p>描述：用于线程间协作的工具类，<font color="red">用于两个线程间交换数据。</font>具体交换数据是通过 exchange方法来实现的，如果一个线程先执行exchange方法，那么它会同步等待另一个线程也执行 exchange方法，这个时候两个线程就都达到了同步点，两个线程就可以交换数据。</p><h3 id="常用API-2"><a href="#常用API-2" class="headerlink" title="常用API"></a>常用API</h3><p><strong>常用方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">exchange</span><span class="token punctuation">(</span>V x<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>    Object v<span class="token punctuation">;</span>    Object item <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> NULL_ITEM <span class="token operator">:</span> x<span class="token punctuation">;</span>    <span class="token keyword">long</span> ns <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arena <span class="token operator">!=</span> null <span class="token operator">||</span>         <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">slotExchange</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>          <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">arenaExchange</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> TIMED_OUT<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> NULL_ITEM<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> V <span class="token function">exchange</span><span class="token punctuation">(</span>V x<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    Object v<span class="token punctuation">;</span>    Object item <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> NULL_ITEM <span class="token operator">:</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// translate null args</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arena <span class="token operator">!=</span> null <span class="token operator">||</span>         <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">slotExchange</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token comment" spellcheck="true">// disambiguates null return</span>          <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token function">arenaExchange</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> NULL_ITEM<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token punctuation">(</span>V<span class="token punctuation">)</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Exchanger使用"><a href="#Exchanger使用" class="headerlink" title="Exchanger使用"></a>Exchanger使用</h3><h4 id="模拟交易场景"><a href="#模拟交易场景" class="headerlink" title="模拟交易场景"></a>模拟交易场景</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExchangerDemo</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Exchanger exchanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exchanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> String goods <span class="token operator">=</span> <span class="token string">"电脑"</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> String money <span class="token operator">=</span> <span class="token string">"$4000"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备交易，一手交钱一手交货..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 卖家</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖家到了，已经准备好货："</span> <span class="token operator">+</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    String money <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>goods<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖家收到钱："</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 买家</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买家到了，已经准备好钱："</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>                    String goods <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买家收到货："</span> <span class="token operator">+</span> goods<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="模拟对账场景"><a href="#模拟对账场景" class="headerlink" title="模拟对账场景"></a>模拟对账场景</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExchangerDemo2</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Exchanger<span class="token operator">&lt;</span>String<span class="token operator">></span> exchanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exchanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    String A <span class="token operator">=</span> <span class="token string">"12379871924sfkhfksdhfks"</span><span class="token punctuation">;</span>                    exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    String B <span class="token operator">=</span> <span class="token string">"32423423jknjkfsbfj"</span><span class="token punctuation">;</span>                    String A <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A和B数据是否一致："</span> <span class="token operator">+</span> A<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A= "</span> <span class="token operator">+</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B= "</span> <span class="token operator">+</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="模拟队列中交换数据场景"><a href="#模拟队列中交换数据场景" class="headerlink" title="模拟队列中交换数据场景"></a>模拟队列中交换数据场景</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExchangerDemo3</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ArrayBlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> fullQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> ArrayBlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> emptyQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Exchanger<span class="token operator">&lt;</span>ArrayBlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">>></span> exchanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exchanger</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 生产者     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>    <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ArrayBlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> current <span class="token operator">=</span> emptyQueue<span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    String str <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">{</span>                        current<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"producer：生产了一个序列："</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">">>>>>加入到交换区"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"producer：队列已满，换一个空的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        current <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 消费者     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>    <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ArrayBlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> current <span class="token operator">=</span> fullQueue<span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        String str <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer：消耗一个序列："</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer：队列空了，换个满的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        current <span class="token operator">=</span> exchanger<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer：换满的成功~~~~~~~~~~~~~~~~~~~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="常见应用场景-2"><a href="#常见应用场景-2" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><ul><li>数据交换：在多线程环境中，两个线程可以通过 Exchanger 进行数据交换。 </li><li>数据采集：在数据采集系统中，可以使用 Exchanger 在采集线程和处理线程间进行数据交换。</li></ul><h3 id="Phaser（阶段协同器）"><a href="#Phaser（阶段协同器）" class="headerlink" title="Phaser（阶段协同器）"></a>Phaser（阶段协同器）</h3><p>描述：一个Java实现的并发工具类，用于协调多个线程的执行。它提供了一些方便的方法来管理多个阶段的执行，可以让程序员灵活地控制线程的执行顺序和阶段性的执行。Phaser可以被视为CyclicBarrier和CountDownLatch的进化版，它能够自适应地调整并发线程数，可以动态地增加或减少参与线程的数量。所以Phaser特别适合使用在重复执行或者重用的情况。</p><h3 id="常用API-3"><a href="#常用API-3" class="headerlink" title="常用API"></a>常用API</h3><p><strong>构造方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 参与任务数0 */</span><span class="token keyword">public</span> <span class="token function">Phaser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 指定初始参与任务数 */</span><span class="token keyword">public</span> <span class="token function">Phaser</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> parties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 指定parent阶段器，子对象作为一个整体加入parent对象 * 当子对象中没有参与者时，会自动从parent对象解除注册 */</span><span class="token keyword">public</span> <span class="token function">Phaser</span><span class="token punctuation">(</span>Phaser parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 集合上面两个方法 */</span><span class="token keyword">public</span> <span class="token function">Phaser</span><span class="token punctuation">(</span>Phaser parent<span class="token punctuation">,</span> <span class="token keyword">int</span> parties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">>>></span> PARTIES_SHIFT <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal number of parties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> phase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Phaser root <span class="token operator">=</span> parent<span class="token punctuation">.</span>root<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>evenQ <span class="token operator">=</span> root<span class="token punctuation">.</span>evenQ<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oddQ <span class="token operator">=</span> root<span class="token punctuation">.</span>oddQ<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            phase <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>evenQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span>QNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oddQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span>QNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span>parties <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>EMPTY <span class="token operator">:</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>phase <span class="token operator">&lt;&lt;</span> PHASE_SHIFT<span class="token punctuation">)</span> <span class="token operator">|</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>parties <span class="token operator">&lt;&lt;</span> PARTIES_SHIFT<span class="token punctuation">)</span> <span class="token operator">|</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>parties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>增减参与任务数方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 增加一个任务数，返回当前阶段号 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 增加指定任务个数，返回当前阶段号 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bulkRegister</span><span class="token punctuation">(</span><span class="token keyword">int</span> parties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parties <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">doRegister</span><span class="token punctuation">(</span>parties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 减少一个任务数，返回当前阶段号 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">doArrive</span><span class="token punctuation">(</span>ONE_DEREGISTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>到达、等待方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 到达(任务完成)，返回当前阶段号 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">arrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">doArrive</span><span class="token punctuation">(</span>ONE_ARRIVAL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 到达后等待其他任务到达，返回到达阶段号 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Specialization of doArrive+awaitAdvance eliminating some reads/paths</span>    <span class="token keyword">final</span> Phaser root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">?</span> state <span class="token operator">:</span> <span class="token function">reconcileState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> phase <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">>>></span> PHASE_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> phase<span class="token punctuation">;</span>        <span class="token keyword">int</span> counts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>s<span class="token punctuation">;</span>        <span class="token keyword">int</span> unarrived <span class="token operator">=</span> <span class="token punctuation">(</span>counts <span class="token operator">==</span> EMPTY<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>counts <span class="token operator">&amp;</span> UNARRIVED_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>unarrived <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token function">badArrive</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> s<span class="token punctuation">,</span>                                      s <span class="token operator">-=</span> ONE_ARRIVAL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>unarrived <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">internalAwaitAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> parent<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> n <span class="token operator">=</span> s <span class="token operator">&amp;</span> PARTIES_MASK<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// base of next state</span>            <span class="token keyword">int</span> nextUnarrived <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n <span class="token operator">>>></span> PARTIES_SHIFT<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> nextUnarrived<span class="token punctuation">)</span><span class="token punctuation">)</span>                n <span class="token operator">|=</span> TERMINATION_BIT<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nextUnarrived <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                n <span class="token operator">|=</span> EMPTY<span class="token punctuation">;</span>            <span class="token keyword">else</span>                n <span class="token operator">|=</span> nextUnarrived<span class="token punctuation">;</span>            <span class="token keyword">int</span> nextPhase <span class="token operator">=</span> <span class="token punctuation">(</span>phase <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> MAX_PHASE<span class="token punctuation">;</span>            n <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>nextPhase <span class="token operator">&lt;&lt;</span> PHASE_SHIFT<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>state <span class="token operator">>>></span> PHASE_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// terminated</span>            <span class="token function">releaseWaiters</span><span class="token punctuation">(</span>phase<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> nextPhase<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 在指定阶段等待(必须是当前阶段才有效) */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">awaitAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Phaser root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">?</span> state <span class="token operator">:</span> <span class="token function">reconcileState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">>>></span> PHASE_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> phase<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> phase<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">internalAwaitAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 阶段到达触发动作 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">awaitAdvanceInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">final</span> Phaser root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">?</span> state <span class="token operator">:</span> <span class="token function">reconcileState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">>>></span> PHASE_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> phase<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> phase<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> 0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">internalAwaitAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>wasInterrupted<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">awaitAdvanceInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span>                                     <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>    <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Phaser root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>    <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">?</span> state <span class="token operator">:</span> <span class="token function">reconcileState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>s <span class="token operator">>>></span> PHASE_SHIFT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> phase<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> phase<span class="token punctuation">)</span> <span class="token punctuation">{</span>        QNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> phase<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">internalAwaitAdvance</span><span class="token punctuation">(</span>phase<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>wasInterrupted<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> phase<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 类似CyclicBarrier的触发命令，通过重写该方法来增加阶段到达动作， * 该方法返回true将终结Phaser对象 */</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span> <span class="token keyword">int</span> registeredParties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> registeredParties <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Phaser使用"><a href="#Phaser使用" class="headerlink" title="Phaser使用"></a>Phaser使用</h3><h4 id="阶段性任务：模拟公司团建"><a href="#阶段性任务：模拟公司团建" class="headerlink" title="阶段性任务：模拟公司团建"></a>阶段性任务：模拟公司团建</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserDemo</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> Phaser phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 重写该方法来增加阶段到达动作</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onAdvance</span><span class="token punctuation">(</span><span class="token keyword">int</span> phase<span class="token punctuation">,</span> <span class="token keyword">int</span> registeredParties<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 参与者数量，去除主线程</span>                <span class="token keyword">int</span> staffs <span class="token operator">=</span> registeredParties <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>phase<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家都到公司了，出发去公园，人数："</span> <span class="token operator">+</span> staffs<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家都到公园门口了，出发去餐厅，人数："</span> <span class="token operator">+</span> staffs<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家都到餐厅了，开始用餐，人数："</span> <span class="token operator">+</span> staffs<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                                    <span class="token punctuation">}</span>                                <span class="token comment" spellcheck="true">// 判断是否只剩下主线程（一个参与者），如果是，则返回true，代表终止</span>                <span class="token keyword">return</span> registeredParties <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注册主线程 ———— 让主线程全程参与</span>        phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> StaffTask staffTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaffTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 3个全程参与团建的员工</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 添加任务数</span>            phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    staffTask<span class="token punctuation">.</span><span class="token function">step1Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 到达后等待其他任务到达</span>                    phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        staffTask<span class="token punctuation">.</span><span class="token function">step2Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        staffTask<span class="token punctuation">.</span><span class="token function">step3Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        staffTask<span class="token punctuation">.</span><span class="token function">step4Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 完成了，注销离开</span>                    phaser<span class="token punctuation">.</span><span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 两个不聚餐的员工加入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    staffTask<span class="token punctuation">.</span><span class="token function">step1Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        staffTask<span class="token punctuation">.</span><span class="token function">step2Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"员工【"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】回家了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 完成了，注销离开</span>                    phaser<span class="token punctuation">.</span><span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>phaser<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> phase <span class="token operator">=</span> phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 到了去餐厅的阶段，又新增4人，参加晚上的聚餐</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span>                        <span class="token punctuation">{</span>                            staffTask<span class="token punctuation">.</span><span class="token function">step3Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                        staffTask<span class="token punctuation">.</span><span class="token function">step4Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 完成了，注销离开</span>                            phaser<span class="token punctuation">.</span><span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">final</span> Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaffTask</span>    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">step1Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">throws</span> InterruptedException        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第一阶段：来公司集合</span>            String staff <span class="token operator">=</span> <span class="token string">"员工【"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staff <span class="token operator">+</span> <span class="token string">"从家出发了……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staff <span class="token operator">+</span> <span class="token string">"到达公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">step2Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第二阶段：出发去公园</span>            String staff <span class="token operator">=</span> <span class="token string">"员工【"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staff <span class="token operator">+</span> <span class="token string">"出发去公园玩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staff <span class="token operator">+</span> <span class="token string">"到达公园门口集合"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">step3Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第三阶段：去餐厅</span>            String staff <span class="token operator">=</span> <span class="token string">"员工【"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staff <span class="token operator">+</span> <span class="token string">"出发去餐厅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staff <span class="token operator">+</span> <span class="token string">"到达餐厅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">step4Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 第四阶段：就餐</span>            String staff <span class="token operator">=</span> <span class="token string">"员工【"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staff <span class="token operator">+</span> <span class="token string">"开始用餐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staff <span class="token operator">+</span> <span class="token string">"用餐结束，回家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="多线程批量处理数据"><a href="#多线程批量处理数据" class="headerlink" title="多线程批量处理数据"></a>多线程批量处理数据</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhaserBatchProcessorDemo</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> data<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一次处理多少数据</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 处理的线程数</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> Phaser phaser<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> processedData<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">PhaserBatchProcessorDemo</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">,</span> <span class="token keyword">int</span> threadCount<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>batchSize <span class="token operator">=</span> batchSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadCount <span class="token operator">=</span> threadCount<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phaser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phaser</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>processedData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            phaser<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BatchProcessor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        phaser<span class="token punctuation">.</span><span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">BatchProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> threadIndex<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token function">BatchProcessor</span><span class="token punctuation">(</span><span class="token keyword">int</span> threadIndex<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>threadIndex <span class="token operator">=</span> threadIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 所有线程都到达这个点之前会阻塞</span>                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 从未处理数据中找到一个可以处理的批次</span>                List<span class="token operator">&lt;</span>String<span class="token operator">></span> batch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> batch<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> batchSize<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        String d <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedData<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            batch<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>                            processedData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        index<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                                <span class="token comment" spellcheck="true">// 处理数据</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String d <span class="token operator">:</span> batch<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> threadIndex <span class="token operator">+</span> <span class="token string">"处理数据"</span> <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                <span class="token comment" spellcheck="true">// 所有线程都处理完当前批次之前会阻塞</span>                phaser<span class="token punctuation">.</span><span class="token function">arriveAndAwaitAdvance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 所有线程都处理完当前批次并且未处理数据已经处理完之前会阻塞</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>batch<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> index <span class="token operator">>=</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    phaser<span class="token punctuation">.</span><span class="token function">arriveAndDeregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据准备</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">int</span> batchSize <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> threadCount <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        PhaserBatchProcessorDemo processor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhaserBatchProcessorDemo</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> batchSize<span class="token punctuation">,</span> threadCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理数据</span>        processor<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="常见应用场景-3"><a href="#常见应用场景-3" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><ul><li>多线程任务分配：Phaser 可以用于将复杂的任务分配给多个线程执行，并协调线程间的合作。 </li><li>多级任务流程：Phaser 可以用于实现多级任务流程，在每一级任务完成后触发下一级任务的开始。</li><li>模拟并行计算：Phaser 可以用于模拟并行计算，协调多个线程间的工作。</li><li>阶段性任务：Phaser 可以用于实现阶段性任务，在每一阶段任务完成后触发下一阶段任务的开始。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-JUC并发工具类</title>
      <link href="/posts/cp-family/9/"/>
      <url>/posts/cp-family/9/</url>
      
        <content type="html"><![CDATA[<h2 id="常用并发同步工具类的真实应用场景"><a href="#常用并发同步工具类的真实应用场景" class="headerlink" title="常用并发同步工具类的真实应用场景"></a>常用并发同步工具类的真实应用场景</h2><p><font color="red">思考：并发编程是为了解决什么问题？</font></p><p><font color="red">性能 + 线程安全（正确性）</font> </p><p><font color="red">分工和同步解决性能问题，互斥解决安全性问题</font></p><p>Jdk提供了比synchronized更加高级的各种同步工具，包括<strong>ReentrantLock、Semaphore、CountDownLatch、 CyclicBarrier</strong>等，可以实现更加丰富的多线程操作。</p><span id="more"></span><h3 id="ReentrantLock（可重入的独占锁）"><a href="#ReentrantLock（可重入的独占锁）" class="headerlink" title="ReentrantLock（可重入的独占锁）"></a>ReentrantLock（可重入的独占锁）</h3><p>描述：ReentrantLock是一种可重入的独占锁，它允许同一个线程多次获取同一个锁而不会被阻塞。</p><p>特点：可中断；可以设置超时时间；<font color="red">可以设置为公平锁；</font>支持多个条件变量；<font color="red">与 synchronized 一样支持可重入</font></p><p>主要应用：<font color="red">多线程环境下对共享资源进行独占式访问，以保证数据的一致性和安全性。</font>例：抢票场景、电影院抢座</p><p>具体应用场景：</p><ul><li>解决多线程竞争资源问题；<font color="red">多线程写同一个数据库，每次只有一个线程成功。秒杀场景、防止超卖</font></li><li>实现多线程任务的顺序执行；<font color="red">公平锁，买票排队</font></li><li>实现多线程等待/通知机制；</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 模拟10个人抢8张票的场景：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockDemo</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> tickets <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tickets <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">try</span>                <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"购买了第"</span> <span class="token operator">+</span> tickets<span class="token operator">--</span> <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// buyTicket(); // 可重入</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"票已经卖完了，"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"抢票失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ReentrantLockDemo ticketSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                ticketSystem<span class="token punctuation">.</span><span class="token function">buyTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抢票</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"线程"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">try</span>        <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"剩余票数："</span> <span class="token operator">+</span> tickets<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h4><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象），不会因为之前已经获取过还没释放而阻塞。</p><p>Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是<font color="red">可一定程度避免死锁。</font>在实际开发中，可重入锁常常应用于<font color="red">递归操作、调用同一个类中的其他方法、锁嵌套</font>等场景中。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试验证锁的可重入：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockDemo2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建计数器对象</span>        Counter counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 测试递归调用</span>        counter<span class="token punctuation">.</span><span class="token function">recursiveCall</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Counter</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recursiveCall</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行递归，num = "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">recursiveCall</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><p>ReentrantLock实现了Lock接口规范，常见API如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void lock()</td><td>获取锁，调用该方法当前线程会获取锁。当锁获得后，该方法返回；未获得锁进入等待状态</td></tr><tr><td>void lockInterruptibly() throws InterruptedException</td><td>可中断的获取锁，和lock()方法不同之处在于该方法会响应中断，即在锁的获取中可以中断当前线程</td></tr><tr><td>boolean tryLock()</td><td>尝试非阻塞的获取锁，调用该方法后立即返回。如果能够获取到返回true，否则返回false</td></tr><tr><td>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</td><td>超时获取锁，当前线程在以下三种情况下会被返回：当前线程在超时时间内获取了锁；当前线程在超时时间内被中断；超时时间结束，返回false</td></tr><tr><td>void unlock()</td><td>释放锁</td></tr><tr><td>Condition newCondition()</td><td>获取等待通知组件，该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的await()方法，而调用后，当前线程将释放锁</td></tr></tbody></table><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加锁 阻塞 </span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 解锁 </span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//尝试加锁 非阻塞</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在使用时要注意 4 个问题：</p><p>1、默认情况下 ReentrantLock 为非公平锁而非公平锁;</p><p>2、加锁次数和释放锁次数一定要保持一致，否则会导致线程阻塞或程序异常;</p><p>3、加锁操作一定要放在 try 代码之前，这样可以避免未加锁成功又释放锁的异常;</p><p>4、释放锁一定要放在 finally 中，否则会导致线程阻塞。</p><h4 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h4><p>ReentrantLock支持公平锁和非公平锁两种模式：</p><ul><li>公平锁：线程在获取锁时，按照等待的先后顺序获取锁。</li><li>非公平锁：线程在获取锁时，不按照等待的先后顺序获取锁，而是随机获取锁。<font color="red">默认非公平锁</font></li></ul><pre class=" language-java"><code class="language-java">ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认非公平锁  </span>ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//公平锁  </span></code></pre><h4 id="结合Condition实现生产者消费者模式"><a href="#结合Condition实现生产者消费者模式" class="headerlink" title="结合Condition实现生产者消费者模式"></a>结合Condition实现生产者消费者模式</h4><p>java.util.concurrent类库中提供Condition类来实现线程之间的协调。调用Condition.await() 方法使线程等待，其他线程调用Condition.signal() 或 Condition.signalAll() 方法唤醒等待的线程。</p><p>注意：<font color="red">调用Condition的await()和signal()方法，都必须在lock保护之内。</font></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 基于ReentrantLock和Condition实现一个简单队列，模拟生产和消费</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockDemo3</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建队列</span>        Queue queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动生产者线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动消费者线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 队列封装类 */</span><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> takeIndex<span class="token punctuation">;</span>        <span class="token keyword">int</span> putIndex<span class="token punctuation">;</span>        <span class="token keyword">private</span> ReentrantLock lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消费者线程阻塞唤醒条件，队列为空阻塞，生产者生产完唤醒</span>    <span class="token keyword">public</span> Condition notEmpty<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生产者线程阻塞唤醒条件，队列满了阻塞，消费者消费完唤醒</span>    <span class="token keyword">public</span> Condition notFull<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加锁</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 队列满了让生产者等待</span>                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>            notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 生产完唤醒消费者</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"producer生产："</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> Object <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 队列空了就让消费者等待</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Object value <span class="token operator">=</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 消费完唤醒生产者生产</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 生产者 */</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Queue queue<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Queue queue<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 隔1秒轮询生产一次</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 消费者 */</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Queue queue<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Customer</span><span class="token punctuation">(</span>Queue queue<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 隔2秒轮询消费一次</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumer消费："</span> <span class="token operator">+</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Semaphore（信号量）"><a href="#Semaphore（信号量）" class="headerlink" title="Semaphore（信号量）"></a>Semaphore（信号量）</h3><p>描述：Semaphore（信号量）是一种用于多线程编程的同步工具，<font color="red">用于控制同时访问某个资源的线程数量。</font></p><p>Semaphore维护了一个计数器，线程可以通过调用acquire()方法来获取Semaphore中的许可证，当计数器为0时，调用acquire()的线程将被阻塞，直到有其他线程释放许可证；线程可以通过调用 release()方法来释放Semaphore中的许可证，这会使Semaphore中的计数器增加，从而允许更多的 线程访问共享资源。</p><p><img src="/images/cp/juc-1.png" alt="juc-1"></p><h4 id="常用API-1"><a href="#常用API-1" class="headerlink" title="常用API"></a>常用API</h4><p><strong>构造器</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Creates a {@code Semaphore} with the given number of * permits and nonfair fairness setting. * * @param permits the initial number of permits available. *        This value may be negative, in which case releases *        must occur before any acquires will be granted. */</span><span class="token keyword">public</span> <span class="token function">Semaphore</span><span class="token punctuation">(</span><span class="token keyword">int</span> permits<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span>permits<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Creates a {@code Semaphore} with the given number of * permits and the given fairness setting. * * @param permits the initial number of permits available. *        This value may be negative, in which case releases *        must occur before any acquires will be granted. * @param fair {@code true} if this semaphore will guarantee *        first-in first-out granting of permits under contention, *        else {@code false} */</span><span class="token keyword">public</span> <span class="token function">Semaphore</span><span class="token punctuation">(</span><span class="token keyword">int</span> permits<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span>permits<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span>permits<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>permits 表示许可证的数量（资源数） </li><li>fair 表示公平性，如果这个设为 true 的话，下次执行的线程会是等待最久的线程</li></ul><p><strong>常用方法</strong> </p><ul><li>acquire() 表示阻塞并获取许可 </li><li>tryAcquire() 方法在没有许可的情况下会立即返回 false，要获取许可的线程不会阻塞 </li><li>release() 表示释放许可</li></ul><p><strong>Semaphore实现服务接口限流</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 同一时刻最多只允许有两个并发     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> Executor executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getProductInfo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getProductInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 申请许可</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：请求服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放许可</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"返回商品详情信息"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getProductInfo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>semaphore<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：请求被流控了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"请求被流控了"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：请求服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"返回商品详情信息"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Semaphore实现数据库连接池</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo2</span><span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> ConnectPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 5个线程并发来争抢连接资源</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Connect connect <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"等待获取数据库连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        connect <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">openConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"已拿到数据库连接:"</span> <span class="token operator">+</span> connect<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 进行数据库操作2秒...然后释放连接</span>                        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"释放数据库连接:"</span> <span class="token operator">+</span> connect<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">finally</span>                    <span class="token punctuation">{</span>                        pool<span class="token punctuation">.</span><span class="token function">releaseConnect</span><span class="token punctuation">(</span>connect<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数据库连接池</span><span class="token keyword">class</span> <span class="token class-name">ConnectPool</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">private</span> Connect<span class="token punctuation">[</span><span class="token punctuation">]</span> connects<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 记录对应下标的Connect是否已被使用</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> connectFlag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 信号量对象</span>    <span class="token keyword">private</span> Semaphore semaphore<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**     * size:初始化连接池大小     */</span>    <span class="token keyword">public</span> <span class="token function">ConnectPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connect</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        connectFlag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">initConnects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 初始化连接池</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initConnects</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            connects<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 获取数据库连接     *     * @return     * @throws InterruptedException     */</span>    <span class="token keyword">public</span> Connect <span class="token function">openConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 得先获得使用许可证，如果信号量为0，则拿不到许可证，一直阻塞直到能获得</span>        semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">synchronized</span> Connect <span class="token function">getConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> connectFlag<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connectFlag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 标记该连接已被使用</span>                connectFlag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> connects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 释放某个数据库连接     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">releaseConnect</span><span class="token punctuation">(</span>Connect connect<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connect <span class="token operator">==</span> connects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                connectFlag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 数据库连接 */</span><span class="token keyword">class</span> <span class="token class-name">Connect</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 假设打开一个连接很耗费资源，需要等待1秒</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接#"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"#已与数据库建立通道！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"#"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"#"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>限流：Semaphore可以用于限制对共享资源的并发访问数量，以控制系统的流量。 </p><p>资源池：Semaphore可以用于实现资源池，以维护一组有限的共享资源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-并发安全</title>
      <link href="/posts/cp-family/8/"/>
      <url>/posts/cp-family/8/</url>
      
        <content type="html"><![CDATA[<h2 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h2><h3 id="什么是线程安全性？"><a href="#什么是线程安全性？" class="headerlink" title="什么是线程安全性？"></a>什么是线程安全性？</h3><p>代码在并发情况下使用时，总是能表现出正确的行为；反之，未实现线程安全的代码，表现的行为是不可预知的，有可能正确，而绝大多数的情况下是错误的。</p><p><font color="red">官方说法：线程的行为（尤其是在未正确同步的情况下）可能会造成混淆并且违反直觉。</font></p><p>注意：代码执行10000次，哪怕只有一次错误，也是线程不安全的；无论执行多少次都正确，才是线程安全的。</p><p>如果要实现线程安全性，就要保证类是线程安全的。在《Java并发编程实战》中，定义“类是线程安全的”如下：</p><p>当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在调用代码中不需要任何额外的同步或者协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。</p><p>思考：Java中的bean是不是线程安全的？</p><p>无状态的bean是线程安全的，另外如果做了并发处理也是线程安全的</p><span id="more"></span><h3 id="如何实现线程安全？"><a href="#如何实现线程安全？" class="headerlink" title="如何实现线程安全？"></a>如何实现线程安全？</h3><h4 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h4><p>避免并发最简单的方法就是线程封闭。</p><p>就是把对象封装到一个线程里，只有这一个线程能看到此对象。那么这个对象就算不是线程安全的也不会出现任何安全问题。<font color="red">每个线程有独立的运行栈和程序计数器，共享进程的数据空间和资源</font></p><p><strong>栈封闭</strong></p><p>栈封闭是遇到的最多的线程封闭。</p><p>什么是栈封闭呢？</p><p>简单的说就是局部变量。多个线程访问一个方法，此方法中的局部变量都会被拷贝一份到线程栈中。所以局部变量是不被多个线程所共享的，也就不会出现并发问题。</p><p><font color="red">能用局部变量就别用全局的变量，全局变量容易引起并发问题。</font></p><p><strong>TheadLocal</strong></p><p>ThreadLocal是实现线程封闭的最好方法。</p><h4 id="无状态的类"><a href="#无状态的类" class="headerlink" title="无状态的类"></a>无状态的类</h4><p>没有任何成员变量的类，就叫无状态的类，这种类一定是线程安全的。</p><p>思考：如果类的方法参数中使用了对象，也是线程安全的吗？</p><p>是线程安全的，即使参数对象不是线程安全的，当前类自己并不会有问题，不背锅</p><h4 id="让类不可变"><a href="#让类不可变" class="headerlink" title="让类不可变"></a>让类不可变</h4><p>让状态不可变，加final关键字，对于一个类，所有的成员变量应该是私有的，同样的只要有可能，所有的成员变量应该加上final关键字，但是加上final，要注意如果成员变量又是一个对象时，这个对象所对应的类也要是不可变，才能保证整个类是不可变的。</p><p>注意：一旦类的成员变量中有对象，上述的final关键字保证不可变并不能保证类的安全性，因为在多线程下，虽然对象的引用不可变，但是对象在堆上的实例是有可能被多个线程同时修改的，没有正确处理的情况下，对象实例在堆中的数据是不可预知的。</p><h4 id="加锁和CAS"><a href="#加锁和CAS" class="headerlink" title="加锁和CAS"></a>加锁和CAS</h4><p>最常使用的保证线程安全的手段，使用<strong>synchronized</strong>关键字，使用显式锁，使用各种原子变量，修改数据时使用CAS机制等等。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁。</p><p>总结：</p><p>1、死锁是必然发生在多操作者（M&gt;=2个）争夺多个资源（N&gt;=2个，且N&lt;=M）才会发生这种情况。</p><p>2、争夺资源的顺序不对，如果争夺资源的顺序是一样的，也不会产生死锁。</p><p>3、争夺者对拿到的资源不放手。</p><p>死锁的发生必须具备以下四个必要条件：</p><p>1）互斥条件：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。</p><p>2）请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。</p><p>3）不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。</p><p>4）环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</p><p>只要打破四个必要条件之一就能有效预防死锁的发生。</p><p>打破互斥条件：改造独占性资源为虚拟资源，大部分资源已无法改造。</p><p>打破不可抢占条件：当一进程占有一独占性资源后又申请一独占性资源而无法满足，则退出原占有的资源。</p><p>打破占有且申请条件：采用资源预先分配策略，即进程运行前申请全部资源，满足则运行，不然就等待，这样就不会占有且申请。</p><p>打破循环等待条件：实现资源有序分配策略，对所有设备实现分类编号，所有进程只能采用按序号递增的形式申请资源。</p><p>避免死锁常见的算法有有序资源分配法、银行家算法。</p><h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><ul><li><p><strong>简单顺序死锁</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Object No13 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个锁</span><span class="token keyword">private</span> <span class="token keyword">static</span> Object No14 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二个锁</span>Thread <span class="token number">1</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>No14<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">" get No14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>No13<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">" get No13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Thread <span class="token number">2</span><span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>No13<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">" get No13"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>No14<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">" get No14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>main<span class="token operator">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">Thread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Thread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p><strong>动态顺序死锁</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">businessDo</span><span class="token punctuation">(</span>Object first<span class="token punctuation">,</span>Object second<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">" get first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">" get second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><p>1、线程不工作了，但是整个程序还是活着的</p><p>2、没有任何的异常信息可以供我们检查。</p><p>3、一旦程序发生了发生了死锁，是没有任何的办法恢复的，只能重启程序，对生产平台的程序来说，这是个很严重的问题。</p><p><strong>实际工作中的死锁</strong></p><p>时间不定，不是每次必现；一旦出现没有任何异常信息，只知道这个应用的所有业务越来越慢，最后停止服务，无法确定是哪个具体业务导致的问题；测试部门也无法复现，并发量不够。<font color="red">没有异常，难以复现</font></p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p><strong>定位</strong></p><p>通过<strong>jps</strong> 查询应用的 id，再通过<strong>jstack id</strong> 查看应用的锁的持有情况</p><p><font color="red">jdk1.8以后jstack可以分析出死锁具体信息；之前的版本需要根据线程状态和加锁信息自行判断</font></p><p><strong>修正</strong></p><p>关键是保证<strong>拿锁的顺序一致</strong></p><p>两种解决方式：</p><ul><li><p>内部通过顺序比较，确定拿锁的顺序；<font color="red">比如取hashCode，值小的先执行</font></p></li><li><p>采用尝试拿锁的机制。<font color="red"><code>ReentrantLock().tryLock()</code></font></p></li></ul><h3 id="其他安全问题"><a href="#其他安全问题" class="headerlink" title="其他安全问题"></a>其他安全问题</h3><h4 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h4><p>两个线程在尝试拿锁的机制中，发生多个线程之间互相谦让，不断发生同一个线程总是拿到同一把锁，在尝试拿另一把锁时因为拿不到，而将本来已经持有的锁释放的过程。</p><p><font color="red">理论上活锁问题可以永远持续，实际上不会。和操作系统调度有关</font></p><p>解决办法：每个线程休眠随机数，错开拿锁的时间。</p><h4 id="线程饥饿"><a href="#线程饥饿" class="headerlink" title="线程饥饿"></a>线程饥饿</h4><p>低优先级的线程，总是拿不到执行时间</p><h3 id="线程安全的单例模式"><a href="#线程安全的单例模式" class="headerlink" title="线程安全的单例模式"></a>线程安全的单例模式</h3><p>在设计模式中，单例模式是比较常见的一种设计模式，如何实现单例呢？一种比较常见的是双重检查锁定。</p><h4 id="双重检查锁定"><a href="#双重检查锁定" class="headerlink" title="双重检查锁定"></a>双重检查锁定</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleDcl</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// volatile 是关键</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> SingleDcl singleDcl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 私有化</span>    <span class="token keyword">private</span> <span class="token function">SingleDcl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> SingleDcl <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleDcl <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一次检查，不加锁</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingleDcl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加锁</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singleDcl <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第二次检查，加锁情况下</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 内存中分配空间 1</span>                    <span class="token comment" spellcheck="true">// 空间初始化 2</span>                    <span class="token comment" spellcheck="true">// 把这个空间的地址给我们的引用 3</span>                    singleDcl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleDcl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> singleDcl<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="单例模式推荐实现"><a href="#单例模式推荐实现" class="headerlink" title="单例模式推荐实现"></a>单例模式推荐实现</h4><p><strong>懒汉式</strong></p><p>类初始化模式，也叫延迟占位模式。在单例类的内部由一个私有静态内部类来持有这个单例类的实例。因为在JVM中，对类的加载和类初始化，由虚拟机保证线程安全。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleInit</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InstanceHolder</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> SingleInit instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> SingleInit <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> InstanceHolder<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>延迟占位模式还可以用在多线程下实例域的延迟赋值。</p><p><strong>饿汉式</strong></p><p>在声明的时候就new这个类的实例，或者使用枚举也可以。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleEHan</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingleEHan</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> SingleEHan singleDcl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleEHan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-CAS&amp;Atomic</title>
      <link href="/posts/cp-family/7/"/>
      <url>/posts/cp-family/7/</url>
      
        <content type="html"><![CDATA[<h2 id="CAS-amp-Atomic原子操作详解"><a href="#CAS-amp-Atomic原子操作详解" class="headerlink" title="CAS&amp;Atomic原子操作详解"></a>CAS&amp;Atomic原子操作详解</h2><h3 id="什么是原子操作？如何实现原子操作？"><a href="#什么是原子操作？如何实现原子操作？" class="headerlink" title="什么是原子操作？如何实现原子操作？"></a>什么是原子操作？如何实现原子操作？</h3><p>工作中经常使用事务，而事务的一大特性就是原子性（事务具有ACID四大特性），一个事务包含多个操作，这些操作要么全部执行，要么全都不执行。</p><p>实现原子操作可以使用锁，锁机制，满足基本的需求没有问题，但是有的时候我们需要更有效，更加灵活的机制，synchronized关键字是基于阻塞的锁机制，也就是说当一个线程拥有锁的时候，访问同一资源的其它线程需要等待，直到该线程释放锁</p><p><font color="red">锁机制存在的问题：如果被阻塞的线程优先级很高很重要怎么办；如果获得锁的线程一直不释放锁怎么办；还有可能出现一些例如死锁之类的情况；其实锁机制是一种比较粗糙，粒度比较大的机制，相对于像计数器这样的需求有点儿过于笨重。</font></p><p>为了解决锁机制的这些问题，Java提供了Atomic系列的原子操作类。</p><p>原子操作类是基于操作系统提供的指令<code>cmpxchg</code>（每个厂家所实现的具体算法并不一样，但是原理基本一样）。每一个CAS操作过程都包含三个运算符：一个内存地址V，一个期望的值A和一个新值B，操作的时候如果这个地址上存放的值等于这个期望的值A，则将地址上的值赋为新值B，否则不做任何操作。</p><p>CAS的基本思路是：如果这个地址上的值和期望的值相等，则给其赋予新值，否则不做任何事儿，但是要返回原值是多少。Java中的Atomic系列原子操作类就是利用了循环CAS来实现，即在一个循环里不断的做CAS操作，直到成功为止。</p><span id="more"></span><h3 id="CAS实现原子操作的三大问题"><a href="#CAS实现原子操作的三大问题" class="headerlink" title="CAS实现原子操作的三大问题"></a>CAS实现原子操作的三大问题</h3><h4 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h4><p>因为CAS需要在操作值的时候，检查值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。</p><p>ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A→B→A就会变成1A→2B→3A。</p><p><font color="red">Java提供了AtomicMarkableReference 和AtomicStampedReference 来解决ABA的问题，前者只关心旧值改没改过，后者还关心版本号也就是修改过几次</font></p><h4 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h4><p>自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</p><h4 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h4><p>当对一个共享变量执行操作时，我们可以使用循环CAS的方式来保证原子操作，但是对多个共享变量操作时，循环CAS就无法保证操作的原子性，这个时候就可以用锁。</p><p>还有一个取巧的办法，就是把多个共享变量合并成一个共享变量来操作。比如，有两个共享变量i＝2，j=a，合并一下ij=2a，然后用CAS来操作ij。从Java 1.5开始，JDK提供了AtomicReference类来保证引用对象之间的原子性，就可以把多个变量放在一个对象里来进行CAS操作。</p><h3 id="Jdk中相关原子操作类的使用"><a href="#Jdk中相关原子操作类的使用" class="headerlink" title="Jdk中相关原子操作类的使用"></a>Jdk中相关原子操作类的使用</h3><h4 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h4><ul><li><p>int addAndGet（int delta）：以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果。</p></li><li><p>boolean compareAndSet（int expect，int update）：如果输入的数值等于预期值，则以原子方式将该值设置为输入的值。</p></li><li><p>int getAndIncrement()：以原子方式将当前值加1，注意，这里返回的是自增前的值。</p></li><li><p>int getAndSet（int newValue）：以原子方式设置为newValue的值，并返回旧值。</p></li></ul><h4 id="AtomicIntegerArray"><a href="#AtomicIntegerArray" class="headerlink" title="AtomicIntegerArray"></a>AtomicIntegerArray</h4><p>主要是提供原子的方式更新数组里的整型，其常用方法如下。</p><ul><li><p>int addAndGet（int i，int delta）：以原子方式将输入值与数组中索引i的元素相加。</p></li><li><p>boolean compareAndSet（int i，int expect，int update）：如果当前值等于预期值，则以原子方式将数组位置i的元素设置成update值。</p></li></ul><p>需要注意的是，数组value通过构造方法传递进去，然后AtomicIntegerArray会将当前数组复制一份，所以当AtomicIntegerArray对内部的数组元素进行修改时，不会影响传入的数组。</p><h4 id="更新引用类型"><a href="#更新引用类型" class="headerlink" title="更新引用类型"></a>更新引用类型</h4><p>原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子更新多个变量，就需要使用这个原子更新引用类型提供的类。Atomic包提供了以下3个类。</p><p><strong>AtomicReference</strong></p><p>原子更新引用类型。</p><p><strong>AtomicStampedReference</strong></p><p>利用版本戳的形式记录了每次改变以后的版本号，这样的话就不会存在ABA问题了。这就是AtomicStampedReference的解决方案。AtomicMarkableReference跟AtomicStampedReference差不多， AtomicStampedReference是<strong>使用pair的int stamp作为计数器</strong>使用，AtomicMarkableReference的pair使用的是boolean mark。 AtomicStampedReference关心的是旧值修改过几次，AtomicMarkableReference关心的是旧值有没有修改过。</p><p><strong>AtomicMarkableReference：</strong></p><p>原子更新带有标记位的引用类型。可以原子更新一个<strong>布尔类型的标记位</strong>和引用类型。构造方法是AtomicMarkableReference（V initialRef，booleaninitialMark）。</p><h4 id="原子更新字段类"><a href="#原子更新字段类" class="headerlink" title="原子更新字段类"></a>原子更新字段类</h4><p>如果需原子地更新某个类里的某个字段时，就需要使用原子更新字段类，Atomic包提供了以下3个类进行原子字段更新。</p><p>要想原子地更新字段类需要两步。第一步，因为原子更新字段类都是抽象类，每次使用的时候必须使用静态方法newUpdater()创建一个更新器，并且需要设置想要更新的类和属性。第二步，更新类的字段（属性）必须使用public volatile修饰符。</p><p><strong>AtomicIntegerFieldUpdater：</strong></p><p>原子更新整型的字段的更新器。</p><p><strong>AtomicLongFieldUpdater：</strong></p><p>原子更新长整型字段的更新器。</p><p><strong>AtomicReferenceFieldUpdater：</strong></p><p>原子更新引用类型里的字段。</p><h4 id="LongAdder"><a href="#LongAdder" class="headerlink" title="LongAdder"></a>LongAdder</h4><p>JDK1.8时，java.util.concurrent.atomic包中提供了一个新的原子类：LongAdder。 根据Oracle官方文档的介绍，LongAdder在高并发的场景下会比它的前辈——AtomicLong 具有<strong>更好的性能</strong>，代价是<strong>消耗更多的内存</strong>空间。</p><p><strong>AtomicLong</strong>是利用了底层的CAS操作来提供并发性的，调用了<strong>Unsafe</strong>类的<strong>getAndAddLong</strong>方法，该方法是个<strong>native</strong>方法，它的逻辑是采用自旋的方式不断更新目标值，直到更新成功。</p><p>在并发量较低的环境下，线程冲突的概率比较小，自旋的次数不会很多。但是，高并发环境下，N个线程同时进行自旋操作，会出现大量失败并不断自旋的情况，此时<strong>AtomicLong</strong>的自旋会成为瓶颈。</p><p>这就是<strong>LongAdder</strong>引入的初衷——解决高并发环境下<strong>AtomicLong</strong>的自旋瓶颈问题。</p><p><strong>AtomicLong</strong>中有个内部变量<strong>value</strong>保存着实际的long值，所有的操作都是针对该变量进行。也就是说，高并发环境下，value变量其实是一个热点，也就是N个线程竞争一个热点。</p><p><strong>LongAdder</strong>的基本思路就是<strong>分散热点</strong>，将value值分散到一个数组中，不同线程会命中到数组的不同槽中，各个线程只对自己槽中的那个值进行CAS操作，这样热点就被分散了，冲突的概率就小很多。如果要获取真正的long值，只要将各个槽中的变量值累加返回。</p><p><strong>LongAdder</strong>提供的API和<strong>AtomicLong</strong>比较接近，两者都能以原子的方式对long型变量进行增减。</p><p>但是<strong>AtomicLong</strong>提供的功能其实更丰富，尤其是<strong>addAndGet</strong>、<strong>decrementAndGet</strong>、<strong>compareAndSet</strong>这些方法。</p><p><strong>addAndGet</strong>、<strong>decrementAndGet</strong>除了单纯的做自增自减外，还可以立即获取增减后的值，而<strong>LongAdder</strong>则需要做同步控制才能精确获取增减后的值。如果业务需求需要精确的控制计数，做计数比较，<strong>AtomicLong</strong>也更合适。</p><p>另外，从空间方面考虑，<strong>LongAdder</strong>其实是一种“空间换时间”的思想，从这一点来讲<strong>AtomicLong</strong>更适合。</p><p>总之，低并发、一般的业务场景下AtomicLong是足够了。如果并发量很多，存在大量写多读少的情况，那LongAdder可能更合适。</p><p>对于<strong>LongAdder</strong>来说，内部有一个base变量，一个Cell[]数组。</p><p>base变量：非竞态条件下，直接累加到该变量上。</p><p>Cell[]数组：竞态条件下，累加个各个线程自己的槽Cell[i]中。</p><p>在实际运用的时候，只有从未出现过并发冲突的时候，base基数才会使用到，一旦出现了并发冲突，之后所有的操作都只针对Cell[]数组中的单元Cell。</p><p>而LongAdder最终结果的求和，并没有使用全局锁，返回值不是绝对准确的，因为调用这个方法时还有其他线程可能正在进行计数累加，所以只能得到某个时刻的近似值，这也就是<strong>LongAdder</strong>并不能完全替代<strong>LongAtomic</strong>的原因之一。</p><p>而且从测试情况来看，线程数越多，并发操作数越大，LongAdder的优势越大，线程数较小时，AtomicLong的性能还超过了LongAdder。</p><h4 id="其他新增"><a href="#其他新增" class="headerlink" title="其他新增"></a>其他新增</h4><p>除了新引入LongAdder外，还有引入了它的三个兄弟类：<strong>LongAccumulator、DoubleAdder、DoubleAccumulator</strong>。</p><p>LongAccumulator是LongAdder的增强版。LongAdder只能针对数值的进行加减运算，而LongAccumulator提供了自定义的函数操作。</p><p>通过LongBinaryOperator，可以自定义对入参的任意操作，并返回结果（LongBinaryOperator接收2个long作为参数，并返回1个long）。</p><p>LongAccumulator内部原理和LongAdder几乎完全一样。</p><p>DoubleAdder和DoubleAccumulator用于操作double原始类型。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-ThreadLocal</title>
      <link href="/posts/cp-family/6/"/>
      <url>/posts/cp-family/6/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要有ThreadLocal"><a href="#为什么要有ThreadLocal" class="headerlink" title="为什么要有ThreadLocal"></a>为什么要有ThreadLocal</h2><p>ThreadLocal为每个线程都提供了<strong>变量的副本</strong>，使得每个线程在某一时间访问到的并非同一个对象，这样就<strong>隔离</strong>了多个线程对数据的数据共享。</p><p>ThreadLocal和Synchonized都用于解决多线程并发访问。可是ThreadLocal与synchronized有本质的差别。synchronized是利用<strong>锁的机制</strong>，使变量或代码块在某一时刻仅能被一个线程访问，ThreadLocal则是<strong>副本机制</strong>，此时不论多少线程并发访问都是线程安全的。</p><p>ThreadLocal最主要的应用场景就是<strong>跨方法进行参数传递</strong>。</p><p>在Web容器中，每个完整的请求周期会由一个线程来处理。ThreadLocal为线程提供变量副本，可以进行事务操作，<strong>存储事务的信息</strong>；可以<strong>保存数据库连接</strong>，Spring就是使用一个ThreadLocal来实现“绑定连接到线程”；可以<strong>保存Session会话</strong>进行管理；在微服务领域，<strong>链路跟踪</strong>中的traceId传递也是利用了ThreadLocal。</p><span id="more"></span><h3 id="ThreadLocal的使用"><a href="#ThreadLocal的使用" class="headerlink" title="ThreadLocal的使用"></a>ThreadLocal的使用</h3><p>ThreadLocal类接口很简单，主要有4个方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 设置当前线程的线程局部变量的值 * Sets the current thread's copy of this thread-local variable * to the specified value.  Most subclasses will have no need to * override this method, relying solely on the {@link #initialValue} * method to set the values of thread-locals. * * @param value the value to be stored in the current thread's copy of *        this thread-local. */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// map为空需要创建和初始化</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回当前线程所对应的线程局部变量 * Returns the value in the current thread's copy of this * thread-local variable.  If the variable has no value for the * current thread, it is first initialized to the value returned * by an invocation of the {@link #initialValue} method. * * @return the current thread's value of this thread-local */</span><span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 将当前线程局部变量的值删除，目的是为了减少内存的占用，该方法是JDK 5.0新增的方法 * 需要指出的是，当线程结束后，对应该线程的局部变量将自动被垃圾回收 * 所以显式调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度 * Removes the current thread's value for this thread-local * variable.  If this thread-local variable is subsequently * {@linkplain #get read} by the current thread, its value will be * reinitialized by invoking its {@link #initialValue} method, * unless its value is {@linkplain #set set} by the current thread * in the interim.  This may result in multiple invocations of the * {@code initialValue} method in the current thread. * * @since 1.5 */</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ThreadLocalMap m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> null<span class="token punctuation">)</span>         m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 返回该线程局部变量的初始值，该方法是一个protected的方法，显然是为了让子类覆盖而设计的 * 这个方法是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次  * ThreadLocal中的缺省实现直接返回一个null * Returns the current thread's "initial value" for this * thread-local variable.  This method will be invoked the first * time a thread accesses the variable with the {@link #get} * method, unless the thread previously invoked the {@link #set} * method, in which case the {@code initialValue} method will not * be invoked for the thread.  Normally, this method is invoked at * most once per thread, but it may be invoked again in case of * subsequent invocations of {@link #remove} followed by {@link #get}. * * &lt;p>This implementation simply returns {@code null}; if the * programmer desires thread-local variables to have an initial * value other than {@code null}, {@code ThreadLocal} must be * subclassed, and this method overridden.  Typically, an * anonymous inner class will be used. * * @return the initial value for this thread-local */</span><span class="token keyword">protected</span> T <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="如何实现ThreadLocal"><a href="#如何实现ThreadLocal" class="headerlink" title="如何实现ThreadLocal"></a>如何实现ThreadLocal</h3><p>让每个线程都拥有自己变量的副本，最容易的方式就是用一个Map将线程的副本存放起来，Map里key就是每个线程的唯一性标识，比如线程ID，value就是副本值，下面是简单实现的例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThreadLocal</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 存放变量副本的map容器，以Thread为键，变量副本为value */</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Thread<span class="token punctuation">,</span> T<span class="token operator">></span> threadTMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> threadTMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        threadTMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中考虑到并发安全性，对数据的存取用synchronize关键字加锁，但是DougLee在《并发编程实战》中做过性能测试</p><p><img src="/images/cp/tl-1.png" alt="tl-1"></p><p>可以看到ThreadLocal的性能远超ReentrantLock和AtomicInteger，即使把Map的实现更换为Java中专为并发设计的ConcurrentHashMap也不太可能达到这么高的性能，最多和AtomicInteger这种方式差不多。</p><p><strong>怎样设计可以让ThreadLocal达到高性能？</strong></p><p>最好的办法是让变量副本跟随着线程本身，而不是将变量副本放在一个地方保存，这样就可以在存取时避开线程之间的竞争。同时，因为每个线程所拥有的变量的副本数是不定的，有些线程可能有一个，有些线程可能有2个甚至更多，则线程内部存放变量副本需要一个容器，而且容器要支持快速存取，所以在每个线程内部都可以持有一个Map来支持多个变量副本，这个Map被称为ThreadLocalMap。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getMap获得的是Thread内部的 ThreadLocal.ThreadLocalMap threadLocals 属性</span>    ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ThreadLocalMap是ThreadLocal的静态内部类</span>        <span class="token comment" spellcheck="true">// Entry是key,value结构，key-ThreadLocal,value-保存的变量副本</span>        ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Get the map associated with a ThreadLocal. Overridden in * InheritableThreadLocal. * * @param  t the current thread * @return the map */</span>ThreadLocalMap <span class="token function">getMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ThreadLocalMap是ThreadLocal的静态内部类</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The entries in this hash map extend WeakReference, using     * its main ref field as the key (which is always a     * ThreadLocal object).  Note that null keys (i.e. entry.get()     * == null) mean that the key is no longer referenced, so the     * entry can be expunged from table.  Such entries are referred to     * as "stale entries" in the code that follows.     */</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/** The value associated with this ThreadLocal. */</span>        Object value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key-ThreadLocal,value是需要隔离访问的变量</span>        <span class="token function">Entry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k<span class="token punctuation">,</span> Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 注意是数组，因为可能有多个变量需要隔离访问     * The table, resized as necessary.     * table.length MUST always be a power of two.     */</span>    <span class="token keyword">private</span> Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>上面可以看到有个Entry内部静态类，它继承了WeakReference，它记录了两个信息，一个是ThreadLocal类型，一个是Object类型的值。getEntry方法则是获取某个ThreadLocal对应的值，set方法就是更新或赋值相应的ThreadLocal对应的值。</p><p>注意：ThreadLocalMap是定义在ThreadLocal里面的一个静态内部类；但是ThreadLocalMap却作为属性在Thread里面使用 <code>ThreadLocal.ThreadLocalMap threadLocals = null;</code></p><p>使用时的大体结构流程图：</p><p><img src="/images/cp/tl-2.png" alt="tl-2"></p><h3 id="Hash冲突的解决"><a href="#Hash冲突的解决" class="headerlink" title="Hash冲突的解决"></a>Hash冲突的解决</h3><p>Hash，就是把任意长度的输入（又叫做预映射，pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值，输入的微小变化会导致输出的巨大变化。所以Hash常用在消息摘要或签名上，常用hash消息摘要算法有：（1)MD4（2) MD5它对输入仍以512位分组，其输出是4个32位字的级联（3)SHA-1及其他。</p><p>Hash转换是一种<strong>压缩映射</strong>，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。</p><p>Hash简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。常用HASH函数：直接取余法、乘法取整法、平方取中法。 Java里的<strong>HashMap用的就是直接取余法</strong>。</p><p>Hash属于压缩映射，一定能会产生多个实际值映射为一个Hash值的情况，这就产生了冲突，常见处理Hash冲突方法：</p><p><strong>开放定址法：</strong>出现冲突后按照一定算法查找一个空位置存放，根据算法的不同又可以分为线性探测再散列、二次探测再散列、伪随机探测再散列。线性探测再散列即依次向后查找，二次探测再散列，即依次向前后查找，增量为1、2、3的二次方，伪随机，顾名思义就是随机产生一个增量位移。</p><p>ThreadLocal里用的就是<strong>线性探测再散列</strong>：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Set the value associated with key. * * @param key the thread local object * @param value the value to be set */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// We don't use a fast path as with get() because it is at</span>    <span class="token comment" spellcheck="true">// least as common to use set() to create new entries as</span>    <span class="token comment" spellcheck="true">// it is to replace existing ones, in which case, a fast</span>    <span class="token comment" spellcheck="true">// path would fail more often than not.</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> null<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这里，线性探测再散列，方法详情见下面</span>         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">replaceStaleEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token operator">++</span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">cleanSomeSlots</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> sz<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> sz <span class="token operator">>=</span> threshold<span class="token punctuation">)</span>        <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Increment i modulo len. */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>链地址法：</strong>这种方法的基本思想是将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。链地址法<strong>适用于经常进行插入和删除</strong>的情况。Java里的HashMap用的就是链地址法，为了避免hash 洪水攻击，1.8版本开始还引入了红黑树。</p><p><strong>再哈希法：</strong>这种方法是同时构造多个不同的哈希函数：Hi=RH1（key） i=1，2，…，k当哈希地址Hi=RH1（key）发生冲突时，再计算Hi=RH2（key）……，直到冲突不再产生。这种方法<strong>不易产生聚集，但增加了计算时间</strong>。</p><p><strong>建立公共溢出区：</strong>这种方法的基本思想是：将哈希表分为基本表和溢出表两部分，凡是和基本表发生冲突的元素，一律填入溢出表。</p><h2 id="引发的内存泄漏分析"><a href="#引发的内存泄漏分析" class="headerlink" title="引发的内存泄漏分析"></a>引发的内存泄漏分析</h2><h3 id="引用分类"><a href="#引用分类" class="headerlink" title="引用分类"></a>引用分类</h3><p><strong>强引用</strong>就是指在程序代码之中普遍存在的，类似“Object obj=new Object（）”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象实例。</p><p><strong>软引用</strong>是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象实例列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。<font color="red">比如浏览器的后退页面可以使用</font></p><p><strong>弱引用</strong>也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象实例只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象实例。在JDK 1.2之后，提供了WeakReference类来实现弱引用。</p><p><strong>虚引用</strong>也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象实例是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象实例被收集器回收时收到一个系统通知。在JDK 1.2之后，提供了PhantomReference类来实现虚引用。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>每个Thread 维护一个 ThreadLocalMap，这个映射表的 key 是 ThreadLocal实例本身，value 是真正需要存储的 Object，也就是说 ThreadLocal 本身并不存储值，它只是作为一个 key 来让线程从 ThreadLocalMap 获取 value。仔细观察ThreadLocalMap，这个map是使用 ThreadLocal 的弱引用作为 Key 的，弱引用的对象在 GC 时会被回收。</p><p>这样，当把threadlocal变量置为null以后，没有任何强引用指向threadlocal实例，所以threadlocal将会被gc回收。这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value，而这块value永远不会被访问到了，所以存在着内存泄露。</p><p><strong>解决办法：</strong>不在需要使用ThreadLocal变量后，都调用它的remove()方法，清除数据。</p><p><strong>为什么使用弱引用而不是强引用？</strong></p><p>分两种情况讨论：</p><p>key 使用强引用：对ThreadLocal对象实例的引用被置为null了，但是ThreadLocalMap还持有这个ThreadLocal对象实例的强引用，如果没有手动删除，ThreadLocal的对象实例不会被回收，导致Entry内存泄漏。</p><p>key 使用弱引用：对ThreadLocal对象实例的引用被被置为null了，由于ThreadLocalMap持有ThreadLocal的弱引用，即使没有手动删除，ThreadLocal的对象实例也会被回收。value在下一次ThreadLocalMap调用set，get，remove都有机会被回收。</p><p>比较两种情况，我们可以发现：由于ThreadLocalMap的生命周期跟Thread一样长，如果都没有手动删除对应key，都会导致内存泄漏，但是使用弱引用可以多一层保障。</p><p>因此，ThreadLocal内存泄漏的根源是：由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏，而不是因为弱引用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>JVM利用设置ThreadLocalMap的Key为弱引用，来避免内存泄露。</p><p>JVM利用调用remove、get、set方法的时候，回收弱引用。</p><p>当ThreadLocal存储很多Key为null的Entry的时候，而不再去调用remove、get、set方法，那么将导致内存泄漏。</p><p>使用<strong>线程池+</strong> ThreadLocal时要小心，因为这种情况下，线程是一直在不断的重复运行的，从而也就造成了value可能造成累积的情况。</p><h3 id="错误使用ThreadLocal导致线程不安全"><a href="#错误使用ThreadLocal导致线程不安全" class="headerlink" title="错误使用ThreadLocal导致线程不安全"></a>错误使用ThreadLocal导致线程不安全</h3><p>ThreadLocalMap中保存的其实是对象的一个引用，这样的话，当有其他线程对这个引用指向的对象实例做修改时，其实也同时影响了所有的线程持有的对象引用所指向的同一个对象实例。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-CompleteableFuture</title>
      <link href="/posts/cp-family/5/"/>
      <url>/posts/cp-family/5/</url>
      
        <content type="html"><![CDATA[<h2 id="CompleteableFuture"><a href="#CompleteableFuture" class="headerlink" title="CompleteableFuture"></a>CompleteableFuture</h2><p>JDK1.8才新加入的一个实现类CompletableFuture，实现了Future， CompletionStage两个接口。实现了Future接口，意味着可以通过阻塞或者轮询的方式获得结果。CompletionStage是一个接口，从命名上看得知是一个完成的阶段，它代表了一个特定的计算的阶段，可以同步或者异步的被完成。</p><span id="more"></span><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>除了直接new出一个CompletableFuture的实例，还可以通过<strong>工厂方法</strong>创建CompletableFuture的实例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Returns a new CompletableFuture that is asynchronously completed * by a task running in the {@link ForkJoinPool#commonPool()} with * the value obtained by calling the given Supplier. * * @param supplier a function returning the value to be used * to complete the returned CompletableFuture * @param &lt;U> the function's return type * @return the new CompletableFuture */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>U<span class="token operator">></span> supplier<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asyncSupplyStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> supplier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Returns a new CompletableFuture that is asynchronously completed * by a task running in the given executor with the value obtained * by calling the given Supplier. * * @param supplier a function returning the value to be used * to complete the returned CompletableFuture * @param executor the executor to use for asynchronous execution * @param &lt;U> the function's return type * @return the new CompletableFuture */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span>Supplier<span class="token operator">&lt;</span>U<span class="token operator">></span> supplier<span class="token punctuation">,</span>                                                   Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asyncSupplyStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> supplier<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Returns a new CompletableFuture that is asynchronously completed * by a task running in the {@link ForkJoinPool#commonPool()} after * it runs the given action. * * @param runnable the action to run before completing the * returned CompletableFuture * @return the new CompletableFuture */</span><span class="token keyword">public</span> <span class="token keyword">static</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">runAsync</span><span class="token punctuation">(</span>Runnable runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asyncRunStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Returns a new CompletableFuture that is asynchronously completed * by a task running in the given executor after it runs the given * action. * * @param runnable the action to run before completing the * returned CompletableFuture * @param executor the executor to use for asynchronous execution * @return the new CompletableFuture */</span><span class="token keyword">public</span> <span class="token keyword">static</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">runAsync</span><span class="token punctuation">(</span>Runnable runnable<span class="token punctuation">,</span>                                               Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asyncRunStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> runnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">Asynsc表示异步；runAsync异步返回一个结果，supplyAsync返回void；第二个参数Executor表示自己创建的线程池，否则采用默认的ForkJoinPool.commonPool()线程池</font></p><h4 id="获得结果的方法："><a href="#获得结果的方法：" class="headerlink" title="获得结果的方法："></a>获得结果的方法：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Waits if necessary for this future to complete, and then * returns its result. * * @return the result value * @throws CancellationException if this future was cancelled * @throws ExecutionException if this future completed exceptionally * @throws InterruptedException if the current thread was interrupted * while waiting */</span><span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException <span class="token punctuation">{</span>    Object r<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">reportGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> result<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token function">waitingGet</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">:</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Waits if necessary for at most the given time for this future * to complete, and then returns its result, if available. * * @param timeout the maximum time to wait * @param unit the time unit of the timeout argument * @return the result value * @throws CancellationException if this future was cancelled * @throws ExecutionException if this future completed exceptionally * @throws InterruptedException if the current thread was interrupted * while waiting * @throws TimeoutException if the wait timed out */</span><span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>    Object r<span class="token punctuation">;</span>    <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">reportGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> result<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token function">timedGet</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span> <span class="token operator">:</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * join返回计算的结果或者抛出一个unchecked异常(CompletionException)，它和get对抛出的异常的处理有些细微的区别。 * Returns the result value when complete, or throws an * (unchecked) exception if completed exceptionally. To better * conform with the use of common functional forms, if a * computation involved in the completion of this * CompletableFuture threw an exception, this method throws an * (unchecked) {@link CompletionException} with the underlying * exception as its cause. * * @return the result value * @throws CancellationException if the computation was cancelled * @throws CompletionException if this future completed * exceptionally or a completion computation threw an exception */</span><span class="token keyword">public</span> T <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object r<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">reportJoin</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> result<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token function">waitingGet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">:</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 如果结果已经计算完则返回结果或者抛出异常，否则返回给定的valueIfAbsent值。 * Returns the result value (or throws any encountered exception) * if completed, else returns the given valueIfAbsent. * * @param valueIfAbsent the value to return if not completed * @return the result value, if completed, else the given valueIfAbsent * @throws CancellationException if the computation was cancelled * @throws CompletionException if this future completed * exceptionally or a completion computation threw an exception */</span><span class="token keyword">public</span> T <span class="token function">getNow</span><span class="token punctuation">(</span>T valueIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object r<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> result<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> valueIfAbsent <span class="token operator">:</span> <span class="token function">reportJoin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="辅助方法"><a href="#辅助方法" class="headerlink" title="辅助方法"></a>辅助方法</h4><p>allOf方法是当所有的CompletableFuture都执行完后执行计算。</p><p>anyOf方法是当任意一个CompletableFuture执行完后就会执行计算，计算的结果相同。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Returns a new CompletableFuture that is completed when all of * the given CompletableFutures complete.  If any of the given * CompletableFutures complete exceptionally, then the returned * CompletableFuture also does so, with a CompletionException * holding this exception as its cause.  Otherwise, the results, * if any, of the given CompletableFutures are not reflected in * the returned CompletableFuture, but may be obtained by * inspecting them individually. If no CompletableFutures are * provided, returns a CompletableFuture completed with the value * {@code null}. * * &lt;p>Among the applications of this method is to await completion * of a set of independent CompletableFutures before continuing a * program, as in: {@code CompletableFuture.allOf(c1, c2, * c3).join();}. * * @param cfs the CompletableFutures * @return a new CompletableFuture that is completed when all of the * given CompletableFutures complete * @throws NullPointerException if the array or any of its elements are * {@code null} */</span><span class="token keyword">public</span> <span class="token keyword">static</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">allOf</span><span class="token punctuation">(</span>CompletableFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> cfs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">andTree</span><span class="token punctuation">(</span>cfs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cfs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Returns a new CompletableFuture that is completed when any of * the given CompletableFutures complete, with the same result. * Otherwise, if it completed exceptionally, the returned * CompletableFuture also does so, with a CompletionException * holding this exception as its cause.  If no CompletableFutures * are provided, returns an incomplete CompletableFuture. * * @param cfs the CompletableFutures * @return a new CompletableFuture that is completed with the * result or exception of any of the given CompletableFutures when * one completes * @throws NullPointerException if the array or any of its elements are * {@code null} */</span><span class="token keyword">public</span> <span class="token keyword">static</span> CompletableFuture<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">anyOf</span><span class="token punctuation">(</span>CompletableFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> cfs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orTree</span><span class="token punctuation">(</span>cfs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cfs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="CompletableFuture方法归类"><a href="#CompletableFuture方法归类" class="headerlink" title="CompletableFuture方法归类"></a>CompletableFuture方法归类</h3><h4 id="变换类-thenApply："><a href="#变换类-thenApply：" class="headerlink" title="变换类 thenApply："></a>变换类 thenApply：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">thenApply</span><span class="token punctuation">(</span>    Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniApplyStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>    Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniApplyStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">thenApplyAsync</span><span class="token punctuation">(</span>    Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> fn<span class="token punctuation">,</span> Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniApplyStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关键入参是函数式接口Function。它的入参是上一个阶段计算后的结果，返回值是经过转化后结果。</p><h4 id="消费类-thenAccept："><a href="#消费类-thenAccept：" class="headerlink" title="消费类 thenAccept："></a>消费类 thenAccept：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">thenAccept</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniAcceptStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniAcceptStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">,</span>                                               Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniAcceptStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>关键入参是函数式接口Consumer。它的入参是上一个阶段计算后的结果， 没有返回值。</p><h4 id="执行操作类-thenRun："><a href="#执行操作类-thenRun：" class="headerlink" title="执行操作类 thenRun："></a>执行操作类 thenRun：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">thenRun</span><span class="token punctuation">(</span>Runnable action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniRunStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">thenRunAsync</span><span class="token punctuation">(</span>Runnable action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniRunStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">thenRunAsync</span><span class="token punctuation">(</span>Runnable action<span class="token punctuation">,</span>                                            Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniRunStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对上一步的计算结果不关心，执行下一个操作，入参是一个Runnable的实例，表示上一步完成后执行的操作。</p><h4 id="结合转化类"><a href="#结合转化类" class="headerlink" title="结合转化类:"></a>结合转化类:</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token punctuation">,</span>V<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">thenCombine</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> other<span class="token punctuation">,</span>    BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> U<span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">biApplyStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> other<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token punctuation">,</span>V<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">thenCombineAsync</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> other<span class="token punctuation">,</span>    BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> U<span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">biApplyStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> other<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token punctuation">,</span>V<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">thenCombineAsync</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> other<span class="token punctuation">,</span>    BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">super</span> U<span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> fn<span class="token punctuation">,</span> Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">biApplyStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要上一步的处理返回值，并且other代表的CompletionStage 有返回值之后，利用这两个返回值，进行转换后返回指定类型的值。</p><p>两个CompletionStage是并行执行的，它们之间并没有先后依赖顺序，other并不会等待先前的CompletableFuture执行完毕后再执行。</p><h4 id="结合转化类-1"><a href="#结合转化类-1" class="headerlink" title="结合转化类:"></a>结合转化类:</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">thenCompose</span><span class="token punctuation">(</span>    Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token operator">&lt;</span>U<span class="token operator">>></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniComposeStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">thenComposeAsync</span><span class="token punctuation">(</span>    Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token operator">&lt;</span>U<span class="token operator">>></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniComposeStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">thenComposeAsync</span><span class="token punctuation">(</span>    Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">CompletionStage</span><span class="token operator">&lt;</span>U<span class="token operator">>></span> fn<span class="token punctuation">,</span>    Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniComposeStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于Compose可以连接两个CompletableFuture，其内部处理逻辑是当第一个CompletableFuture处理没有完成时会合并成一个CompletableFuture，如果处理完成，第二个future会紧接上一个CompletableFuture进行处理。</p><p>第一个CompletableFuture 的处理结果是第二个future需要的输入参数。</p><h4 id="结合消费类"><a href="#结合消费类" class="headerlink" title="结合消费类:"></a>结合消费类:</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">thenAcceptBoth</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> other<span class="token punctuation">,</span>    BiConsumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> U<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">biAcceptStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">thenAcceptBothAsync</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> other<span class="token punctuation">,</span>    BiConsumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> U<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">biAcceptStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">thenAcceptBothAsync</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> other<span class="token punctuation">,</span>    BiConsumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> U<span class="token operator">></span> action<span class="token punctuation">,</span> Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">biAcceptStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要上一步的处理返回值，并且other代表的CompletionStage 有返回值之后，利用这两个返回值，进行消费</p><h4 id="运行后执行类："><a href="#运行后执行类：" class="headerlink" title="运行后执行类："></a>运行后执行类：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">runAfterBoth</span><span class="token punctuation">(</span>CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> other<span class="token punctuation">,</span>                                            Runnable action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">biRunStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">runAfterBothAsync</span><span class="token punctuation">(</span>CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> other<span class="token punctuation">,</span>                                                 Runnable action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">biRunStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">runAfterBothAsync</span><span class="token punctuation">(</span>CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> other<span class="token punctuation">,</span>                                                 Runnable action<span class="token punctuation">,</span>                                                 Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">biRunStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>不关心这两个CompletionStage的结果，只关心这两个CompletionStage都执行完毕，之后再进行操作（Runnable）。</p><h4 id="取最快转换类："><a href="#取最快转换类：" class="headerlink" title="取最快转换类："></a>取最快转换类：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">applyToEither</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> U<span class="token operator">></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orApplyStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> other<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">applyToEitherAsync</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> U<span class="token operator">></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orApplyStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> other<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">applyToEitherAsync</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> U<span class="token operator">></span> fn<span class="token punctuation">,</span>    Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orApplyStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>两个CompletionStage，谁计算的快，我就用那个CompletionStage的结果进行下一步的转化操作。现实开发场景中，总会碰到有两种渠道完成同一个事情，所以就可以调用这个方法，找一个最快的结果进行处理。</p><h4 id="取最快消费类："><a href="#取最快消费类：" class="headerlink" title="取最快消费类："></a>取最快消费类：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">acceptEither</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orAcceptStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">acceptEitherAsync</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orAcceptStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">acceptEitherAsync</span><span class="token punctuation">(</span>    CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> other<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> action<span class="token punctuation">,</span>    Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orAcceptStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>两个CompletionStage，谁计算的快，我就用那个CompletionStage的结果进行下一步的消费操作。</p><h4 id="取最快运行后执行类："><a href="#取最快运行后执行类：" class="headerlink" title="取最快运行后执行类："></a>取最快运行后执行类：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">runAfterEither</span><span class="token punctuation">(</span>CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> other<span class="token punctuation">,</span>                                              Runnable action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orRunStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">runAfterEitherAsync</span><span class="token punctuation">(</span>CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> other<span class="token punctuation">,</span>                                                   Runnable action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orRunStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">runAfterEitherAsync</span><span class="token punctuation">(</span>CompletionStage<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> other<span class="token punctuation">,</span>                                                   Runnable action<span class="token punctuation">,</span>                                                   Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">orRunStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>两个CompletionStage，任何一个完成了都会执行下一步的操作（Runnable）。</p><h4 id="异常补偿类："><a href="#异常补偿类：" class="headerlink" title="异常补偿类："></a>异常补偿类：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">exceptionally</span><span class="token punctuation">(</span>    Function<span class="token operator">&lt;</span>Throwable<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniExceptionallyStage</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当运行时出现了异常，可以通过exceptionally进行补偿。</p><h4 id="运行后记录结果类："><a href="#运行后记录结果类：" class="headerlink" title="运行后记录结果类："></a>运行后记录结果类：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">whenComplete</span><span class="token punctuation">(</span>    BiConsumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> Throwable<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniWhenCompleteStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">whenCompleteAsync</span><span class="token punctuation">(</span>    BiConsumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> Throwable<span class="token operator">></span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniWhenCompleteStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">whenCompleteAsync</span><span class="token punctuation">(</span>    BiConsumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> Throwable<span class="token operator">></span> action<span class="token punctuation">,</span> Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniWhenCompleteStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>action执行完毕后它的结果返回原始的CompletableFuture的计算结果或者返回异常。所以不会对结果产生任何的作用。</p><h4 id="运行后处理结果类："><a href="#运行后处理结果类：" class="headerlink" title="运行后处理结果类："></a>运行后处理结果类：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">handle</span><span class="token punctuation">(</span>    BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> Throwable<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniHandleStage</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">handleAsync</span><span class="token punctuation">(</span>    BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> Throwable<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniHandleStage</span><span class="token punctuation">(</span>asyncPool<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>U<span class="token operator">></span> CompletableFuture<span class="token operator">&lt;</span>U<span class="token operator">></span> <span class="token function">handleAsync</span><span class="token punctuation">(</span>    BiFunction<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token punctuation">,</span> Throwable<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token operator">></span> fn<span class="token punctuation">,</span> Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">uniHandleStage</span><span class="token punctuation">(</span><span class="token function">screenExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行完成时，对结果的处理。这里的完成时有两种情况，一种是正常执行，返回值。另外一种是遇到异常抛出造成程序的中断。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-等待/通知机制</title>
      <link href="/posts/cp-family/4/"/>
      <url>/posts/cp-family/4/</url>
      
        <content type="html"><![CDATA[<h2 id="等待-x2F-通知机制"><a href="#等待-x2F-通知机制" class="headerlink" title="等待/通知机制"></a>等待/通知机制</h2><p>线程之间相互配合，完成某项工作，比如：一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作，整个过程开始于一个线程，而最终执行又是另一个线程。</p><p>前者是生产者，后者就是消费者，简单的办法是让消费者线程不断地<strong>循环检查</strong>变量是否符合预期在while循环中设置不满足的条件，如果条件满足则退出while循环，从而完成消费者的工作。却存在如下问题：</p><p>1）难以确保及时性。</p><p>2）难以降低开销。如果降低睡眠的时间，比如休眠1毫秒，这样消费者能更加迅速地发现条件变化，但是却可能消耗更多的处理器资源，造成了无端的浪费。</p><p>等待/通知机制则可以很好的避免，这种机制是指一个线程A调用了对象O的wait()方法进入等待状态，而另一个线程B调用了对象O的notify()或者notifyAll()方法，线程A收到通知后从对象O的wait()方法返回，进而执行后续操作。</p><p><strong>notify()</strong> ：通知一个在对象上等待的线程，使其从wait方法返回，而返回的前提是该线程获取到了对象的锁，没有获得锁的线程重新进入WAITING状态。</p><p><strong>notifyAll()</strong> ：通知所有等待在该对象上的线程</p><p><strong>wait()</strong> ：调用该方法的线程进入 WAITING状态，只有等待另外线程的通知或被中断才会返回.需要注意，调用wait()方法后，会释放对象的锁</p><p><strong>wait(long)</strong> ：超时等待一段时间，这里的参数时间是毫秒，也就是等待长达n毫秒，如果没有通知就超时返回</p><p><strong>wait (long，int)</strong> ：对于超时时间更细粒度的控制，可以达到纳秒</p><h3 id="等待和通知的标准范式"><a href="#等待和通知的标准范式" class="headerlink" title="等待和通知的标准范式"></a>等待和通知的标准范式</h3><p>等待方遵循如下原则。</p><p>1）获取对象的锁。</p><p>2）如果条件不满足，那么调用对象的wait()方法，被通知后仍要检查条件。</p><p>3）条件满足则执行对应的逻辑。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>条件不满足<span class="token punctuation">)</span><span class="token punctuation">{</span>        对象<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    业务逻辑<span class="token punctuation">}</span></code></pre><p>通知方遵循如下原则。</p><p>1）获得对象的锁。</p><p>2）改变条件。</p><p>3）通知所有等待在对象上的线程。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span>    改变条件    对象<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><font color="red">在调用wait()、notify()系列方法之前，线程必须要获得该对象的对象级别锁，即只能在同步方法或同步块中调用wait()方法、notify()系列方法</font></p><p>1、等待方条件不满足的线程，调用对象.wait() 进入等待状态，同时释放锁</p><p>2、通知方线程获取到锁以后，调用对象.notifyAll() 唤醒所有等待中的线程</p><p>3、处于等待中的线程相互竞争，获取到锁的线程循环满足条件退出，未获取到锁的线程循环不满足条件不会退出</p><p>4、第3步获取到锁的线程退出循环执行业务逻辑，完成后释放锁，此时剩余没有抢到锁的线程再次竞争。</p><p>重复步骤3和4，直到所有等待的线程都成功获取到锁，退出循环执行完毕</p><h4 id="notify和notifyAll应该用谁"><a href="#notify和notifyAll应该用谁" class="headerlink" title="notify和notifyAll应该用谁"></a>notify和notifyAll应该用谁</h4><p>尽可能用notifyall()，谨慎使用notify()，因为notify()只会唤醒一个线程，我们无法确保被唤醒的这个线程一定就是我们需要唤醒的线程</p><h4 id="等待超时模式实现一个连接池"><a href="#等待超时模式实现一个连接池" class="headerlink" title="等待超时模式实现一个连接池"></a>等待超时模式实现一个连接池</h4><p>调用场景：调用一个方法时等待一段时间（一般来说是给定一个时间段），如果该方法能够在给定的时间段之内得到结果，那么将结果立刻返回，反之，超时返回默认结果。</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="方法和锁"><a href="#方法和锁" class="headerlink" title="方法和锁"></a>方法和锁</h3><p>调用yield() 、sleep()、wait()、notify()等方法对锁有何影响？</p><p>yield() 、sleep()被调用后，都不会释放当前线程所持有的锁。</p><p>调用wait()方法后，会释放当前线程持有的锁，而且当前被唤醒后，会重新去竞争锁，锁竞争到后才会执行wait方法后面的代码。</p><p>调用notify()系列方法后，对锁无影响，线程只有在syn同步代码执行完后才会自然而然的释放锁，所以notify()系列方法一般都是syn同步代码的最后一行。</p><h3 id="wait和notify"><a href="#wait和notify" class="headerlink" title="wait和notify"></a>wait和notify</h3><p><strong>为什么wait和notify方法要在同步块中调用？</strong></p><p>主要是因为Java API强制要求这样做，如果你不这么做，你的代码会抛出IllegalMonitorStateException异常。</p><p>这个问题并不是说只在Java语言中会出现，而是会在所有的多线程环境下出现。</p><p>思考什么是<strong>lost wake up问题</strong>。</p><p>怎么解决<strong>lost wake up问题</strong>？</p><p>让消费者和生产者竞争一把锁，竞争到了的，才能够修改值</p><p><strong>为什么你应该在循环中检查等待条件?</strong></p><p>处于等待状态的线程可能会收到错误警报和伪唤醒，如果不在循环中检查等待条件，程序就会在没有满足结束条件的情况下退出。因此，当一个等待线程醒来时，不能认为它原来的等待状态仍然是有效的，在notify()方法调用之后和等待线程醒来之前这段时间它可能会改变。这就是在循环中使用wait()方法效果更好的原因。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入学习Java的线程二</title>
      <link href="/posts/cp-family/3/"/>
      <url>/posts/cp-family/3/</url>
      
        <content type="html"><![CDATA[<h2 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程</h2><p>线程是操作系统层面的实体，那么Java中的线程怎么和操作系统的线程对应起来？</p><p>任何语言实现线程主要有三种方式：使用内核线程实现（1:1实现)，使用用户线程实现（1:N实现），使用用户线程加轻量级进程混合实现（N:M实现）。Java就是第三种混合实现。</p><span id="more"></span><ul><li>内核线程实现（1:1实现)</li></ul><p>优点：各种线程操作如创建、析构及同步，全部交由操作系统来完成，对用户来说只要调用系统的API即可，<strong>实现简单</strong>；每个线程是<strong>独立的</strong>调度单元，阻塞也不会影响其他线程。</p><p>缺点：系统调用<strong>代价高昂</strong>，需要用户态（User Mode）和内核态（Kernel Mode）的切换；每个用户线程都意味着有一个操作系统线程与其对应，操作系统的<strong>线程资源有限</strong>。</p><ul><li>用户线程实现（1:N实现）</li></ul><p>优点：用户线程的建立、同步、销毁和调度完全在用户态中完成，<strong>不需要系统内核支援</strong>，不需要切换到内核态， 因此操作可以是<strong>非常快速且低消耗</strong>的， 也能够支持<strong>规模更大</strong>的线程数量。</p><p>缺点：<strong>没有系统内核的支援</strong>，所有的线程操作都需要由用户程序自己去处理。线程的创建、销毁、切换和调度都是用户必须考虑的问题。</p><p><font color="red">一般的应用程序都不倾向使用用户线程，但是近年来许多新的、以高并发为卖点的编程语言又普遍支持了用户线程，譬如Golang。Java有了语言性能的竞争压力，于是JDK19开始有了虚拟线程先行版本，等后续有了长期版本可能会投入使用</font></p><ul><li>混合实现（N:M实现）</li></ul><p>一种将内核线程与用户线程一起使用的实现方式， 被称为N：M实现。</p><p>用户线程还是完全建立在用户空间中，因此用户线程的创建、切换、析构等操作依然廉价，并且可以<strong>支持大规模</strong>的用户线程并发。</p><p>同样又<strong>可以使用内核提供的</strong>线程调度功能及处理器映射，并且用户线程的系统调用要通过内核线程来完成。</p><p><strong>Java线程的实现</strong></p><p>Java线程在早期的Classic虚拟机上（JDK 1.2以前），是用户线程实现的， 但从JDK 1.3起， 主流商用Java虚拟机的线程模型普遍都被替换为基于操作系统原生线程模型来实现，即采用1：1的线程模型。</p><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><h4 id="出现的原因"><a href="#出现的原因" class="headerlink" title="出现的原因"></a>出现的原因</h4><p>主流的内核线程模型，需要映射到操作系统上的线程，其天然的缺陷是<strong>切换、调度成本高昂</strong>，系统能容纳的<strong>线程数量也很有限</strong>， 很多场景已经不适宜了。</p><p>另外常见的Java Web服务器，比如Tomcat的线程池的容量通常在几十个到两百之间，当把<strong>数以百万计的请求</strong>往线程池里面灌时，系统即使能处理得过来，但其中的<strong>切换损耗</strong>也是相当可观的。</p><p>随着<strong>微服务</strong>的兴起，这种服务细分的架构在<strong>减少单个服务复杂度、增加复用性</strong>的同时，也不可避免地<strong>增加了服务的数量，缩短了留给每个服务的响应时间</strong>。</p><p>再有Go语言等支持用户线程等新型语言给Java带来了巨大的压力，也使得Java引入用户线程成为了一个绕不开的话题。</p><p><font color="red">操作系统线程虽然简单，但是操作成本高昂；加上操作系统的线程资源本就有限；微服务大火带来的各个服务请求大增且必须极短的时间完成响应；还有其他语言带来的性能竞争压力。Java必须迈出这一步，把用户线程用起来。</font></p><h4 id="协程简介"><a href="#协程简介" class="headerlink" title="协程简介"></a>协程简介</h4><p>最初多数的用户线程是被设计成协同式调度（Cooperative Scheduling）的，所以它有了一个别名——“协程”（Coroutine），完整地做调用栈的保护、恢复工作，所以今天也被称为“有栈协程”（Stackfull Coroutine）。</p><p>协程的主要优势是<strong>轻量</strong>，无论是有栈协程还是无栈协程，都要比传统内核线程要轻量得多。</p><p>在64位机器中，一个线程创建完即使什么也不做，也会占用1M的内存。协程只需要几百字节到几KB。虚拟机中线程池容量两百就不小了，而支持协程的应用可以同时并存数十万的协程。</p><p>协程的局限：需要在应用层面实现的内容（调用栈、调度器这些）特别多，同时因为协程基本上是协同式调度，则协同式调度的缺点自然在协程上也存在。</p><p><font color="red">总的来说，协程机制适用于被阻塞的，且需要大量并发的场景（网络io），不适合大量计算的场景，因为协程提供规模（更高的吞吐量），而不是速度（更低的延迟）。</font></p><h4 id="纤程-Java中的协程"><a href="#纤程-Java中的协程" class="headerlink" title="纤程-Java中的协程"></a>纤程-Java中的协程</h4><p>Java开发组就Java中协程的实现也做了很多努力，OpenJDK在2018年创建了Loom项目，这是Java的官方解决方案，并用了“纤程（Fiber）”这个名字。</p><p>Loom项目背后的意图是<strong>重新提供对用户线程的支持</strong>，但这些新功能不是为了取代当前基于操作系统的线程实现，而是会有两个并发编程模型在Java虚拟机中<strong>并存</strong>，可以在程序中同时使用。新模型有意地保持了与目前线程模型<strong>相似的API设计</strong>，它们甚至可以拥有一个共同的基类，这样现有的代码就不需要为了使用纤程而进行过多改动，甚至不需要知道背后采用了哪个并发编程模型。 </p><p>目前Java中比较出名的协程库是<strong>Quasar[ˈkweɪzɑː(r)]<strong>（Loom项目的Leader就是Quasar的作者Ron Pressler），Quasar的实现原理是</strong>字节码注入</strong>，在字节码层面对当前被调用函数中的所有局部变量进行保存和恢复。这种不依赖Java虚拟机的现场保护虽然能够工作，但影响性能。</p><h4 id="Quasar实战"><a href="#Quasar实战" class="headerlink" title="Quasar实战"></a>Quasar实战</h4><p>1、引入Maven依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>co<span class="token punctuation">.</span>paralleluniverse<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>quasar<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">0.7</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>2、示例代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> co<span class="token punctuation">.</span>paralleluniverse<span class="token punctuation">.</span>fibers<span class="token punctuation">.</span>Fiber<span class="token punctuation">;</span><span class="token keyword">import</span> co<span class="token punctuation">.</span>paralleluniverse<span class="token punctuation">.</span>fibers<span class="token punctuation">.</span>SuspendExecution<span class="token punctuation">;</span><span class="token keyword">import</span> co<span class="token punctuation">.</span>paralleluniverse<span class="token punctuation">.</span>strands<span class="token punctuation">.</span>Strand<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StopWatch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>IntStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FiberExample</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        CountDownLatch count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Fiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">throws</span> SuspendExecution<span class="token punctuation">,</span> InterruptedException            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Quasar中Thread和Fiber都被称为Strand,Fiber不能调用Thread.sleep休眠</span>                Strand<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"aa"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束了: "</span> <span class="token operator">+</span> stopWatch<span class="token punctuation">.</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、配置VM参数（Quasar的实现原理是字节码注入，所以在运行应用前，需要配置好quasar-core的java agent地址）：</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>javaagent<span class="token operator">:</span>D<span class="token operator">:</span>\maven_repo\co\paralleluniverse\quasar<span class="token operator">-</span>core\<span class="token number">0.7</span><span class="token punctuation">.</span><span class="token number">9</span>\quasar<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">0.7</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token punctuation">.</span>jar</code></pre><p>4、执行第2步的示例代码，输出结果如下：</p><pre class=" language-java"><code class="language-java">结束了<span class="token operator">:</span> StopWatch <span class="token string">''</span><span class="token operator">:</span> running time <span class="token operator">=</span> <span class="token number">1657592400</span> ns<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>ns         <span class="token operator">%</span>     Task name<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">1657592400</span>  <span class="token number">100</span><span class="token operator">%</span>  </code></pre><p>对比使用线程池的示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StopWatch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CountDownLatch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>IntStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Standard</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        CountDownLatch count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        ExecutorService executorService = Executors.newFixedThreadPool(200);</span>        IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            count<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束了: "</span> <span class="token operator">+</span> stopWatch<span class="token punctuation">.</span><span class="token function">prettyPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Executors.newCachedThreadPool() 输出结果如下</span>结束了<span class="token operator">:</span> StopWatch <span class="token string">''</span><span class="token operator">:</span> running time <span class="token operator">=</span> <span class="token number">5283791500</span> ns<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>ns         <span class="token operator">%</span>     Task name<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">5283791500</span>  <span class="token number">100</span><span class="token operator">%</span>  <span class="token comment" spellcheck="true">// Executors.newFixedThreadPool(200) 输出结果如下</span>结束了<span class="token operator">:</span> StopWatch <span class="token string">''</span><span class="token operator">:</span> running time <span class="token operator">=</span> <span class="token number">50519546700</span> ns<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>ns         <span class="token operator">%</span>     Task name<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">50519546700</span>  <span class="token number">100</span><span class="token operator">%</span>  </code></pre><p>扩展：<code>Executors.newCachedThreadPool()</code>这一种是没有线程数量限制的，当然生产上不允许这样使用。<code>Executors.newFixedThreadPool(200)</code>这一种有线程数量上限，执行速度更慢。</p><p><font color="red">结论：协程在需要处理大量IO的情况下非常具有优势，基于固定的几个线程调度，可以轻松实现百万级的协程处理，而且内存消耗非常平稳。效率是使用线程池的三倍以上</font></p><h4 id="JDK19的虚拟线程（了解）"><a href="#JDK19的虚拟线程（了解）" class="headerlink" title="JDK19的虚拟线程（了解）"></a>JDK19的虚拟线程（了解）</h4><p>2022年9月22日，JDK19（非LTS版本）正式发布，引入了协程，并称为轻量级虚拟线程。但是这个特性目前还是<strong>预览版</strong>，还不能引入生成环境。</p><p>要使用的话，需要通过</p><p>使用javac –release 19 –enable-preview XXX.java编译程序，并使用 java –enable-preview XXX 运行该程序</p><p>在具体使用上和原来的Thread API差别不大：java.lang.Thread.Builder，可以创建和启动虚拟线程，例如：</p><p>Thread thread = Thread.ofVirtual().name(“duke”).unstarted(runnable);</p><p>// Thread.ofPlatform() 则创建传统意义的实例</p><p>或者</p><p>Thread.startVirtualThread(Runnable)</p><p>并通过Executors.newVirtualThreadPerTaskExecutor()提供了虚拟线程池功能。</p><p>在具体实现上，虚拟线程当然是基于用户线程模式实现的，JDK 的调度程序不直接将虚拟线程分配给处理器，而是将虚拟线程分配给实际线程，是一个 M: N 调度，具体的调度程序由已有的ForkJoinPool提供支持。</p><p>但是虚拟线程不是协同调度的，JDK的虚拟线程调度程序通过将虚拟线程挂载到平台线程上来分配要在平台线程上执行的虚拟线程。在运行一些代码之后，虚拟线程可以从其载体卸载。此时平台线程是空闲的，因此调度程序可以在其上挂载不同的虚拟线程，从而使其再次成为载体。</p><p>通常，当虚拟线程阻塞 I/O 或 JDK中的其他阻塞操作(如BlockingQueue.take ())时，它将卸载。当阻塞操作准备完成时(例如，在套接字上已经接收到字节) ，它将虚拟线程提交回调度程序，调度程序将在运营商上挂载虚拟线程以恢复执行。虚拟线程的挂载和卸载频繁且透明，并且不会阻塞任何 OS 线程。</p><h4 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h4><p>Daemon（守护）线程是一种<strong>支持型线程</strong>，因为它主要被用作程序中<strong>后台调度以及支持性</strong>工作。一般用不上，比如垃圾回收线程就是Daemon线程。</p><p>特点：当一个Java虚拟机中不存在<strong>非</strong>Daemon线程的时候，Java虚拟机将会退出。</p><p>使用：可以通过调用Thread.setDaemon(true)将线程设置为Daemon线程。</p><p>注意：Daemon线程被用作完成支持性工作，但是在Java虚拟机退出时Daemon线程中的finally块并不一定会执行。在构建Daemon线程时，不能依靠finally块中的内容来确保执行关闭或清理资源的逻辑。<font color="red">不推荐finally回收资源的一个原因，无法保证finally代码一定会被执行</font></p><h3 id="线程间的通信和协调、协作"><a href="#线程间的通信和协调、协作" class="headerlink" title="线程间的通信和协调、协作"></a>线程间的通信和协调、协作</h3><p>线程间进行通信，或者配合着完成某项工作，离不开线程间的通信和协调、协作。</p><h4 id="管道输入输出流"><a href="#管道输入输出流" class="headerlink" title="管道输入输出流"></a>管道输入输出流</h4><p>进程间有好几种通信机制，其中包括了管道，其实Java的线程里也有<strong>类似的管道</strong>机制，用于线程之间的数据传输，而传输的<strong>媒介为内存</strong>。</p><p>工作中遇到的场景：</p><p>1、互联网金融行业：App点击下载合同，触发导出任务，然后将mysql 中的数据根据导出条件查询出来，生成 Pdf文件，然后将文件上传到 oss，最后发布一个下载文件的链接。</p><p>2、大数据告警系统：年底做业务告警统计时，从本地某个数据源查询数据后，生成 Excel文件，给到指定的 ftp、或是 oss 供客户去下载查阅，或者直接发送到客户的邮箱。</p><p>一般做法是，先将文件写入到本地磁盘，然后从文件磁盘读出来上传到云盘，但是通过Java中的管道输入输出流一步到位，则可以避免写入磁盘这一步。</p><p>Java中的管道输入/输出流主要包括了如下4种具体实现：<code>PipedOutputStream</code>、<code>PipedInputStream</code>、<code>PipedReader</code>和<code>PipedWriter</code>，前两种面向字节，而后两种面向字符。</p><p><font color="red">字节用来处理二进制，字符用来处理文本</font></p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PipedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PipedWriter<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Piped</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        PipedWriter out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PipedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PipedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 将输出流和输入流进行连接，否则在使用时会抛出IOException */</span>        out<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread printThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Print</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"PrintThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        printThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 将键盘的输入，用输出流接收，在实际的业务中，可以将文件流导给输出流 */</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>receive <span class="token operator">=</span> System<span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>receive<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span>        <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Print</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> PipedReader in<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token function">Print</span><span class="token punctuation">(</span>PipedReader in<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>in <span class="token operator">=</span> in<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> receive <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                 * 输入流从输出流接收数据，并在控制台显示 在实际的业务中，可以将输入流直接通过网络通信写出                 */</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>receive <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>receive<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="join方法"><a href="#join方法" class="headerlink" title="join方法"></a>join方法</h4><p><strong>面试题</strong></p><p>现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行？</p><p><strong>join()</strong></p><p>把指定的线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行。比如在线程B中调用了线程A的Join()方法，直到线程A执行完毕后，才会继续执行线程B剩下的代码。</p><h4 id="synchronized内置锁"><a href="#synchronized内置锁" class="headerlink" title="synchronized内置锁"></a>synchronized内置锁</h4><p>Java支持多个线程同时访问一个对象或者对象的成员变量，关键字synchronized可以<strong>修饰方法或者以同步块</strong>的形式来进行使用，它主要确保多个线程在同一个时刻，只能有一个线程处于方法或者同步块中，它保证了线程对变量访问的<strong>可见性和排他性</strong>，又称为<strong>内置锁机制</strong>。</p><p><strong>对象锁和类锁：</strong></p><p>对象锁是用于对象实例方法，或者一个对象实例上的，类锁是用于类的静态方法或者一个类的class对象上的。我们知道，类的对象实例可以有很多个，但是每个类只有一个class对象，所以不同对象实例的对象锁是互不干扰的，但是每个类只有一个类锁。</p><p><font color="red">对象锁：非静态方法，代码块；类锁：静态方法，类的Class</font></p><p>注意：对Integer对象加锁，并且执行了<code>++</code>操作时，加锁会失效</p><p>因为<code>++</code>操作字节码翻译后，是执行的<code>Integer.valueOf(int i)</code>方法，根据源码这个方法每次返回的是一个新对象，每次加锁的都是新对象，所以锁失效</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Integer#valueOf源码如下</span><span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>        <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="volatile，最轻量的通信-x2F-同步机制（注意这里是机制，不是锁）"><a href="#volatile，最轻量的通信-x2F-同步机制（注意这里是机制，不是锁）" class="headerlink" title="volatile，最轻量的通信/同步机制（注意这里是机制，不是锁）"></a>volatile，最轻量的通信/同步机制<font color="red">（注意这里是机制，不是锁）</font></h4><p>volatile保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 类说明：演示Volatile的提供的可见性 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileCase</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> ready<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PrintThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span>    <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PrintThread is running......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ready<span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                 System.out.println("6174");</span>            <span class="token punctuation">}</span>            <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 无限循环</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number = "</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException    <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">PrintThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SleepTools<span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        number <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span>        ready <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        SleepTools<span class="token punctuation">.</span><span class="token function">second</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main is ended!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// SleepTools工具类：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 类说明：线程休眠辅助工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SleepTools</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 按秒休眠     *      * @param seconds 秒数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 按毫秒数休眠     *      * @param seconds 毫秒数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">ms</span><span class="token punctuation">(</span><span class="token keyword">int</span> seconds<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面示例中ready不加volatile修饰时，主线程的修改子线程感知不到，所以程序不会退出循环。</p><p>加了volatile后，子线程可以感知主线程修改了ready的值，迅速退出循环。</p><p>扩展：循环体中添加打印语句也可以退出循环，因为打印方法使用了synchronized关键字</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// System.out.println源码如下</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>另外循环体中添加<code>Thread.sleep()</code>也可以退出循环，原因猜想：线程sleep重新分配CPU后可能会清理缓存</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-深入学习Java的线程</title>
      <link href="/posts/cp-family/2/"/>
      <url>/posts/cp-family/2/</url>
      
        <content type="html"><![CDATA[<h2 id="线程的状态-x2F-生命周期"><a href="#线程的状态-x2F-生命周期" class="headerlink" title="线程的状态/生命周期"></a>线程的状态/生命周期</h2><p>Java中线程的状态分为6种：</p><p>1、初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。</p><p>2、运行(RUNNABLE)：包括就绪（ready）和运行中（running）两种状态。</p><p>线程对象创建后，调用了该对象的start()方法。等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</p><p>3、阻塞(BLOCKED)：表示线程阻塞于锁。<font color="red">仅在等待synchronized释放资源时会进入此状态</font></p><p>4、等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</p><p>5、超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</p><p>6、终止(TERMINATED)：表示该线程已经执行完毕。</p><p><img src="/images/cp/cp-1.png" alt="cp-1"></p><span id="more"></span><h3 id="其他的线程相关方法"><a href="#其他的线程相关方法" class="headerlink" title="其他的线程相关方法"></a>其他的线程相关方法</h3><p>yield()方法：使当前线程让出CPU占有权，但让出的时间是不可设定的。也<strong>不会释放锁资源</strong>。同时执行yield()的线程有可能在进入到就绪状态后会被操作系统再次选中马上又被执行。</p><p>比如，<code>ConcurrentHashMap#initTable</code> 方法中就使用了这个方法</p><p><font color="red">ConcurrentHashMap在new创建后不会马上分配空间，只有当第一次调用put方法时才会分配空间创建数组。而创建数组的速度很快，不需要多个线程一起执行，ConcurrentHashMap是为了解决并发问题，其中一个线程创建数组即可，其他线程调用yield()方法可以使创建数组的线程有更大概率获得CPU的时间片，更快完成创建数组的操作。避免阻塞或者等待这些操作引发的上下文切换等等开销</font></p><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><p>在Java线程中，通过一个整型成员变量priority来控制优先级，优先级的范围从1~10，在线程构建的时候可以通过<code>setPriority(int)</code>方法来修改优先级，默认优先级是5，优先级高的线程分配时间片的数量要多于优先级低的线程。<font color="red">10优先级最高，1优先级最低</font></p><p>设置线程优先级时，针对频繁阻塞（休眠或者I/O操作）的线程需要设置较高优先级，而偏重计算（需要较多CPU时间或者偏运算）的线程则设置较低的优先级，确保处理器不会被独占。</p><p><font color="red">Java中创建的线程最终都会在操作系统上找到对应的线程，不同的操作系统对优先级的设置不同，有的优先级最大100，有的只有三个优先级，所以通过priority设置的优先级很可能和系统调度的优先级不同，导致优先级设置失效。同时也不推荐设置优先级</font></p><h3 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h3><p>线程调度是指系统为线程分配CPU使用权的过程，主要调度方式有两种：</p><p>协同式线程调度(Cooperative Threads-Scheduling)</p><p>抢占式线程调度(Preemptive Threads-Scheduling)</p><p><font color="red">Java是第二种抢占式线程调度，可以充分利用CPU资源</font></p><p>使用协同式线程调度的最大好处是<strong>实现简单</strong>，由于线程要把自己的事情做完后才会通知系统进行线程切换，所以没有线程同步的问题，但是坏处也很明显，如果一个线程出了问题，则程序就会一直阻塞。</p><p>使用抢占式线程调度的多线程系统，每个线程执行的时间以及是否切换都由系统决定。</p><h3 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程</h3><p>线程其实是<strong>操作系统层面</strong>的实体，Java中的线程怎么和操作系统层面对应起来呢？</p><p>任何语言实现线程主要有三种方式：使用内核线程实现（1:1实现)，使用用户线程实现(1:N实现），使用用户线程加轻量级进程混合实现(N:M实现）。</p><h4 id="内核线程实现"><a href="#内核线程实现" class="headerlink" title="内核线程实现"></a>内核线程实现</h4><p>使用内核线程实现的方式也被称为1：1实现。内核线程（Kernel-Level Thread，KLT）就是直接由操作系统内核（Kernel，下称内核）支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。 </p><p>由于内核线程的支持，每个线程都成为一个独立的调度单元，即使其中某一个在系统调用中被阻塞了，也不会影响整个进程继续工作，相关的调度工作也不需要额外考虑，已经由操作系统处理了。</p><p>局限性：首先，由于是基于内核线程实现的，所以各种线程操作，如创建、 析构及同步，都需要进行系统调用。而<strong>系统调用的代价相对较高</strong>， 需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换。其次，每个语言层面的线程都需要有一个内核线程的支持，因此要消耗一定的内核资源（如内核线程的栈空间），因此一个系统支持的<strong>线程数量是有限的</strong>。</p><p><font color="red">Jdk1.2之前使用的就是内核线程实现，程序创建一个线程后操作系统就有一个对应的线程，操作系统对线程的创建、销毁、调度、上下文切换都比较耗资源；创建一个操作系统线程，即使什么也不做，也会占用1M的线程栈空间</font></p><h4 id="用户线程实现"><a href="#用户线程实现" class="headerlink" title="用户线程实现"></a>用户线程实现</h4><p>严格意义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知到用户线程的存在及如何实现的。用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助。 如果程序实现得当， 这种线程不需要切换到内核态， 因此操作可以是<strong>非常快速且低消耗</strong>的， 也能够<strong>支持规模更大的线程</strong>数量， 部分高性能数据库中的多线程就是由用户线程实现的。</p><p>用户线程的<strong>优势在于不需要系统内核支援，劣势也在于没有系统内核的支援</strong>， 所有的线程操作都需要由用户程序自己去处理。线程的创建、销毁、切换和调度都是用户必须考虑的问题，而且由于操作系统只把处理器资源分配到进程，那诸如“阻塞如何处理”“多处理器系统中如何将线程映射到其他处理器上”这类问题解决起来将会异常困难， 甚至有些是不可能实现的。</p><p>因为使用用户线程实现的程序通常都比较复杂，所以一般的应用程序都不倾向使用用户线程。Java语言曾经使用过用户线程，最终又放弃了。 但是近年来许多新的、<strong>以高并发为卖点</strong>的编程语言又普遍支持了用户线程，譬如Golang。</p><p><font color="red">操作系统提供的线程相关方法不能使用，都需要自己来实现。其中很多功能实现起来非常复杂</font></p><p><font color="red">Go语言就实现了自己的用户线程，其中调度部分非常复杂。Java为了更好的在语言性能方面抢占市场，新版的JDK开始引入协程，后续推出的长期版本可能会投入使用</font></p><h4 id="混合实现（市面上多数是这一种）"><a href="#混合实现（市面上多数是这一种）" class="headerlink" title="混合实现（市面上多数是这一种）"></a>混合实现<font color="red">（市面上多数是这一种）</font></h4><p>一种将<strong>内核线程与用户线程一起使用</strong>的实现方式，被称为N:M实现。在这种混合实现下，既存在用户线程，也存在内核线程。</p><p>用户线程还是完全建立在用户空间中，因此用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。</p><p>同样又可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过内核线程来完成。在这种混合模式中，用户线程与轻量级进程的数量比是不定的，是N:M的关系。</p><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p><strong>出现的原因</strong></p><p>随着互联网行业的发展，目前内核线程实现在很多场景已经有点不适宜了。比如，互联网服务架构在处理一次对外部业务请求的响应，往往需要分布在不同机器上的大量服务共同协作来实现，也就是我们常说的<strong>微服务</strong>，这种服务细分的架构在<strong>减少单个服务复杂度、增加复用性</strong>的同时，也不可避免地<strong>增加了服务的数量，缩短了留给每个服务的响应时间</strong>。</p><p>主流的内核线程模型，需要映射到操作系统上的线程，其天然的缺陷是<strong>切换、调度成本高昂</strong>，系统能容纳的<strong>线程数量也很有限</strong>。 </p><p>另外常见的Java Web服务器，比如Tomcat的线程池的容量通常在几十个到两百之间，当把数以百万计的请求往线程池里面灌时，系统即使能处理得过来，但其中的切换损耗也是相当可观的。 </p><p>这样的话，对Java语言来说，<strong>用户线程的重新引入</strong>成为了解决上述问题一个非常可行的方案。</p><p>其次，Go语言等支持用户线程等新型语言给Java带来了巨大的压力，也使得Java引入用户线程成为了一个绕不开的话题。</p><p><font color="red">小结：微服务大火，要求每个服务能处理大量请求；同时每个请求执行的时间很短；加上其他编程语言给的竞争压力，比如Go语言就实现了用户线程</font></p><p><strong>协程简介</strong></p><p>最初多数的用户线程是被设计成协同式调度（Cooperative Scheduling）的，所以它有了一个别名——“协程”（Coroutine）完整地做调用栈的保护、恢复工作，所以今天也被称为“有栈协程”（Stackfull Coroutine）。</p><p>协程的主要优势是<strong>轻量</strong>，无论是有栈协程还是无栈协程，都要比传统内核线程要轻量得多。如果进行量化的话，那么如果不显式设置，则在64位Linux上HotSpot的线程栈容量默认是1MB，此外内核数据结构（Kernel Data Structures）还会额外消耗16KB内存。与之相对的，一个协程的栈通常在几百个字节到几KB之间，所以Java虚拟机里线程池容量达到两百就已经不算小了，而很多支持协程的应用中，同时并存的协程数量可数以十万计。</p><p>协程的局限：需要在应用层面实现的内容（调用栈、调度器这些）特别多，同时因为协程基本上是协同式调度，则协同式调度的缺点自然在协程上也存在。</p><p><font color="red">总的来说，协程机制适用于被阻塞的，且需要大量并发的场景（网络io），不适合大量计算的场景，因为协程提供规模(更高的吞吐量)，而不是速度(更低的延迟)。</font></p><p><strong>纤程-Java中的协程</strong></p><p>Java开发组就Java中协程的实现也做了很多努力，OpenJDK在2018年创建了Loom项目，这是Java的官方解决方案，并用了“纤程（Fiber）”这个名字。</p><p>Loom项目背后的意图是<strong>重新提供对用户线程的支持</strong>，但这些新功能不是为了取代当前基于操作系统的线程实现，而是会有两个并发编程模型在Java虚拟机中<strong>并存</strong>，可以在程序中同时使用。新模型有意地保持了与目前线程模型<strong>相似的API设计</strong>，它们甚至可以拥有一个共同的基类，这样现有的代码就不需要为了使用纤程而进行过多改动，甚至不需要知道背后采用了哪个并发编程模型。 </p><p>目前Java中比较出名的协程库是<strong>Quasar[ˈkweɪzɑː(r)]<strong>（Loom项目的Leader就是Quasar的作者Ron Pressler），Quasar的实现原理是</strong>字节码注入</strong>，在字节码层面对当前被调用函数中的所有局部变量进行保存和恢复。这种不依赖Java虚拟机的现场保护虽然能够工作，但影响性能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程-并发和线程初识</title>
      <link href="/posts/cp-family/1/"/>
      <url>/posts/cp-family/1/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么我们要学习并发编程？"><a href="#为什么我们要学习并发编程？" class="headerlink" title="为什么我们要学习并发编程？"></a>为什么我们要学习并发编程？</h2><p>面试必备；大厂技术标配；非大厂面试加分项；善用并发编程可以提升技术话语权</p><h3 id="为什么开发中需要并发编程？"><a href="#为什么开发中需要并发编程？" class="headerlink" title="为什么开发中需要并发编程？"></a>为什么开发中需要并发编程？</h3><p>(1) 加快响应用户的时间</p><p>(2) 使你的代码模块化，异步化，简单化</p><p>(3) 充分利用CPU的资源<font color="red">，多核CPU，超线程技术</font></p><span id="more"></span><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>我们常听说的是应用程序，也就是app，由指令和数据组成。</p><p>不运行app时，就是保存在磁盘上的一些二进制代码</p><p>当运行app时，指令要运行，数据要读写，就必须将指令加载至 CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备，从这种角度来说，进程就是用来<strong>加载指令、管理内存、管理 IO</strong>的。</p><p>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如记事本、画图、浏览器 等），也有的程序只能启动一个实例进程（例如网易云音乐、360 安全卫士等）。</p><p>进程分为<strong>系统进程和用户进程</strong>。凡是用于完成操作系统的各种功能的进程就是系统进程，它们就是处于运行状态下的操作系统本身，用户进程就是所有由你启动的进程。</p><p><font color="red">站在操作系统的角度，进程是程序运行资源分配（以内存为主）的最小单位。</font></p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>一个机器中肯定会运行很多的程序，CPU又是有限的，怎么让有限的CPU运行这么多程序呢？就需要一种机制在程序之间进行协调，也就所谓CPU调度。<font color="red">线程则是CPU调度的最小单位。</font></p><p>线程必须<strong>依赖于进程而存在</strong>，线程是进程中的一个实体，是<strong>CPU调度和分派的基本单位</strong>，它是比进程更小的、能独立运行的基本单位。线程自己基本上不拥有系统资源，只拥有在运行中必不可少的资源（如程序计数器，一组寄存器和栈），但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。一个进程可以拥有多个线程，一个线程必须有一个父进程。线程，有时也被称为轻量级进程（Lightweight Process，LWP），早期Linux的线程实现几乎就是复用的进程，后来才独立出自己的API。</p><p><strong>Java线程的无处不在</strong></p><p>Java中不管任何程序都必须启动一个main函数的主线程; Java Web开发里面的定时任务、定时器、JSP和 Servlet、异步消息处理机制,远程访问接口RM等,任何一个监听事件，onclick的触发事件等都离不开线程和并发的知识。</p><h2 id="大厂面试题"><a href="#大厂面试题" class="headerlink" title="大厂面试题"></a>大厂面试题</h2><h3 id="大厂常见的面试题就是，进程间通信有几种方式？"><a href="#大厂常见的面试题就是，进程间通信有几种方式？" class="headerlink" title="大厂常见的面试题就是，进程间通信有几种方式？"></a>大厂常见的面试题就是，进程间通信有几种方式？</h3><p>1、 管道，分为匿名管道（pipe）及命名管道（named pipe）：匿名管道可用于具有亲缘关系的父子进程间的通信，命名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。</p><p>2、信号（signal）：信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的。</p><p>3、消息队列（message queue）：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息。</p><p>4、共享内存（shared memory）：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。</p><p>5、信号量（semaphore）：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段。</p><p>6、套接字（socket）：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。同一机器中的进程还可以使用Unix domain socket（比如同一机器中MySQL中的控制台mysql shell和MySQL服务程序的连接），这种方式不需要经过网络协议栈，不需要打包拆包、计算校验和、维护序号和应答等，比纯粹基于网络的进程间通信肯定效率更高。</p><h3 id="CPU核心数和线程数的关系"><a href="#CPU核心数和线程数的关系" class="headerlink" title="CPU核心数和线程数的关系"></a>CPU核心数和线程数的关系</h3><p>目前主流CPU都是<strong>多核</strong>的，线程是<strong>CPU调度的最小单位</strong>。同一时刻，一个CPU核心只能运行一个线程，也就是CPU内核和同时运行的线程数是1:1的关系，也就是说8核CPU同时可以执行8个线程的代码。但 Intel引入<strong>超线程技术</strong>后，产生了逻辑处理器的概念，使核心数与线程数形成1:2的关系。</p><p>在Java中提供了<code>Runtime.getRuntime().availableProcessors()</code>，可以让我们获取当前的CPU核心数，注意这个核心数指的是<strong>逻辑处理器数</strong>。</p><p>获得当前的CPU核心数在并发编程中很重要，并发编程下的性能优化往往和CPU核心数密切相关。</p><h3 id="上下文切换（Context-switch）"><a href="#上下文切换（Context-switch）" class="headerlink" title="上下文切换（Context switch）"></a>上下文切换（Context switch）</h3><p>每个线程在使用CPU时总是要使用CPU中的资源，比如CPU寄存器和程序计数器。这就意味着，操作系统要<strong>保证线程在调度前后的正常执行</strong>，所以，操作系统中就有上下文切换的概念，它是指CPU（中央处理单元）<strong>从一个进程或线程到另一个进程或线程的切换</strong>。</p><p><em>上下文是CPU寄存器和程序计数器在任何时间点的内容。</em></p><p><em>寄存器是CPU内部的一小部分非常快的内存（相对于CPU内部的缓存和CPU外部较慢的RAM主内存），它通过提供对常用值的快速访问来加快计算机程序的执行。</em></p><p><em>程序计数器是一种专门的寄存器，它指示CPU在其指令序列中的位置，并保存着正在执行的指令的地址或下一条要执行的指令的地址，这取决于具体的系统。</em></p><p>上下文切换可以更详细地描述为内核（即操作系统的核心）对CPU上的进程（包括线程）执行以下活动:</p><p>1、暂停一个进程的处理，并将该进程的CPU状态（即上下文）存储在内存中的某个地方</p><p>2、从内存中获取下一个进程的上下文，并在CPU的寄存器中恢复它</p><p>3、返回到程序计数器指示的位置（即返回到进程被中断的代码行）以恢复进程。</p><p>从数据来说，以程序员的角度来看， 是方法调用过程中的<strong>各种局部的变量与资源</strong>； 以线程的角度来看， 是方法的<strong>调用栈中存储的各类信息</strong>。</p><p>引发上下文切换的原因一般包括：<strong>线程、进程切换、系统调用等等</strong>。上下文切换通常是计算密集型的，因为涉及一系列数据在各种寄存器、 缓存中的来回拷贝。就CPU时间而言，一次上下文切换大概需要5000~20000个时钟周期，相对一个简单指令几个乃至十几个左右的执行时钟周期，可以看出这个成本的巨大。</p><h3 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h3><p>并发<strong>Concurrent</strong>：指应用能够<strong>交替执行</strong>不同的任务，单核也是并发的，计算太快感知不到</p><p>并行<strong>Parallel</strong>：指应用能够<strong>同时执行</strong>不同的任务</p><h3 id="新启线程有几种方式？"><a href="#新启线程有几种方式？" class="headerlink" title="新启线程有几种方式？"></a>新启线程有几种方式？</h3><p>官方说法是在Java中有两种方式创建一个线程用以执行，一种是派生自Thread类，另一种是实现Runnable接口。</p><p>当然本质上Java中实现线程只有一种方式，都是通过new Thread()创建线程对象，调用Thread#start启动线程。</p><p>至于基于callable接口的方式，因为最终是要把实现了callable接口的对象通过FutureTask包装成Runnable，再交给Thread去执行，所以这个其实可以和实现Runnable接口看成同一类。</p><p>而线程池的方式，本质上是池化技术，是资源的复用，和新启线程没什么关系。</p><p>所以，比较赞同官方的说法，有两种方式创建一个线程用以执行。</p><h2 id="认识Java里的线程"><a href="#认识Java里的线程" class="headerlink" title="认识Java里的线程"></a>认识Java里的线程</h2><h3 id="Java程序天生就是多线程的"><a href="#Java程序天生就是多线程的" class="headerlink" title="Java程序天生就是多线程的"></a>Java程序天生就是多线程的</h3><p>一个Java程序的运行就算是没有用户自己开启的线程，实际也有有很多JVM自行启动的线程，一般来说有：</p><p>[6] Monitor Ctrl-Break //监控Ctrl-Break中断信号的</p><p>[5] Attach Listener //内存dump，线程dump，类信息统计，获取系统属性等</p><p>[4] Signal Dispatcher  //分发处理发送给JVM信号的线程</p><p>[3] Finalizer  // 调用对象finalize方法的线程</p><p>[2] Reference Handler //清除Reference的线程</p><p>[1] main //main线程，用户程序入口</p><p>尽管这些线程根据不同的JDK版本会有差异，但是依然证明了Java程序天生就是多线程的。</p><h3 id="线程的启动与中止"><a href="#线程的启动与中止" class="headerlink" title="线程的启动与中止"></a>线程的启动与中止</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>启动线程的方式有：</p><p>1、X extends Thread;，然后X.start</p><p>2、X implements  Runnable；然后交给Thread运行</p><p><strong>Thread和Runnable的区别</strong></p><p>Thread才是Java里对线程的唯一抽象，Runnable只是对任务（业务逻辑）的抽象。Thread可以接受任意一个Runnable的实例并执行。</p><p><strong>Callable、Future和FutureTask</strong></p><p><strong>Runnable</strong>是一个接口，在它里面只声明了一个run()方法，由于run()方法返回值为void类型，所以在执行完任务之后无法返回任何结果。</p><p><strong>Callable</strong>位于java.util.concurrent包下，它也是一个接口，在它里面也只声明了一个方法，只不过这个方法叫做call()，这是一个泛型接口，call()函数返回的类型就是传递进来的V类型。</p><p><strong>Future</strong>就是对于具体的Runnable或者Callable任务的执行结果进行取消、查询是否完成、获取结果。必要时可以通过get方法获取执行结果，该方法会阻塞直到任务返回结果。</p><p>因为Future只是一个接口，所以是无法直接用来创建对象使用的，因此就有了<strong>FutureTask</strong>。</p><p><strong>RunnableFuture继承了Runnable接口和Future接口，而FutureTask实现了RunnableFuture接口</strong>。所以它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。</p><p><font color="red">线程运行Callable时，Thread不支持构造方法中传递Callable的实例。所以需要通过FutureTask把一个Callable包装成Runnable，然后再通过这个FutureTask拿到Callable运行后的返回值。</font></p><h4 id="中止"><a href="#中止" class="headerlink" title="中止"></a>中止</h4><p><strong>线程自然终止</strong></p><p>run执行完成了；抛出了一个未处理的异常导致线程提前结束。</p><p><strong>stop</strong></p><p>暂停、恢复和停止操作对应在线程Thread的API就是**suspend()、resume()和stop()**。</p><p>但是这些API是过期的，也就是<strong>不建议使用</strong>的。原因主要有：以suspend()方法为例，在调用后，线程不会释放已经占有的资源（比如锁），而是占有着资源进入睡眠状态，这样容易引发死锁问题。同样，stop()方法在终结一个线程时不会保证线程的资源正常释放，通常是没有给予线程完成资源释放工作的机会，因此会导致程序可能工作在不确定状态下。正因为suspend()、resume()和stop()方法带来的副作用，这些方法才被标注为不建议使用的过期方法。</p><p><font color="red">小结：延迟高响应速度慢，资源不释放可能造成死锁，强硬停止可能导致文件损坏</font></p><p><strong>中断</strong></p><p>安全的中止则是其他线程通过调用某个线程A的<font color="red">interrupt()</font>方法对其进行中断操作。线程通过检查自身的中断标志位是否被置为true来进行响应。</p><p>线程通过方法<font color="red">isInterrupted()</font>来进行判断是否被中断，也可以调用静态方法<font color="red">Thread.interrupted()</font>来进行判断当前线程是否被中断，不过Thread.interrupted()会同时将中断标识位改写为false。</p><p><font color="red">不建议自定义一个取消标志位来中止线程的运行</font>。因为run方法里有阻塞调用时会无法很快检测到取消标志，线程必须从阻塞调用返回后，才会检查这个取消标志。使用中断会更好，因为：一般的阻塞方法，如sleep等本身就支持中断的检查；检查中断位的状态和检查取消标志位没什么区别，用中断位的状态还可以避免声明取消标志位，减少资源的消耗。</p><p><font color="red"><strong>注意：处于死锁状态的线程无法被中断</strong></font></p><p><font color="red">小结：<code>interrupt()</code>只是把中断标志位设为true，是否停止由线程本身决定；<code>isInterrupted()</code>返回标志位是否为true，不修改；<code>interrupted()</code>返回标志位是否为true，并且修改标志位为false</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-常量池</title>
      <link href="/posts/jvm-family/12/"/>
      <url>/posts/jvm-family/12/</url>
      
        <content type="html"><![CDATA[<h2 id="Class常量池与运行时常量池"><a href="#Class常量池与运行时常量池" class="headerlink" title="Class常量池与运行时常量池"></a>Class常量池与运行时常量池</h2><p>Class常量池可以理解为是Class文件中的资源仓库。 Class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是**常量池(constant pool table)<strong>，用于存放编译期生成的各种</strong>字面量(Literal)和符号引用(Symbolic References)**。</p><p><strong>class文件内部结构组成</strong></p><p>class字节码文件由魔数，主次版本号，常量池，类信息，类的构造方法，类中的方法信息，类变量与成员变量等信息组成</p><span id="more"></span><p><strong>常量池类型分类</strong></p><p> 按类型分为字面量、符号引用类型</p><p> 字面量分：</p><p> CONSTANT_Utf8_info： utf8字符串</p><p> CONSTANT_Integer_info 整型字面量</p><p> CONSTANT_Float_info 浮点型字面量</p><p> CONSTANT_Long_info 长整型字面量</p><p> CONSTANT_Double_info 双精度字面量</p><p> 符号引用类型分：</p><p> CONSTANT_Class_info：表示类或接口</p><p> CONSTANT_String_info：String类型的常量对象</p><p> CONSTANT_Fieldref_info：字段信息表</p><p> CONSTANT_Methodref_info：方法</p><p> CONSTANT_NameAndType_info：名称和类型表</p><p> CONSTANT_InterfaceMethodref_info：表示接口方法符号引用</p><p> CONSTANT_MethodType_info：方法类型表</p><p> CONSTANT_MethodHandle_info: 方法句柄表</p><p> CONSTANT_InvokeDynamic_info：动态方法调用点</p><p><strong>字面量</strong></p><p><strong>就是指由字母、数字等构成的字符串或者数值常量</strong></p><p>字面量只可以右值出现，所谓右值是指等号右边的值。</p><pre><code>int a = 61; // 字面量：61int b = 74; // 字面量：74int c = "a"; // 字面量：aint d = "gc"; // 字面量：gc</code></pre><p><strong>符号引用</strong></p><p>符号引用是编译原理中的概念，是相对于直接引用来说的。主要包括了以下三类常量：</p><ul><li>类和接口的全限定名 </li><li>字段的名称和描述符 </li><li>方法的名称和描述符</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 示例代码</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>jvm<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Math</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> initData <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Math math <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        math<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的a，b就是字段名称，就是一种符号引用，还有Math类常量池里的 Lcom/gax/jvm/Math 是类的全限定名，main和compute是方法名称，()是一种UTF8格式的描述符，这些都是符号引用。</p><p>这些常量池现在是静态信息，只有到运行时被加载到内存后，这些符号才有对应的内存地址信息，这些常量池一旦被装入内存就变成<strong>运行时常量池</strong>，对应的符号引用在程序加载或运行时会被转变为被加载到内存区域的代码的直接引用，也就是我们说的<strong>动态链接了。例如，compute()这个符号引用在运行时就会被转变为compute()方法具体代码在内存中的地址，主要通过对象头里的类型指针去转换直接引用。</strong></p><h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><p><strong>字符串常量池的设计思想</strong></p><p>1、字符串的分配，和其他的对象分配一样，耗费高昂的时间与空间代价，作为最基础的数据类型，大量频繁的创建字符串，极大程度地影响程序的性能</p><p>2、JVM为了<strong>提高性能和减少内存开销</strong>，在实例化字符串常量的时候进行了一些优化</p><ul><li>为字符串开辟一个字符串常量池，类似于缓存区</li><li>创建字符串常量时，首先查询字符串常量池是否存在该字符串</li><li>存在该字符串，返回引用实例，不存在，实例化该字符串并放入池中</li></ul><p><strong>三种字符串操作(Jdk1.7 及以上版本)</strong></p><ul><li>直接赋值字符串</li></ul><blockquote><p>String s = “gax”;  // s指向常量池中的引用              </p></blockquote><p>这种方式创建的字符串对象，<strong>只会在常量池</strong>中。</p><p>创建对象s的时候，JVM会先去常量池中通过 equals(key) 方法，判断是否有相同的对象。</p><p>如果有，则直接返回该对象在常量池中的引用；</p><p>如果没有，则会在常量池中创建一个新对象，再返回引用。</p><ul><li>new String();</li></ul><blockquote><p> String s1 = new String(“gax”);  // s1指向内存中的对象引用              </p></blockquote><p>这种方式会保证<strong>字符串常量池和堆中都有</strong>这个对象，没有就创建，最后返回堆内存中的对象引用。</p><p>先检查字符串常量池中是否存在字符串”gax”</p><p>不存在，先在字符串常量池里创建一个字符串对象；再去内存中创建一个字符串对象”gax”；</p><p>存在的话，就直接去堆内存中创建一个字符串对象”gax”；</p><p>最后，将内存中的引用返回。</p><ul><li>intern方法</li></ul><pre class=" language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"gax"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span></code></pre><p>String中的intern方法是一个 native 的方法，当调用 intern方法时，如果池已经包含一个等于此String对象的字符串（用equals(object)方法确定），则返回池中的字符串。<font color="red"><strong>否则，将intern返回的引用指向当前字符串 s1(jdk1.6版本需要将 s1 复制到字符串常量池里)。</strong></font></p><p><strong>字符串常量池位置</strong></p><p>Jdk1.6及之前： 有永久代，运行时常量池<strong>在永久代</strong>，运行时常量池包含字符串常量池</p><p>Jdk1.7：有永久代，但已经逐步“去永久代”，字符串常量池从永久代里的运行时常量池<strong>分离到堆里</strong></p><p>Jdk1.8及之后： 无永久代，运行时常量池在元空间，字符串常量池里<strong>依然在堆里</strong></p><p><font color="red">Jdk1.6及之前，字符串常量池在永久代；之后由于去永久代，都分配在堆里。永久代取消后，有了元空间也就是方法区</font></p><p>用一个程序证明下字符串常量池在哪里：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * jdk6：-Xms6M -Xmx6M -XX:PermSize=6M -XX:MaxPermSize=6M * jdk8：-Xms6M -Xmx6M -XX:MetaspaceSize=6M -XX:MaxMetaspaceSize=6M */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeConstantPoolOOM</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            String str <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>运行结果：jdk7及以上：Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token operator">:</span> Java heap spacejdk6：Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token operator">:</span> PermGen space</code></pre><p><strong>字符串常量池设计原理</strong></p><p>底层是hotspot的C++实现的，类似一个 HashTable， 保存的本质上是字符串对象的引用。</p><p>分析面试题：下面的代码创建了多少个 String 对象？</p><pre><code>String s1 =&nbsp;new&nbsp;String("he") +&nbsp;new&nbsp;String("llo");String s2 = s1.intern();&nbsp;System.out.println(s1 == s2);// 在 JDK 1.6 下输出是 false，创建了 6 个对象// 在 JDK 1.7 及以上的版本输出是 true，创建了 5 个对象// 当然我们这里没有考虑GC，但这些对象确实存在或存在过</code></pre><p>1、在 JDK 1.6 中，调用 intern() 首先会在字符串池中寻找 equal() 相等的字符串，假如字符串存在就返回该字符串在字符串池中的引用；假如字符串不存在，虚拟机会重新在永久代上创建一个实例，将 StringTable 的一个表项指向这个新创建的实例。</p><p><img src="/images/jvm/strc-1.png" alt="strc-1"></p><p>2、在 JDK 1.7 (及以上版本)中，由于字符串池不在永久代了，intern() 做了一些修改，更方便地利用堆中的对象。字符串存在时和 JDK 1.6一样，但是字符串不存在时不再需要重新创建实例，可以直接指向堆上的实例。</p><p><img src="/images/jvm/strc-2.png" alt="strc-2"></p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringConstTest</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * "ga" + "x"，编译阶段可以确定，优化成"gax"      * 输出：true，true     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String s0 <span class="token operator">=</span> <span class="token string">"gax"</span><span class="token punctuation">;</span>        String s1 <span class="token operator">=</span> <span class="token string">"gax"</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"ga"</span> <span class="token operator">+</span> <span class="token string">"x"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s0 <span class="token operator">==</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s0 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * new String 编译阶段不确定      * 输出：false，false，false     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String s0 <span class="token operator">=</span> <span class="token string">"gax"</span><span class="token punctuation">;</span>        String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"gax"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s2 <span class="token operator">=</span> <span class="token string">"ga"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s0 <span class="token operator">==</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s0 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 编译阶段确定      * 输出：true，true，true     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"a1"</span><span class="token punctuation">;</span>        String b <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                String c <span class="token operator">=</span> <span class="token string">"atrue"</span><span class="token punctuation">;</span>        String d <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"true"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                String x <span class="token operator">=</span> <span class="token string">"a3.4"</span><span class="token punctuation">;</span>        String y <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token number">3.4</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 编译时无法确定字符串引用      * 输出：false     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>        String bb <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>        String b <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> bb<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 对于final修饰的变量，它在编译时被解析为常量值的一个本地拷贝存储到自己的常量池中或嵌入到它的字节码流中      * 输出：true     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String bb <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>        String b <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> bb<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * bb调用方法时才能确定      * 输出：false     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String a <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String bb <span class="token operator">=</span> <span class="token function">getBB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String b <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> bb<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getBB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * intern：池中有则返回池中的引用，没有就返回指向当前字符串的引用      * 输出：true，false，false，false     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"计算机"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"技术"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"ja"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"va"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> s2<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 5种整形的包装类Byte,Short,Integer,Long,Character的对象，在值小于127时可以使用对象池      * 输出：true，false，false，true，false     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这种调用底层实际是执行的Integer.valueOf(127)，里面用到了IntegerCache对象池</span>        Integer i1 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        Integer i2 <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 值大于127时，不会从对象池中取对象</span>        Integer i3 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        Integer i4 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 用new关键词新生成对象不会使用对象池</span>        Integer i5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer i6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i5 <span class="token operator">==</span> i6<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Boolean类也实现了对象池技术</span>        Boolean bool1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        Boolean bool2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bool1 <span class="token operator">==</span> bool2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 浮点类型的包装类没有实现对象池技术</span>        Double d1 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        Double d2 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>关于String不可变</strong></p><pre class=" language-java"><code class="language-java">String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> s<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span> <span class="token operator">+</span> <span class="token string">"c"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//等价于String s = "abc";</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token string">"a"</span><span class="token punctuation">;</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> b<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token string">"b"</span><span class="token punctuation">;</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> c<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token string">"c"</span><span class="token punctuation">;</span>String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> s1<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> a<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> b<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> c<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 根据指令码等价于：</span>StringBuilder temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temp<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-调优实战</title>
      <link href="/posts/jvm-family/11/"/>
      <url>/posts/jvm-family/11/</url>
      
        <content type="html"><![CDATA[<h2 id="阿里巴巴Arthas"><a href="#阿里巴巴Arthas" class="headerlink" title="阿里巴巴Arthas"></a>阿里巴巴Arthas</h2><p><strong>Arthas</strong> 是 Alibaba 在 2018 年 9 月开源的 <strong>Java 诊断</strong>工具。支持 JDK6+， 采用命令行交互模式，可以方便的定位和诊断线上程序运行问题。<strong>Arthas</strong> 官方文档十分详细，详见：<a href="https://alibaba.github.io/arthas"><em>https://alibaba.github.io/arthas</em></a></p><span id="more"></span><p>参考文章：<a href="https://arthas.aliyun.com/doc/quick-start.html">https://arthas.aliyun.com/doc/quick-start.html</a></p><p><strong>1、启动math-game</strong></p><pre class=" language-java"><code class="language-java">wget https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>arthas<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>math<span class="token operator">-</span>game<span class="token punctuation">.</span>jar # 下载远程代码nohup java <span class="token operator">-</span>jar math<span class="token operator">-</span>game<span class="token punctuation">.</span>jar <span class="token operator">></span>msg<span class="token punctuation">.</span>log <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span> # 后台启动</code></pre><p><code>math-game</code>是一个简单的程序，每隔一秒生成一个随机数，再执行质因数分解，并打印出分解结果。</p><p><strong>2、启动 arthas</strong></p><pre class=" language-java"><code class="language-java">wget https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>arthas<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>arthas<span class="token operator">-</span>boot<span class="token punctuation">.</span>jar # 下载包java <span class="token operator">-</span>jar arthas<span class="token operator">-</span>boot<span class="token punctuation">.</span>jar # 启动</code></pre><p>选择应用进程：</p><pre class=" language-java"><code class="language-java">$ $ java <span class="token operator">-</span>jar arthas<span class="token operator">-</span>boot<span class="token punctuation">.</span>jar<span class="token operator">*</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">12414</span> math<span class="token operator">-</span>game<span class="token punctuation">.</span>jar  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">12281</span> org<span class="token punctuation">.</span>tanukisoftware<span class="token punctuation">.</span>wrapper<span class="token punctuation">.</span>WrapperSimpleApp</code></pre><p><code>math-game</code>进程是第 1 个，则输入 1，再输入<code>回车/enter</code>。Arthas 会 attach 到目标进程上，并输出日志：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> arthas home<span class="token operator">:</span> <span class="token operator">/</span>root<span class="token operator">/</span><span class="token punctuation">.</span>arthas<span class="token operator">/</span>lib<span class="token operator">/</span><span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">/</span>arthas<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> The target process already listen port <span class="token number">3658</span><span class="token punctuation">,</span> skip attach<span class="token punctuation">.</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> arthas<span class="token operator">-</span>client connect <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">3658</span>  <span class="token punctuation">,</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token punctuation">,</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span> <span class="token punctuation">,</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token operator">--</span><span class="token punctuation">.</span>  <span class="token punctuation">,</span><span class="token operator">--</span><span class="token punctuation">.</span>  <span class="token punctuation">,</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">.</span>   <span class="token punctuation">,</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">.</span>            <span class="token operator">/</span>  O  \ <span class="token operator">|</span>  <span class="token punctuation">.</span>-<span class="token operator">-</span><span class="token punctuation">.</span> <span class="token string">''</span><span class="token operator">--</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span>-<span class="token operator">-</span><span class="token string">'|  '</span><span class="token operator">--</span><span class="token string">'  | /  O  \ '</span>   <span class="token punctuation">.</span>-'           <span class="token operator">|</span>  <span class="token punctuation">.</span>-<span class="token punctuation">.</span>  <span class="token operator">||</span>  <span class="token string">'--'</span><span class="token punctuation">.</span>'   <span class="token operator">|</span>  <span class="token operator">|</span>   <span class="token operator">|</span>  <span class="token punctuation">.</span>-<span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token operator">||</span>  <span class="token punctuation">.</span>-<span class="token punctuation">.</span>  <span class="token operator">|</span>`<span class="token punctuation">.</span>  `<span class="token operator">-</span><span class="token punctuation">.</span>           <span class="token operator">|</span>  <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">||</span>  <span class="token operator">|</span>\  \    <span class="token operator">|</span>  <span class="token operator">|</span>   <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">|</span>  <span class="token operator">||</span>  <span class="token operator">|</span> <span class="token operator">|</span>  <span class="token operator">|</span><span class="token punctuation">.</span>-'    <span class="token operator">|</span>         `<span class="token operator">--</span><span class="token string">' `--'</span>`<span class="token operator">--</span><span class="token string">' '</span><span class="token operator">--</span><span class="token string">'   `--'</span>   `<span class="token operator">--</span><span class="token string">'  `--'</span>`<span class="token operator">--</span><span class="token string">' `--'</span>`<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>'           wiki       https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>arthas<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>doc                         tutorials  https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>arthas<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>doc<span class="token operator">/</span>arthas<span class="token operator">-</span>tutorials<span class="token punctuation">.</span>html   version    <span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">1</span>                                                 main_class                                                       pid        <span class="token number">12414</span>                                                 time       <span class="token number">2023</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">28</span>  </code></pre><p><strong>3、查看dashboard</strong></p><p>输入<code>dashboard</code>，按<code>回车/enter</code>，会展示当前进程的信息，按<code>ctrl+c</code>可以中断执行。</p><p><img src="/images/jvm/arthas-1.png" alt="arthas-1"></p><p><strong>4、 通过 thread 命令来获取到<code>math-game</code>进程的 Main Class，</strong></p><p><font color="red"><strong>thread加上线程ID</strong> 可以查看线程堆栈；<strong>thread -b</strong> 可以查看线程死锁</font></p><p><code>thread 1</code>会打印线程 ID 1 的栈，通常是 main 函数的线程。</p><pre class=" language-java"><code class="language-java">$ thread <span class="token number">1</span> <span class="token operator">|</span> grep <span class="token string">'main('</span>    at demo<span class="token punctuation">.</span>MathGame<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>MathGame<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span></code></pre><p><strong>5、通过 jad 来反编译 Main Class，</strong><font color="red">方便查看线上版本是否正确</font></p><pre><code>jad demo.MathGame # jad 加类的全名</code></pre><p><img src="/images/jvm/arthas-2.png" alt="arthas-2"></p><p><strong>使用 ognl 命令可以</strong></p><pre class=" language-java"><code class="language-java">ognl <span class="token annotation punctuation">@com</span><span class="token punctuation">.</span>gax<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>Arthas<span class="token annotation punctuation">@hashSet</span> # 查看hashSet详情</code></pre><h2 id="GC日志详解"><a href="#GC日志详解" class="headerlink" title="GC日志详解"></a>GC日志详解</h2><p>java应用通过一些配置把程序运行过程中的gc日志全部打印出来，然后分析得到关键性指标，分析GC原因，调优JVM参数。</p><p>打印GC日志方法，在JVM参数里增加参数，%t 代表时间</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>Xloggc<span class="token operator">:</span>d<span class="token operator">:</span><span class="token operator">/</span>gc<span class="token operator">-</span><span class="token operator">%</span>t<span class="token punctuation">.</span>log <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDetails <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDateStamps <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCTimeStamps <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCCause <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseGCLogFileRotation <span class="token operator">-</span>XX<span class="token operator">:</span>NumberOfGCLogFiles<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">-</span>XX<span class="token operator">:</span>GCLogFileSize<span class="token operator">=</span>100M</code></pre><p>Tomcat则直接加在JAVA_OPTS变量里。</p><p>日志示例：</p><pre><code>... ...CommandLine flags: -XX:GCLogFileSize=104857600 -XX:InitialHeapSize=132332672 -XX:MaxHeapSize=2117322752 -XX:NumberOfGCLogFiles=10 -XX:+PrintGC -XX:+PrintGCCause -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseGCLogFileRotation -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC 2023-09-30T21:17:46.195+0800: 3.270: [GC (Allocation Failure) [PSYoungGen: 33263K-&gt;5108K(38400K)] 33263K-&gt;30100K(125952K), 0.0143444 secs] [Times: user=0.00 sys=0.08, real=0.02 secs] 2023-09-30T21:17:49.779+0800: 6.853: [GC (Allocation Failure) [PSYoungGen: 38346K-&gt;5112K(38400K)] 63337K-&gt;63249K(125952K), 0.0169616 secs] [Times: user=0.08 sys=0.16, real=0.02 secs] 2023-09-30T21:17:49.796+0800: 6.871: [Full GC (Ergonomics) [PSYoungGen: 5112K-&gt;0K(38400K)] [ParOldGen: 58137K-&gt;63114K(131584K)] 63249K-&gt;63114K(169984K), [Metaspace: 3995K-&gt;3995K(1056768K)], 0.0192682 secs] [Times: user=0.13 sys=0.00, real=0.02 secs] 2023-09-30T21:17:53.294+0800: 10.368: [GC (Allocation Failure) [PSYoungGen: 33214K-&gt;5056K(38400K)] 96328K-&gt;95875K(169984K), 0.0113574 secs] [Times: user=0.13 sys=0.00, real=0.01 secs] 2023-09-30T21:17:56.850+0800: 13.924: [GC (Allocation Failure) [PSYoungGen: 38304K-&gt;5056K(38400K)] 129122K-&gt;129080K(169984K), 0.0143091 secs] [Times: user=0.02 sys=0.09, real=0.01 secs] 2023-09-30T21:17:56.864+0800: 13.939: [Full GC (Ergonomics) [PSYoungGen: 5056K-&gt;0K(38400K)] [ParOldGen: 124024K-&gt;128838K(198656K)] 129080K-&gt;128838K(237056K), [Metaspace: 3995K-&gt;3995K(1056768K)], 0.0209503 secs] [Times: user=0.11 sys=0.00, real=0.02 secs] 2023-09-30T21:18:00.425+0800: 17.500: [GC (Allocation Failure) [PSYoungGen: 33255K-&gt;5056K(37888K)] 162094K-&gt;162300K(236544K), 0.0126419 secs] [Times: user=0.05 sys=0.05, real=0.01 secs] 2023-09-30T21:18:03.924+0800: 20.998: [GC (Allocation Failure) [PSYoungGen: 37802K-&gt;37729K(73216K)] 195046K-&gt;194973K(271872K), 0.0164761 secs] [Times: user=0.03 sys=0.08, real=0.02 secs] 2023-09-30T21:18:06.730+0800: 23.805: [GC (Allocation Failure) [PSYoungGen: 63841K-&gt;53664K(79360K)] 221085K-&gt;220909K(278016K), 0.0211296 secs] [Times: user=0.19 sys=0.03, real=0.02 secs] 2023-09-30T21:18:06.751+0800: 23.826: [Full GC (Ergonomics) [PSYoungGen: 53664K-&gt;22303K(79360K)] [ParOldGen: 167244K-&gt;198367K(264192K)] 220909K-&gt;220671K(343552K), [Metaspace: 3995K-&gt;3995K(1056768K)], 0.0313734 secs] [Times: user=0.23 sys=0.00, real=0.03 secs] ... ...Heap PSYoungGen      total 138752K, used 103144K [0x00000000d5f00000, 0x00000000e4700000, 0x0000000100000000)  eden space 55296K, 86% used [0x00000000d5f00000,0x00000000d8db1060,0x00000000d9500000)  from space 83456K, 66% used [0x00000000d9500000,0x00000000dcb09270,0x00000000de680000)  to   space 83968K, 0% used [0x00000000df500000,0x00000000df500000,0x00000000e4700000) ParOldGen       total 729088K, used 652713K [0x0000000081c00000, 0x00000000ae400000, 0x00000000d5f00000)  object space 729088K, 89% used [0x0000000081c00000,0x00000000a996a7d8,0x00000000ae400000) Metaspace       used 4003K, capacity 4568K, committed 4864K, reserved 1056768K  class space    used 448K, capacity 460K, committed 512K, reserved 1048576K</code></pre><p>详细分析：</p><pre><code>2023-09-30T21:18:06.751+0800: 23.826: [Full GC (Ergonomics) [PSYoungGen: 53664K-&gt;22303K(79360K)] [ParOldGen: 167244K-&gt;198367K(264192K)] 220909K-&gt;220671K(343552K), [Metaspace: 3995K-&gt;3995K(1056768K)], 0.0313734 secs] [Times: user=0.23 sys=0.00, real=0.03 secs] </code></pre><p>1、对于<strong>23.826：</strong>  这是从jvm启动开始计算到这次GC经过的时间，前面还有具体的发生时间日期。 </p><p>2、Full GC(Ergonomics)指这是一次full gc，括号里是gc的原因， PSYoungGen是年轻代的GC，ParOldGen是老年代的GC，Metaspace是元空间的GC</p><p>3、[PSYoungGen: 53664K-&gt;22303K(79360K)]，这三个数字分别对应GC之前占用年轻代的大小，GC之后年轻代占用，以及整个年轻代的大小。 </p><p>4、[ParOldGen: 167244K-&gt;198367K(264192K)]，这三个数字分别对应GC之前占用老年代的大小，GC之后老年代占用，以及整个老年代的大小。 </p><p>5、220909K-&gt;220671K(343552K)，这三个数字分别对应GC之前占用堆内存的大小，GC之后堆内存占用，以及整个堆内存的大小。 </p><p>6、[Metaspace: 3995K-&gt;3995K(1056768K)]，这三个数字分别对应GC之前占用元空间内存的大小，GC之后元空间内存占用，以及整个元空间内存的大小。 </p><p>7、0.0313734是该时间点GC总耗费时间。 </p><p>示例代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapTest</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 100KB</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException    <span class="token punctuation">{</span>        ArrayList<span class="token operator">&lt;</span>HeapTest<span class="token operator">></span> heapTests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            heapTests<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CMS</strong></p><pre><code>-Xloggc:d:/gc-cms-%t.log -Xms50M -Xmx50M -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintGCCause -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</code></pre><p><strong>G1</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>Xloggc<span class="token operator">:</span>d<span class="token operator">:</span><span class="token operator">/</span>gc<span class="token operator">-</span>g1<span class="token operator">-</span><span class="token operator">%</span>t<span class="token punctuation">.</span>log <span class="token operator">-</span>Xms50M <span class="token operator">-</span>Xmx50M <span class="token operator">-</span>XX<span class="token operator">:</span>MetaspaceSize<span class="token operator">=</span>256M <span class="token operator">-</span>XX<span class="token operator">:</span>MaxMetaspaceSize<span class="token operator">=</span>256M <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDetails <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCDateStamps <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCTimeStamps <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGCCause <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseGCLogFileRotation <span class="token operator">-</span>XX<span class="token operator">:</span>NumberOfGCLogFiles<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">-</span>XX<span class="token operator">:</span>GCLogFileSize<span class="token operator">=</span>100M <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseG1GC</code></pre><p>推荐一个gceasy(<a href="https://gceasy.io/">https://gceasy.io</a>)，可以上传gc文件，然后他会利用可视化的界面来展现GC情况。</p><p><strong>JVM参数汇总查看命令</strong></p><p>java -XX:+PrintFlagsInitial 表示打印出所有参数选项的默认值</p><p>java -XX:+PrintFlagsFinal 表示打印出所有参数选项在运行程序时生效的值</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-调优工具</title>
      <link href="/posts/jvm-family/10/"/>
      <url>/posts/jvm-family/10/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM调优工具"><a href="#JVM调优工具" class="headerlink" title="JVM调优工具"></a>JVM调优工具</h2><p><strong>Jmap</strong></p><p>查看内存信息，实例个数以及占用内存大小</p><pre class=" language-java"><code class="language-java">jmap <span class="token operator">-</span>histo <span class="token number">14904</span>  #查看历史生成的实例jmap <span class="token operator">-</span>histo<span class="token operator">:</span>live <span class="token number">14904</span>  #查看当前存活的实例，执行过程中可能会触发一次full gc</code></pre><p><img src="/images/jvm/tun-1.png" alt="tun-1"></p><ul><li>num：序号</li><li>instances：实例数量</li><li>bytes：占用空间大小</li><li>class name：类名称，[C is a char[]，[S is a short[]，[I is a int[]，[B is a byte[]，[[I is a int</li></ul><span id="more"></span><pre class=" language-java"><code class="language-java">jmap <span class="token operator">-</span>heap <span class="token number">14904</span> # 查看堆信息</code></pre><p><img src="/images/jvm/tun-2.png" alt="tun-2"></p><pre class=" language-java"><code class="language-java">jmap <span class="token operator">-</span>dump<span class="token operator">:</span>format<span class="token operator">=</span>b<span class="token punctuation">,</span>file<span class="token operator">=</span>yeah<span class="token punctuation">.</span>hprof <span class="token number">14904</span> # 堆内存dump</code></pre><p>生产上一般会设置内存溢出自动导出dump文件(内存很大的时候，可能会导不出来)</p><p>1、<code>-XX:+HeapDumpOnOutOfMemoryError</code></p><p>2、<code>-XX:HeapDumpPath=./</code>（路径）</p><p>模拟内存溢出代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// JVM设置</span>    <span class="token comment" spellcheck="true">// -Xms10M -Xmx10M -XX:+PrintGCDetails -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=D:\jvm.dump</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">,</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">,</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>用jvisualvm命令工具导入该dump文件分析</strong></p><p><img src="/images/jvm/tun-3.png" alt="tun-3"></p><p><strong>Jstack</strong></p><p>加进程id查找死锁</p><p><img src="/images/jvm/tun-4.png" alt="tun-4"></p><p>“Thread-1” 线程名</p><p>prio=5 优先级=5</p><p>tid=0x000000001a4ec800 线程id</p><p>nid=0x23ac 线程对应的本地线程标识nid</p><p>java.lang.Thread.State: BLOCKED 线程状态</p><p><img src="/images/jvm/tun-5.png" alt="tun-5"></p><p>还可以用jvisualvm自动检测死锁<font color="red">，其实就是工具封装的 jstack命令</font></p><p><img src="/images/jvm/tun-6.png" alt="tun-6"></p><p><strong>远程连接jvisualvm</strong></p><p><strong>启动普通的jar程序JMX端口配置：</strong></p><pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>Dcom<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">8888</span> <span class="token operator">-</span>Djava<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>hostname<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">65.60</span> <span class="token operator">-</span>Dcom<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>ssl<span class="token operator">=</span><span class="token boolean">false</span> <span class="token operator">-</span>Dcom<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>management<span class="token punctuation">.</span>jmxremote<span class="token punctuation">.</span>authenticate<span class="token operator">=</span><span class="token boolean">false</span> <span class="token operator">-</span>jar microservice<span class="token operator">-</span>eureka<span class="token operator">-</span>server<span class="token punctuation">.</span>jar</code></pre><p><code>-Dcom.sun.management.jmxremote.port</code> 为远程机器的JMX端口</p><p><code>-Djava.rmi.server.hostname</code> 为远程机器IP</p><p><strong>tomcat的JMX配置：在catalina.sh文件里的最后一个JAVA_OPTS的赋值语句下一行增加如下配置行</strong></p><pre class=" language-java"><code class="language-java">JAVA_OPTS<span class="token operator">=</span><span class="token string">"$JAVA_OPTS -Dcom.sun.management.jmxremote.port=8888&amp;nbsp;-Djava.rmi.server.hostname=192.168.50.60 -Dcom.sun.management.jmxremote.ssl=false&amp;nbsp;-Dcom.sun.management.jmxremote.authenticate=false"</span></code></pre><p><strong>jstack找出占用cpu最高的线程堆栈信息</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Math</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> initData <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Math math <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            math<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>1、使用命令top -p  ，显示你的java进程的内存情况，pid是你的java进程号</p><p>2、按H，获取每个线程的内存情况</p><p>3、找到内存和cpu占用最高的线程tid，比如19664</p><p>4、转为十六进制得到 0x4cd0，此为线程id的十六进制表示</p><p>5、执行 jstack 19663|grep -A 10 4cd0，得到线程堆栈信息中 4cd0 这个线程所在行的后面10行，从堆栈中可以发现导致cpu飙高的调用方法</p><p>6、查看对应的堆栈信息找出可能存在问题的代码</p><p><font color="red">top 是linux命令，</font></p><p><strong>Jinfo</strong></p><p>查看正在运行的Java应用程序的扩展参数</p><pre class=" language-java"><code class="language-java">jinfo <span class="token operator">-</span>flags <span class="token number">28408</span> # 查看jvm参数</code></pre><p><img src="/images/jvm/tun-7.png" alt="tun-7"></p><pre class=" language-java"><code class="language-java">jinfo <span class="token operator">-</span>sysprops <span class="token number">28408</span> # 查看java系统参数</code></pre><p><img src="/images/jvm/tun-8.png" alt="tun-8"></p><p><strong>Jstat</strong></p><p>jstat命令可以查看堆内存各部分的使用量，以及加载类的数量。命令的格式如下：</p><p>jstat [-命令选项] [vmid] [间隔时间(毫秒)] [查询次数]</p><p>注意：使用的jdk版本是jdk8</p><p>垃圾回收统计</p><pre class=" language-java"><code class="language-java">jstat <span class="token operator">-</span>gc pid # 最常用，可以评估程序内存使用及GC压力整体情况</code></pre><ul><li>S0C：第一个幸存区的大小，单位KB</li><li>S1C：第二个幸存区的大小</li><li>S0U：第一个幸存区的使用大小</li><li>S1U：第二个幸存区的使用大小</li><li>EC：伊甸园区的大小</li><li>EU：伊甸园区的使用大小</li><li>OC：老年代大小</li><li>OU：老年代使用大小</li><li>MC：方法区大小(元空间)</li><li>MU：方法区使用大小</li><li>CCSC:压缩类空间大小</li><li>CCSU:压缩类空间使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>YGCT：年轻代垃圾回收消耗时间，单位s</li><li>FGC：老年代垃圾回收次数 </li><li>FGCT：老年代垃圾回收消耗时间，单位s</li><li>GCT：垃圾回收消耗总时间，单位s</li></ul><pre class=" language-java"><code class="language-java">jstat <span class="token operator">-</span>gccapacity <span class="token number">28408</span> # 堆内存统计</code></pre><ul><li>NGCMN：新生代最小容量</li><li>NGCMX：新生代最大容量</li><li>NGC：当前新生代容量</li><li>S0C：第一个幸存区大小</li><li>S1C：第二个幸存区的大小</li><li>EC：伊甸园区的大小</li><li>OGCMN：老年代最小容量</li><li>OGCMX：老年代最大容量</li><li>OGC：当前老年代大小</li><li>OC:当前老年代大小</li><li>MCMN:最小元数据容量</li><li>MCMX：最大元数据容量</li><li>MC：当前元数据空间大小</li><li>CCSMN：最小压缩类空间大小</li><li>CCSMX：最大压缩类空间大小</li><li>CCSC：当前压缩类空间大小</li><li>YGC：年轻代gc次数</li><li>FGC：老年代GC次数</li></ul><pre class=" language-java"><code class="language-java">jstat <span class="token operator">-</span>gcnew <span class="token number">28408</span> # 新生代垃圾回收统计</code></pre><ul><li>S0C：第一个幸存区的大小</li><li>S1C：第二个幸存区的大小</li><li>S0U：第一个幸存区的使用大小</li><li>S1U：第二个幸存区的使用大小</li><li>TT:对象在新生代存活的次数</li><li>MTT:对象在新生代存活的最大次数</li><li>DSS:期望的幸存区大小</li><li>EC：伊甸园区的大小</li><li>EU：伊甸园区的使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>YGCT：年轻代垃圾回收消耗时间</li></ul><pre class=" language-java"><code class="language-java">jstat <span class="token operator">-</span>gcnewcapacity <span class="token number">28408</span> # 新生代内存统计</code></pre><ul><li>NGCMN：新生代最小容量</li><li>NGCMX：新生代最大容量</li><li>NGC：当前新生代容量</li><li>S0CMX：最大幸存1区大小</li><li>S0C：当前幸存1区大小</li><li>S1CMX：最大幸存2区大小</li><li>S1C：当前幸存2区大小</li><li>ECMX：最大伊甸园区大小</li><li>EC：当前伊甸园区大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代回收次数</li></ul><pre class=" language-java"><code class="language-java">jstat <span class="token operator">-</span>gcold <span class="token number">28408</span> # 老年代垃圾回收统计</code></pre><ul><li>MC：方法区大小</li><li>MU：方法区使用大小</li><li>CCSC:压缩类空间大小</li><li>CCSU:压缩类空间使用大小</li><li>OC：老年代大小</li><li>OU：老年代使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><pre><code>jstat -gcoldcapacity 28408 # 老年代内存统计</code></pre><ul><li>OGCMN：老年代最小容量</li><li>OGCMX：老年代最大容量</li><li>OGC：当前老年代大小</li><li>OC：老年代大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><pre class=" language-java"><code class="language-java">jstat <span class="token operator">-</span>gcmetacapacity <span class="token number">28408</span> # 元数据空间统计</code></pre><ul><li>MCMN:最小元数据容量</li><li>MCMX：最大元数据容量</li><li>MC：当前元数据空间大小 </li><li>CCSMN：最小压缩类空间大小</li><li>CCSMX：最大压缩类空间大小</li><li>CCSC：当前压缩类空间大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><pre class=" language-java"><code class="language-java">jstat <span class="token operator">-</span>gcutil <span class="token number">28408</span> # 内存统计</code></pre><ul><li>S0：幸存1区当前使用比例</li><li>S1：幸存2区当前使用比例</li><li>E：伊甸园区使用比例</li><li>O：老年代使用比例</li><li>M：元数据区使用比例</li><li>CCS：压缩使用比例</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><p><img src="/images/jvm/tun-9.png" alt="tun-9"></p><p><strong>JVM运行情况预估</strong></p><p>用 jstat gc -pid 命令可以计算出如下一些关键数据，有了这些数据就可以采用之前介绍过的优化思路，先给自己的系统设置一些初始性的JVM参数，比如堆内存大小，年轻代大小，Eden和Survivor的比例，老年代的大小，大对象的阈值，大龄对象进入老年代的阈值等。</p><p><strong>年轻代对象增长的速率</strong></p><p>可以执行命令 jstat -gc pid 1000 10 (每隔1秒执行1次命令，共执行10次)，通过观察EU(eden区的使用)来估算每秒eden大概新增多少对象，如果系统负载不高，可以把频率1秒换成1分钟，甚至10分钟来观察整体情况。注意，一般系统可能有高峰期和日常期，所以需要在不同的时间分别估算不同情况下对象增长速率。</p><p><strong>Young GC的触发频率和每次耗时</strong></p><p>知道年轻代对象增长速率我们就能推根据eden区的大小推算出Young GC大概多久触发一次，Young GC的平均耗时可以通过 YGCT/YGC 公式算出，根据结果我们大概就能知道<strong>系统大概多久会因为Young GC的执行而卡顿多久。</strong></p><p><strong>每次Young GC后有多少对象存活和进入老年代</strong></p><p>这个因为之前已经大概知道Young GC的频率，假设是每5分钟一次，那么可以执行命令 jstat -gc pid 300000 10 ，观察每次结果eden，survivor和老年代使用的变化情况，在每次gc后eden区使用一般会大幅减少，survivor和老年代都有可能增长，这些增长的对象就是每次Young GC后存活的对象，同时还可以看出每次Young GC后进去老年代大概多少对象，从而可以推算出<strong>老年代对象增长速率。</strong></p><p><strong>Full GC的触发频率和每次耗时</strong></p><p>知道了老年代对象的增长速率就可以推算出Full GC的触发频率了，Full GC的每次耗时可以用公式 FGCT/FGC 计算得出。</p><p><strong>优化思路</strong>其实简单来说就是尽量让每次Young GC后的存活对象小于Survivor区域的50%，都留存在年轻代里。尽量别让对象进入老年代。尽量减少Full GC的频率，避免频繁Full GC对JVM性能的影响。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-垃圾收集器ZGC</title>
      <link href="/posts/jvm-family/9/"/>
      <url>/posts/jvm-family/9/</url>
      
        <content type="html"><![CDATA[<h2 id="ZGC收集器-XX-UseZGC"><a href="#ZGC收集器-XX-UseZGC" class="headerlink" title="ZGC收集器(-XX:+UseZGC)"></a>ZGC收集器(-XX:+UseZGC)</h2><p>参考文章：<a href="https://wiki.openjdk.java.net/display/zgc/Main">https://wiki.openjdk.java.net/display/zgc/Main</a></p><p><a href="http://cr.openjdk.java.net/~pliden/slides/ZGC-Jfokus-2018.pdf">http://cr.openjdk.java.net/~pliden/slides/ZGC-Jfokus-2018.pdf</a></p><p>ZGC源自于Azul System公司开发的C4（Concurrent Continuously Compacting Collector） 收集器，是JDK 11中新加入的具有实验性质的<strong>低延迟</strong>垃圾收集器。</p><p><img src="/images/jvm/zgc-1.png" alt="zgc-1"></p><span id="more"></span><p><strong>ZGC目标</strong></p><p>主要有4个：</p><p><img src="/images/jvm/zgc-2.png" alt="zgc-2"></p><ul><li><p><strong>支持TB量级的堆</strong>。生产环境的硬盘还没有上TB，应该可以满足未来十年内所有JAVA应用的需求。 </p></li><li><p><strong>最大GC停顿时间不超10ms</strong>。目前一般线上环境运行良好的JAVA应用Minor GC停顿时间在10ms左右，Major GC一般都需要100ms以上，之所以能做到这一点是因为它的停顿时间主要跟Root扫描有关，而Root数量和堆大小是没有任何关系的。 </p></li><li><p><strong>奠定未来GC特性的基础</strong>。</p></li><li><p><strong>最糟糕的情况下吞吐量会降低15%</strong> 停顿时间足够优秀。吞吐量问题可以通过扩容解决。</p></li></ul><p>Oracle官方提到了它最大的优点是：它的<strong>停顿时间不会随着堆的增大而增长</strong>！也就是说，几十G堆的停顿时间是10ms以下，几百G甚至上T堆的停顿时间也是10ms以下。</p><p><strong>不分代(暂时)</strong></p><p>以前的垃圾回收器之所以分代，是因为“「大部分对象朝生夕死」”</p><p>为什么ZGC不分代？因为分代实现起来麻烦，作者就先实现出一个比较简单可用的单代版本，后续再优化。</p><p><strong>ZGC内存布局</strong></p><p>ZGC收集器是一款基于Region内存布局的，暂时不设分代的，使用了<strong>读屏障、颜色指针</strong>等技术来实现可并发的标记-整理算法的，<strong>以低延迟为首要目标</strong>的一款垃圾收集器。</p><p>ZGC的Region具有大、中、小三类容量：</p><ul><li>小型Region（Small Region）：容量固定为2MB， 用于放置小于256KB的小对象。</li><li>中型Region（Medium Region）：容量固定为32MB， 用于放置大于等于256KB但小于4MB的对象。</li><li>大型Region（Large Region）：容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。<strong>每个大型Region中只会存放一个大对象</strong>。大型Region在ZGC的实现中是不会被重分配（重分配是ZGC的一种处理动作，用于复制对象的收集器阶段）的，因为复制一个大对象的代价非常高昂。</li></ul><p><img src="/images/jvm/zgc-3.png" alt="zgc-3"></p><p><strong>NUMA-aware</strong></p><p>NUMA对应的有UMA，UMA即<strong>Uniform Memory Access Architecture</strong>，NUMA就是Non Uniform Memory Access Architecture。UMA表示内存只有一块，所有CPU都去访问这一块内存，那么就会存在竞争问题（争夺内存总线访问权），有竞争就会有锁，有锁效率就会受到影响，而且CPU核心数越多，竞争就越激烈。NUMA的话<strong>每个CPU对应有一块内存</strong>，且这块内存在主板上离这个CPU是最近的，每个CPU优先访问这块内存，那效率自然就提高了：</p><p><img src="/images/jvm/zgc-4.png" alt="zgc-4"></p><p>服务器的NUMA架构在中大型系统上一直非常盛行，也是高性能的解决方案，尤其在系统延迟方面表现都很优秀。ZGC是能自动感知NUMA架构并充分利用NUMA架构特性的。</p><p><strong>ZGC运作过程</strong></p><p>大致可划分为以下四个大的阶段：</p><p><img src="/images/jvm/zgc-5.png" alt="zgc-5"></p><ul><li><p><strong>并发标记（Concurrent Mark）</strong>：与G1一样，并发标记是遍历对象图做可达性分析的阶段，它的初始标记(<strong>Mark Start</strong>)和最终标记(<strong>Mark End</strong>)也会出现短暂的停顿，与G1不同的是， ZGC的标记是在指针上而不是在对象上进行的， 标记阶段会更新<strong>颜色指针</strong>中的Marked 0、 Marked 1标志位。</p></li><li><p><strong>并发预备重分配（Concurrent Prepare for Relocate）</strong>：这个阶段需要根据特定的查询条件统计得出本次收集过程要清理哪些Region，将这些Region组成重分配集（Relocation Set）。ZGC每次回收都会扫描所有的Region，用范围更大的扫描成本换取省去G1中记忆集的维护成本。</p></li><li><p><strong>并发重分配（Concurrent Relocate）</strong>：重分配是ZGC执行过程中的核心阶段，这个过程要把重分配集中的存活对象复制到新的Region上，并为重分配集中的每个Region维护一个<strong>转发表（Forward Table）</strong>，记录从旧对象到新对象的转向关系。ZGC收集器能仅从引用上就明确得知一个对象是否处于重分配集之中，如果用户线程此时并发访问了位于重分配集中的对象，这次访问将会被预置的内存屏障(<strong>读屏障</strong>(见下面详解))所截获，然后立即根据Region上的转发表记录将访问转发到新复制的对象上，并同时修正更新该引用的值，使其直接指向新对象，ZGC将这种行为称为指针的“自愈”（Self-Healing）能力。</p><blockquote><p>ZGC的颜色指针因为“自愈”（Self-Healing）能力，所以只有第一次访问旧对象会变慢， 一旦重分配集中某个Region的存活对象都复制完毕后， 这个Region就可以立即释放用于新对象的分配，但是转发表还得留着不能释放掉， 因为可能还有访问在使用这个转发表。              </p></blockquote></li><li><p><strong>并发重映射（Concurrent Remap）</strong>：重映射所做的就是修正整个堆中指向重分配集中旧对象的所有引用，但是ZGC中对象引用存在“自愈”功能，所以这个重映射操作并不是很迫切。ZGC很巧妙地把并发重映射阶段要做的工作，合并到了下一次垃圾收集循环中的并发标记阶段里去完成，反正它们都是要遍历所有对象的，这样合并就节省了一次遍历对象图的开销。一旦所有指针都被修正之后， 原来记录新旧对象关系的转发表就可以释放掉了。</p></li></ul><p><strong>颜色指针</strong></p><p>Colored Pointers，即颜色指针，ZGC的核心设计之一。以前的垃圾回收器的GC信息都保存在对象头中，而ZGC的GC信息保存在指针中。</p><p><img src="/images/jvm/zgc-6.png" alt="zgc-6"></p><p>每个对象有一个64位指针，这64位被分为：</p><ul><li>18位：预留给以后使用；</li><li>1位：Finalizable标识，此位与并发引用处理有关，它表示这个对象只能通过finalizer才能访问；</li><li>1位：Remapped标识，设置此位的值后，对象未指向relocation set中（relocation set表示需要GC的Region集合）；</li><li>1位：Marked1标识；</li><li>1位：Marked0标识，和上面的Marked1都是标记对象用于辅助GC</li><li>42位：对象的地址（所以它可以支持2^42=4T内存）</li></ul><p><strong>为什么有2个mark标记？</strong></p><p>每一个GC周期开始时，会交换使用的标记位，使上次GC周期中修正的已标记状态失效，所有引用都变成未标记。</p><p>GC周期1：使用mark0，则周期结束所有引用mark标记都会成为01。</p><p>GC周期2：使用mark1，则期待的mark标记10，所有引用都能被重新标记。</p><p>通过对配置ZGC后对象指针分析我们可知，对象指针必须是64位，那么ZGC就无法支持32位操作系统，同样的也就无法支持压缩指针了（CompressedOops，压缩指针也是32位）。</p><p><strong>颜色指针的三大优势：</strong></p><p>1、一旦某个Region的存活对象被移走之后，这个Region<strong>立即就能够被释放和重用掉</strong>，而不必等待整个堆中所有指向该Region的引用都被修正后才能清理，这使得理论上只要还有一个空闲Region，ZGC就能完成收集。</p><p>2、颜色指针可以大幅<strong>减少在垃圾收集过程中内存屏障</strong>的使用数量，ZGC只使用了读屏障。</p><p>3、颜色指针具备强大的<strong>扩展性</strong>，它可以作为一种可扩展的存储结构用来记录更多与对象标记、重定位过程相关的数据，以便日后进一步提高性能。</p><p><strong>读屏障</strong></p><p>之前的GC都是采用Write Barrier，这次ZGC采用了完全不同的方案读屏障，这个是ZGC一个非常重要的特性。</p><p>在标记和移动对象的阶段，每次「从堆里对象的引用类型中读取一个指针」的时候，都需要加上一个Load Barriers。</p><p>那么我们该如何理解它呢？看下面的代码，第一行代码我们尝试读取堆中的一个对象引用obj.fieldA并赋给引用o（fieldA也是一个对象时才会加上读屏障）。如果这时候对象在GC时被移动了，接下来JVM就会加上一个读屏障，这个屏障会把读出的指针更新到对象的新地址上，并且把堆里的这个指针“修正”到原本的字段里。这样就算GC把对象移动了，读屏障也会发现并修正指针，于是应用代码就永远都会持有更新后的有效指针，而且不需要STW。</p><p>那么，JVM是如何判断对象被移动过呢？就是利用上面提到的颜色指针，如果指针是Bad Color，那么程序还不能往下执行，需要「slow path」，修正指针；如果指针是Good Color，那么正常往下执行即可：</p><p><img src="/images/jvm/zgc-7.png" alt="zgc-7"></p><p>❝ 这个动作是不是非常像JDK并发中用到的CAS自旋？读取的值发现已经失效了，需要重新读取。而ZGC这里是之前持有的指针由于GC后失效了，需要通过读屏障修正指针。❞ </p><p>后面3行代码都不需要加读屏障：Object p = o这行代码并没有从堆中读取数据；o.doSomething()也没有从堆中读取数据；obj.fieldB不是对象引用，而是原子类型。</p><p>正是因为Load Barriers的存在，所以会导致配置ZGC的应用的吞吐量会变低。官方的测试数据是需要多出额外4%的开销：</p><p><img src="/images/jvm/zgc-8.png" alt="zgc-8"></p><p>那么，判断对象是Bad Color还是Good Color的依据是什么呢？就是根据上一段提到的Colored Pointers的4个颜色位。当加上读屏障时，根据对象指针中这4位的信息，就能知道当前对象是Bad/Good Color了。</p><p><strong>PS：</strong>既然低42位指针可以支持4T内存，那么能否通过预约更多位给对象地址来达到支持更大内存的目的呢？答案肯定是不可以。因为目前主板地址总线最宽只有48bit，4位是颜色位，就只剩44位了，所以受限于目前的硬件，ZGC最大只能支持16T的内存，JDK13就把最大支持堆内存从4T扩大到了16T。</p><p><strong>ZGC存在的问题</strong></p><p>ZGC最大的问题是<strong>浮动垃圾</strong>。ZGC的停顿时间是在10ms以下，但是ZGC的执行时间还是远远大于这个时间的。假如ZGC全过程需要执行10分钟，在这个期间由于对象分配速率很高，将创建大量的新对象，这些对象很难进入当次GC，所以只能在下次GC的时候进行回收，这些只能等到下次GC才能回收的对象就是浮动垃圾。</p><blockquote><p>ZGC没有分代概念，每次都需要进行全堆扫描，导致一些“朝生夕死”的对象没能及时的被回收。              </p></blockquote><p><strong>解决方案</strong></p><p>目前唯一的办法是增大堆的容量，使得程序得到更多的喘息时间，但是这个也是一个治标不治本的方案。如果需要从根本上解决这个问题，还是需要引入分代收集，让新生对象都在一个专门的区域中创建，然后专门针对这个区域进行更频繁、更快的收集。</p><p><strong>ZGC参数设置</strong></p><p>启用ZGC比较简单，设置JVM参数即可：-XX:+UnlockExperimentalVMOptions 「-XX:+UseZGC」。调优也并不难，因为ZGC调优参数并不多，远不像CMS那么复杂。它和G1一样，可以调优的参数都比较少，大部分工作JVM能很好的自动完成。下图所示是ZGC可以调优的参数：</p><p><img src="/images/jvm/zgc-9.png" alt="zgc-9"></p><p><strong>ZGC触发时机</strong></p><p>ZGC目前有4种机制触发GC：</p><ul><li>定时触发，默认为不使用，可通过ZCollectionInterval参数配置。</li><li>预热触发，最多三次，在堆内存达到10%、20%、30%时触发，主要时统计GC时间，为其他GC机制使用。</li><li>分配速率，基于正态分布统计，计算内存99.9%可能的最大分配速率，以及此速率下内存将要耗尽的时间点，在耗尽之前触发GC（耗尽时间 - 一次GC最大持续时间 - 一次GC检测周期时间）。</li><li>主动触发，（默认开启，可通过ZProactive参数配置） 距上次GC堆内存增长10%，或超过5分钟时，对比距上次GC的间隔时间跟（49 * 一次GC的最大持续时间），超过则触发。</li></ul><p><strong>如何选择垃圾收集器</strong></p><p>1、优先调整堆的大小让服务器自己来选择</p><p>2、如果内存小于100M，使用串行收集器</p><p>3、如果是单核，并且没有停顿时间的要求，串行或JVM自己选择</p><p>4、如果允许停顿时间超过1秒，选择并行或者JVM自己选</p><p>5、如果响应时间最重要，并且不能超过1秒，使用并发收集器</p><p>6、<strong>4G以下可以用parallel，4-8G可以用ParNew+CMS，8G以上可以用G1，几百G以上用ZGC</strong></p><p><strong>安全点与安全区域</strong></p><p><strong>安全点</strong>就是指代码中一些特定的位置，当线程运行到这些位置时它的状态是确定的，这样JVM就可以安全的进行一些操作，比如GC等，所以GC不是想什么时候做就立即触发的，是需要等待所有线程运行到安全点后才能触发。</p><p>这些特定的安全点位置主要有以下几种:</p><p>1、方法返回之前</p><p>2、调用某个方法之后</p><p>3、抛出异常的位置</p><p>4、循环的末尾</p><p>大体实现思想是当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起。轮询标志的地方和安全点是重合的。</p><p><strong>安全区域又是什么？</strong></p><p>Safe Point 是对正在执行的线程设定的。</p><p>如果一个线程处于 Sleep 或中断状态，它就不能响应 JVM 的中断请求，再运行到 Safe Point 上。</p><p>因此 JVM 引入了 Safe Region。</p><p>Safe Region 是指在一段代码片段中，<strong>引用关系不会发生变化</strong>。在这个区域内的任意地方开始 GC 都是安全的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-垃圾收集器G1</title>
      <link href="/posts/jvm-family/8/"/>
      <url>/posts/jvm-family/8/</url>
      
        <content type="html"><![CDATA[<h2 id="G1收集器-XX-UseG1GC"><a href="#G1收集器-XX-UseG1GC" class="headerlink" title="G1收集器(-XX:+UseG1GC)"></a>G1收集器(-XX:+UseG1GC)</h2><p><strong>G1（Garbage-First）是一款面向服务器的垃圾收集器，<font color="red">主要针对配备多颗处理器及大容量内存的机器</font>。以极高概率满足GC停顿时间要求的同时，还具备高吞吐量性能特征。</strong></p><p>在JDK 7版本正式启用，是<font color="red">JDK 9以后的默认垃圾收集器</font></p><p><img src="/images/jvm/go-1.png" alt="go-1"></p><span id="more"></span><p>Region：G1把Java堆划分为<strong>2048个大小相等</strong>的区域，称为Region（Region<strong>物理上不连续</strong>，每个Region大小是1-32M不等，必须是<strong>2的整数次幂</strong>）。参数<code>-XX:G1HeapRegionSize</code>可以指定Region大小，但是不推荐。</p><p><font color="red">堆4G大小，Region为2M；堆64G大小，Region为32M</font></p><p>JVM目标是不超过2048个Region（JVM源码里TARGET_REGION_NUMBER 定义），实际可以超过该值，但是不推荐。</p><p>G1保留了年轻代和老年代的概念，是逻辑上的保留，物理上不连续</p><p>默认年轻代占用堆内存的5%。例如堆大小4096M，年轻代占200M左右，大概100个Region。可以通过<code>-XX:G1NewSizePercent</code>设置新生代初始占比，在系统运行中，JVM会不停的给年轻代增加更多的Region，但是最多新生代的占比不会超过60%，可以通过<code>-XX:G1MaxNewSizePercent</code>调整。年轻代中的Eden和Survivor对应的Region也跟之前一样，默认8:1:1</p><p>G1有专门分配大对象的Region叫<strong>Humongous区</strong>，而不是让大对象直接进入老年代的Region中。在G1中，大对象的判定规则就是一个大对象超过了一个Region大小的50%，而且一个大对象如果太大，可能会横跨多个Region来存放。Humongous区专门存放短期巨型对象，不用直接进老年代，可以节约老年代的空间，避免因为老年代空间不够的GC开销。</p><p>Full GC的时候除了收集年轻代和老年代之外，也会将Humongous区一并回收。</p><p><font color="red">堆内存划分2048个大小相等的Region，物理不连续，Region的大小和个数可修改，但是不推荐。新生代默认占比堆内存的5%，最大不超过堆内存的60%。另外大对象保存到Humongous区，大于Region的50%为大对象，Humongous可跨多个Region保存</font></p><p>G1收集器一次GC(主要值Mixed GC)的运作过程大致分为以下几个步骤：</p><ul><li><p><strong>初始标记</strong>（initial mark，STW）：暂停所有的其他线程，并记录下gc roots直接能引用的对象，<strong>速度很快</strong> ；</p></li><li><p><strong>并发标记</strong>（Concurrent Marking）：同CMS的并发标记</p></li><li><p><strong>最终标记</strong>（Remark，STW）：同CMS的重新标记</p></li><li><p><strong>筛选回收</strong>（Cleanup，STW）：筛选回收阶段首先对各个Region的<strong>回收价值和成本进行排序</strong>，<strong>根据用户所期望的GC停顿STW时间(可以用JVM参数 -XX:MaxGCPauseMillis指定)来制定回收计划</strong>，</p></li></ul><p>不管是年轻代或是老年代，<strong>回收算法主要用的是复制算法</strong>，<strong>将一个region中的存活对象复制到另一个region中，这种不会像CMS那样回收完因为有很多内存碎片还需要整理一次，G1采用复制算法回收几乎不会有太多内存碎片</strong>。(注意：CMS回收阶段是跟用户线程一起并发执行的，G1因为内部实现太复杂暂时没实现并发回收，不过到了ZGC，Shenandoah就实现了并发收集，Shenandoah可以看成是G1的升级版本)</p><p><img src="/images/jvm/go-2.png" alt="go-2"></p><p><strong>G1收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的Region(这也就是它的名字Garbage-First的由来)，比如一个Region花200ms能回收10M垃圾，另外一个Region花50ms能回收20M垃圾，在回收时间有限情况下，G1当然会优先选择后面这个Region回收</strong>。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限时间内可以尽可能高的收集效率。</p><p>被视为JDK1.7以上版本Java虚拟机的一个重要进化特征。它具备以下特点：</p><ul><li><strong>并行与并发</strong>：G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿时间。部分其他收集器原本需要停顿Java线程来执行GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。</li><li><strong>分代收集</strong>：虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但是还是保留了分代的概念。</li><li><strong>空间整合</strong>：与CMS的“标记–清理”算法不同，G1从整体来看是基于“<strong>标记整理</strong>”算法实现的收集器；从局部上来看是基于“复制”算法实现的。</li><li><strong>可预测的停顿</strong>：这是G1相对于CMS的另一个大优势，降低停顿时间是G1 和 CMS 共同的关注点，但G1 除了追求低停顿外，还能建立<strong>可预测的停顿时间模型</strong>，能让使用者明确指定在一个长度为M毫秒的时间片段(通过参数”<strong>-XX:MaxGCPauseMillis</strong>“指定)内完成垃圾收集。</li></ul><p><strong>G1垃圾收集分类</strong></p><p><strong>YoungGC</strong></p><p>YoungGC并不是说现有的Eden区放满了就会马上触发，G1会计算下现在Eden区回收大概要多久时间，如果回收时间远远小于参数 -XX:MaxGCPauseMills 设定的值，那么增加年轻代的region，继续给新对象存放，不会马上做Young GC，直到下一次Eden区放满，G1计算回收时间接近参数 -XX:MaxGCPauseMills 设定的值，那么就会触发Young GC</p><p><strong>MixedGC</strong></p><p>不是FullGC，老年代的堆占有率达到参数(<strong>-XX:InitiatingHeapOccupancyPercent</strong>)设定的值则触发，回收所有的Young和部分Old(根据期望的GC停顿时间确定old区垃圾收集的优先顺序)以及<strong>大对象区</strong>，正常情况G1的垃圾收集是先做MixedGC，主要使用复制算法，需要把各个region中存活的对象拷贝到别的region里去，拷贝过程中如果发现<strong>没有足够的空region</strong>能够承载拷贝对象就会触发一次Full GC</p><p><strong>Full GC</strong></p><p>停止系统程序，然后采用单线程进行标记、清理和压缩整理，好空闲出来一批Region来供下一次MixedGC使用，这个过程是非常耗时的。(Shenandoah优化成多线程收集了)</p><p>相关参数（<a href="https://docs.oracle.com/en/java/javase/19/gctuning/garbage-first-g1-garbage-collector1.html#GUID-99526C47-2C71-408C-9DBE-4F38ED839FF0">官网地址</a>）：</p><table><thead><tr><th>参数</th><th>作用</th><th>默认</th></tr></thead><tbody><tr><td><code>-XX:+UseG1GC</code></td><td>使用G1收集器</td><td>-</td></tr><tr><td><code>-XX:ParallelGCThreads</code></td><td>指定GC工作的线程数量</td><td>-</td></tr><tr><td><code>-XX:G1HeapRegionSize</code></td><td>指定分区大小(1MB~32MB，且必须是2的N次幂)，<br>默认将整堆划分为2048个分区</td><td>-</td></tr><tr><td><code>-XX:MaxGCPauseMillis</code></td><td>目标暂停时间，<font color="red">停顿时间设置太小会失效</font></td><td>200</td></tr><tr><td><code>-XX:G1NewSizePercent</code></td><td>新生代内存初始空间(值配置整数，默认就是百分比)</td><td>5</td></tr><tr><td><code>-XX:G1MaxNewSizePercent</code></td><td>新生代内存最大空间</td><td>60</td></tr><tr><td><code>-XX:TargetSurvivorRatio</code></td><td>Survivor区的填充容量(默认50%)，Survivor区域里的一批对象(年龄1+年龄2+年龄n的多个年龄对象)总和超过了Survivor区域的50%，此时就会把年龄n(含)以上的对象都放入老年代</td><td>50</td></tr><tr><td><code>-XX:MaxTenuringThreshold</code></td><td>最大年龄阈值</td><td>15</td></tr><tr><td><code>-XX:InitiatingHeapOccupancyPercent</code></td><td>老年代占用空间达到整堆内存阈值(默认45%)，则执行新生代和老年代的混合收集(<strong>MixedGC</strong>)</td><td>45</td></tr><tr><td><code>-XX:G1MixedGCLiveThresholdPercent</code></td><td>region中的存活对象低于这个值时才会回收该region，如果超过这个值，存活对象过多，回收的的意义不大</td><td>85</td></tr><tr><td><code>-XX:G1MixedGCCountTarget</code></td><td>在一次回收过程中指定做几次筛选回收(默认8次)，在最后一个筛选回收阶段可以回收一会，然后暂停回收，恢复系统运行，一会再开始回收，这样可以让系统不至于单次停顿时间过长。</td><td>8</td></tr><tr><td><code>-XX:G1HeapWastePercent</code></td><td>gc过程中空出来的region是否充足阈值，在混合回收的时候，对Region回收都是基于复制算法进行的，都是把要回收的Region里的存活对象放入其他Region，然后这个Region中的垃圾对象全部清理掉，这样的话在回收过程就会不断空出来新的Region，一旦空闲出来的Region数量达到了堆内存的5%，此时就会立即停止混合回收，意味着本次混合回收结束。</td><td>5</td></tr></tbody></table><p><strong>G1垃圾收集器优化建议</strong></p><p>假设参数 <code>-XX:MaxGCPauseMills</code> 设置的值很大，导致系统运行很久才会做年轻代gc，年轻代可能都占用了堆内存的60%了，此时才触发年轻代gc。那么存活下来的对象可能就会很多，此时就会导致Survivor区域放不下那么多的对象，就会进入老年代中。</p><p>或者是你年轻代gc过后，存活下来的对象过多，导致进入Survivor区域后触发了动态年龄判定规则，达到了Survivor区域的50%，也会快速导致一些对象进入老年代中。</p><p>所以这里核心还是在于调节 <code>-XX:MaxGCPauseMills</code> 这个参数的值，在保证他的年轻代gc别太频繁的同时，还得考虑每次gc过后的存活对象有多少，避免存活对象太多快速进入老年代，频繁触发mixed gc</p><p><font color="red">设置停顿时间是关键，不能设置太大导致存活对象过多，设置太小也不行会导致失效，比如设置几毫秒根本收集不了多少垃圾</font></p><p><strong>什么场景适合使用G1</strong></p><p>1、50%以上的堆被存活对象占用</p><p>2、对象分配和晋升的速度变化非常大</p><p>3、垃圾回收时间特别长，超过1秒</p><p>4、8GB以上的堆内存(建议值)</p><p>5、停顿时间是500ms以内</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-垃圾收集底层算法实现</title>
      <link href="/posts/jvm-family/7/"/>
      <url>/posts/jvm-family/7/</url>
      
        <content type="html"><![CDATA[<h2 id="三色标记"><a href="#三色标记" class="headerlink" title="三色标记"></a>三色标记</h2><p>在并发标记的过程中，应用线程和垃圾收集线程一起跑，对象的引用很可能发生变化，于是有了<strong>多标和漏标</strong>的情况（这里指标记为非垃圾对象），其中<strong>漏标</strong>的问题主要引入<strong>三色标记</strong>算法来解决。</p><p><strong>三色标记算法是把Gc roots可达性分析遍历对象过程中遇到的对象， 按照“是否访问过”这个条件标记成以下三种颜色：</strong></p><ul><li><p><strong>黑色</strong>： 表示对象已经被垃圾收集器访问过， 且这个对象的所有引用都已经扫描过。</p></li><li><p><strong>灰色</strong>： 表示对象已经被垃圾收集器访问过， 但这个对象上至少存在一个引用还没有被扫描过。</p></li><li><p><strong>白色</strong>： 表示对象尚未被垃圾收集器访问过。</p></li></ul><p><font color="red">黑色：全部扫描完成，包括其成员变量；灰色：部分扫描完成；白色：未扫描过</font></p><span id="more"></span><p><img src="/images/jvm/gca-1.png" alt="gca-1"></p><p><strong>多标-浮动垃圾</strong></p><p>并发标记过程中，由于用户线程未停止，随着程序运行部分对象的引用可能会修改，导致原本标记完成的非垃圾对象，随着方法结束栈帧销毁此时变成了垃圾对象。这种本应该被回收的对象，称为”浮动垃圾”。浮动垃圾不会影响垃圾回收的正确定，等下一轮垃圾回收清除即可。</p><p><font color="red">少部分浮动垃圾没有在本轮垃圾回收掉没关系，非垃圾对象被回收掉是绝对不行的</font></p><p>另外，<strong>针对并发标记(还有并发清理)开始后产生的新对象，通常的做法是直接全部当成黑色</strong>，本轮不会进行清除。这部分对象期间可能也会变为垃圾，这也算是浮动垃圾的一部分。</p><p><font color="red">这部分新对象在初始标记时不存在，并发标记可能扫描不到。直接标记黑色不清理</font></p><p><font color="red">初始标记是标记gc roots直接引用的对象；并发标记是从初始标记到的对象开始扫描</font></p><p><strong>漏标-读写屏障</strong></p><p>漏标会导致被引用的对象被当成垃圾误删除，这是严重bug，必须解决，有两种解决方案： <strong>增量更新（Incremental Update） 和原始快照（Snapshot At The Beginning，SATB） 。</strong></p><p><strong>增量更新</strong>就是当黑色对象插入新的指向白色对象的引用关系时， 就将这个新插入的引用记录下来， 等并发扫描结束之后， 再将这些记录过的引用关系中的黑色对象为根， 重新扫描一次。 这可以简化理解为， <strong>黑色对象一旦新插入了指向白色对象的引用之后， 它就变回灰色对象了</strong>。</p><p><font color="red">新增的引用保存在一个集合里，重新标记阶段扫描这个列表解决漏标问题</font></p><p><strong>原始快照</strong>就是当灰色对象要删除指向白色对象的引用关系时， 就将这个要删除的引用记录下来， 在并发扫描结束之后， 再将这些记录过的引用关系中的灰色对象为根， 重新扫描一次，这样就能扫描到白色的对象，将白色对象直接标记为黑色(<strong>目的就是让这种对象在本轮gc清理中能存活下来，待下一轮gc的时候重新扫描，这个对象也有可能是浮动垃圾</strong>)</p><p><font color="red">要删除的引用记录在集合里，集合里全部标记为黑色，作为浮动垃圾下轮回收</font></p><p>无论是对引用关系记录的插入还是删除， 虚拟机的记录操作都是通过<strong>写屏障</strong>实现的。 </p><p>所谓的写屏障，其实就是指在赋值操作前后，加入一些处理（可以参考AOP的概念）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">oop_field_store</span><span class="token punctuation">(</span>oop<span class="token operator">*</span> field<span class="token punctuation">,</span> oop new_value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">pre_write_barrier</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 写屏障-写前操作</span>    <span class="token operator">*</span>field <span class="token operator">=</span> new_value<span class="token punctuation">;</span>     <span class="token function">post_write_barrier</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 写屏障-写后操作</span><span class="token punctuation">}</span></code></pre><ul><li><p>写屏障实现SATB</p><p>原引用消失的场景，比如对象置空=null，将<strong>原来成员变量的引用</strong>保存到一个集合里</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">pre_write_barrier</span><span class="token punctuation">(</span>oop<span class="token operator">*</span> field<span class="token punctuation">)</span> <span class="token punctuation">{</span>    oop old_value <span class="token operator">=</span> <span class="token operator">*</span>field<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取旧值</span>    remark_set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>old_value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录原来的引用对象</span><span class="token punctuation">}</span></code></pre><ul><li><p>写屏障实现增量更新</p><p>新增引用，将<strong>新的成员变量引用</strong>保存到一个集合里</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">post_write_barrier</span><span class="token punctuation">(</span>oop<span class="token operator">*</span> field<span class="token punctuation">,</span> oop new_value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      remark_set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>new_value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录新引用的对象</span><span class="token punctuation">}</span></code></pre><p><strong>读屏障</strong></p><pre class=" language-java"><code class="language-java">oop <span class="token function">oop_field_load</span><span class="token punctuation">(</span>oop<span class="token operator">*</span> field<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">pre_load_barrier</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读屏障-读取前操作</span>    <span class="token keyword">return</span> <span class="token operator">*</span>field<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">pre_load_barrier</span><span class="token punctuation">(</span>oop<span class="token operator">*</span> field<span class="token punctuation">)</span> <span class="token punctuation">{</span>      oop old_value <span class="token operator">=</span> <span class="token operator">*</span>field<span class="token punctuation">;</span>    remark_set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>old_value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录读取到的对象</span><span class="token punctuation">}</span></code></pre><p>对于读写屏障，以Java HotSpot VM为例，其并发标记时对漏标的处理方案如下：</p><ul><li><strong>CMS：写屏障 + 增量更新</strong></li><li><strong>G1，Shenandoah：写屏障 + SATB</strong></li><li><strong>ZGC：读屏障</strong></li></ul><p>工程实现中，读写屏障还有其他功能，比如写屏障可以用于记录跨代/区引用的变化，读屏障可以用于支持移动对象的并发执行等。功能之外，还有性能的考虑，所以对于选择哪种，每款垃圾回收器都有自己的想法。</p><p><strong>为什么G1用SATB？CMS用增量更新？</strong></p><p><strong>我的理解</strong>：SATB相对增量更新效率会高(当然SATB可能造成更多的浮动垃圾)，因为不需要在重新标记阶段再次深度扫描被删除引用对象，而CMS对增量引用的根对象会做深度扫描，G1因为很多对象都位于不同的region，CMS就一块老年代区域，重新深度扫描对象的话G1的代价会比CMS高，所以G1选择SATB不深度扫描对象，只是简单标记，等到下一轮GC再深度扫描。</p><p><font color="red">SATB在重新标记阶段不会重新深度扫描，但是会产生更多浮动垃圾。G1中对象的引用可能跨多个region，扫描成本比CMS高，选择SATB。CMS就一块老年代，深度扫描后更可以节省空间，选择增量更新</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-垃圾收集算法</title>
      <link href="/posts/jvm-family/6/"/>
      <url>/posts/jvm-family/6/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM有哪些垃圾回收算法"><a href="#JVM有哪些垃圾回收算法" class="headerlink" title="JVM有哪些垃圾回收算法"></a>JVM有哪些垃圾回收算法</h2><ul><li><p>标记-清除算法：标记无用对象，然后进行清除回收。缺点：效率不高，无法清除垃圾碎片</p></li><li><p>复制算法：按照容量划分两个大小相等的内存区域，当一块用完的时候将活着的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。缺点：内存使用率不高，只有原来一半</p></li><li><p>标记-整理算法：标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存</p></li><li><p>分代算法：根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代基本采用复制算法，老年代采用标记整理算法</p></li></ul><p><font color="red">新生代每次收集都有大量的对象死去，选择复制算法只需要复制少量的存活对象即可；老年代的对象存活概率较高，没有额外的空间提供给复制算法，必须选择标记-清除或标记-整理算法。标记-清除和标记-整理算法比复制算法慢10倍以上</font></p><span id="more"></span><h4 id="标记-清除算法（Mark-Sweep）"><a href="#标记-清除算法（Mark-Sweep）" class="headerlink" title="标记-清除算法（Mark-Sweep）"></a>标记-清除算法（Mark-Sweep）</h4><p>是一种常见的基础垃圾收集算法，垃圾收集分为两个阶段：</p><ul><li><p>标记阶段：标记出可以回收的对象，<font color="red">通常情况下是标记存活对象，回收未被标记的对象</font></p></li><li><p>清除阶段：回收被标记的对象占用的空间</p></li></ul><p><font color="red">之所以是基础的，是因为后面的垃圾收集算法都是在此算法基础上进行改进的</font></p><p><strong>优点：</strong>实现简单，不需要对象移动</p><p><strong>缺点：</strong>标记、清除过程效率低，产生大量不连续的内存碎片，提高了垃圾回收的频率</p><p><font color="red">需要标记的对象太多时效率不高；标记清除后产生大量不连续的碎片</font></p><p><img src="/images/jvm/gc-1.png" alt="gc-1"></p><h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>为解决标记-清除算法效率不高的问题，产生了复制算法。把内存空间划分为相等的两个区域，每次只使用其中一个区域，垃圾收集时，遍历当前使用的区域，把存活对象复制到另一个区域中，最后将当前区域可回收的对象进行回收</p><p><strong>优点：</strong>按顺序分配内存即可，实现简单、运行高效，不用考虑内存碎片</p><p><strong>缺点：</strong>可用的内存大小缩小为原来的一半，对象存活率高时会频繁进行复制</p><p><img src="/images/jvm/gc-2.png" alt="gc-2"></p><h4 id="标记-整理算法（Mark-Compact）"><a href="#标记-整理算法（Mark-Compact）" class="headerlink" title="标记-整理算法（Mark-Compact）"></a>标记-整理算法（Mark-Compact）</h4><p>新生代可以使用复制算法，但是老年代不行，因为老年代的对象存活率较高，这样会有较多的复制操作，导致效率变低。标记-清除算法可以应用在老年代，但是效率不高，内存回收后很可能产生大量的内存碎片。因此出现了标记-整理算法，与标记-清除算法不同的是，在标记可回收的对象后将所有存活的对象压缩到内存的一端，使他们紧凑的排列在一起，然后对边界以外的内存进行回收。回收后已用和未用的内存各自一边。</p><p><strong>优点：</strong>解决了标记-清除算法存在的内存碎片问题</p><p><strong>缺点：</strong>仍需要进行局部对象的移动，一定程度上降低了效率</p><p><img src="/images/jvm/gc-3.png" alt="gc-3"></p><h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>当前商业虚拟机都采用<strong>分代收集</strong>的垃圾收集算法。分代收集算法就是根据对象的存活周期将内存划分为几块。一般包括<strong>年轻代</strong>、<strong>老年代</strong>和<strong>永久代</strong>。</p><p><img src="/images/jvm/gc-4.png" alt="gc-4"></p><p>相关参数：</p><table><thead><tr><th>参数</th><th>作用</th><th>默认</th></tr></thead><tbody><tr><td><code>-XX:NewRatio=n</code></td><td>年轻代和老年代的内存比例为 <code>1:n</code></td><td>2</td></tr><tr><td><code>-XX:SurvivorRatio=n</code></td><td>新生代Eden和Survivor比例 <code>n:1:1</code></td><td>8</td></tr><tr><td><code>-XX:PretenureSizeThreshold=n</code></td><td>对象大于该值就会在老年代分配，0表示不限制</td><td>0</td></tr><tr><td><code>-Xms</code></td><td>最小堆内存/初始化堆内存</td><td>-</td></tr><tr><td><code>-Xmx</code></td><td>最大堆内存</td><td>-</td></tr><tr><td><code>-Xmn</code></td><td>新生代大小</td><td>-</td></tr><tr><td><code>-XX:+DisableExplicitGC</code></td><td>忽略掉System.gc()的调用</td><td>启用</td></tr><tr><td><code>-XX:+UseSerialGC</code></td><td>Serial收集器，年轻代</td><td></td></tr><tr><td><code>-XX:+UseSerialOldGC</code></td><td>Serial收集器，老年代</td><td></td></tr><tr><td><code>-XX:+UseParNewGC</code></td><td>ParNew收集器，只能用在年轻代</td><td></td></tr><tr><td><code>-XX:+UseConcMarkSweepGC</code></td><td>CMS收集器，只能用在老年代，和ParNew配合</td><td></td></tr><tr><td><code>-XX:+UseParallelGC</code></td><td>Parallel Scavenge收集器，年轻代</td><td></td></tr><tr><td><code>-XX:+UseParallelOldGC</code></td><td>Parallel Scavenge收集器，老年代</td><td></td></tr></tbody></table><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p><strong>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现</strong></p><p>没有万能的垃圾收集器，<strong>我们能做的就是根据具体应用场景选择适合自己的垃圾收集器</strong></p><p>下图展示作用在不同分代的收集器，用于回收新生代的收集器包括Serial、ParNew、Parallel Scavenge，回收老年代的收集器包括Serial Old、Parallel Old、CMS，还有用于回收整个Java堆的G1收集器，以及未来可能用到的ZGC。不同收集器之间的连线表示他们可以搭配使用。</p><p><img src="/images/jvm/gc-5.png" alt="gc-5"></p><h4 id="Serial收集器-XX-UseSerialGC-XX-UseSerialOldGC"><a href="#Serial收集器-XX-UseSerialGC-XX-UseSerialOldGC" class="headerlink" title="Serial收集器(-XX:+UseSerialGC  -XX:+UseSerialOldGC)"></a>Serial收集器(<code>-XX:+UseSerialGC</code>  <code>-XX:+UseSerialOldGC</code>)</h4><p>新生代单线程收集器，标记和清理都是单线程，优点是<strong>简单高效</strong>（没有线程交互的开销）</p><p>它的 <strong>“单线程”</strong> 的意义不仅仅意味着它只会使用一条垃圾收集线程去完成垃圾收集工作，更重要的是它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（ <strong>“Stop The World”</strong> ），直到它收集结束。</p><p><img src="/images/jvm/gc-6.png" alt="gc-6"></p><p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong></p><p><strong>Serial Old收集器是Serial收集器的老年代版本</strong>，它同样是一个单线程收集器。它主要有两大用途：一种用途是在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用，<strong>另一种用途是作为CMS收集器的后备方案</strong>。</p><h4 id="Parallel-Scavenge收集器-XX-UseParallelGC-XX-UseParallelOldGC"><a href="#Parallel-Scavenge收集器-XX-UseParallelGC-XX-UseParallelOldGC" class="headerlink" title="Parallel Scavenge收集器(-XX:+UseParallelGC -XX:+UseParallelOldGC)"></a>Parallel Scavenge收集器(<code>-XX:+UseParallelGC</code> <code>-XX:+UseParallelOldGC</code>)</h4><p>新生代并行收集器，追求高吞吐量，高效利用CPU。吞吐量 = 用户线程时间/(用户线程时间+GC线程时间)，高吞吐量可以高效的利用CPU时间，尽快完成程序的运算任务。默认的收集线程数跟cpu核数相同，当然也可以用参数(-XX:ParallelGCThreads)指定收集线程数，但是一般不推荐修改。</p><p><strong>Parallel Scavenge收集器关注点是吞吐量（高效率的利用CPU）。CMS等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）。</strong></p><p><img src="/images/jvm/gc-7.png" alt="gc-7"></p><p><strong>新生代采用复制算法，老年代采用标记-整理算法。</strong></p><p><strong>Parallel Old收集器是Parallel Scavenge收集器的老年代版本</strong>。使用多线程和“标记-整理”算法。在注重吞吐量以及CPU资源的场合，都可以优先考虑 Parallel Scavenge收集器和Parallel Old收集器(<strong>JDK8默认的新生代和老年代收集器</strong>)。</p><h4 id="ParNew收集器-XX-UseParNewGC"><a href="#ParNew收集器-XX-UseParNewGC" class="headerlink" title="ParNew收集器(-XX:+UseParNewGC)"></a>ParNew收集器(<code>-XX:+UseParNewGC</code>)</h4><p>新生代并行收集器，实际上是Serial收集器的多线程版本，在多核CPU环境下比Serial表现更好</p><p>ParNew收集器<strong>跟Parallel收集器很类似</strong>，区别主要在于它可以和CMS收集器配合使用。</p><p><img src="/images/jvm/gc-8.png" alt="gc-8"></p><p><strong>新生代采用复制算法</strong>，不能作用在老年代</p><p>它是许多运行在Server模式下的虚拟机的首要选择，除了Serial收集器外，只有它能与CMS收集器（真正意义上的并发收集器）配合工作。</p><h4 id="CMS收集器-XX-UseConcMarkSweepGC"><a href="#CMS收集器-XX-UseConcMarkSweepGC" class="headerlink" title="CMS收集器(-XX:+UseConcMarkSweepGC)"></a>CMS收集器(<code>-XX:+UseConcMarkSweepGC</code>)</h4><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用，它是HotSpot虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</strong></p><p><font color="red">以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾收集器，非常适合要求服务器响应速度的应用</font></p><p>CMS是使用<strong>标记-清除</strong>算法实现的，所以在GC的时候会产生大量内存碎片，当剩余内存不能满足程序运行要求时，系统将会出现Concurrent Mode Failure，临时CMS会采用Serial Old回收器进行垃圾清除，此时性能将会被降低。</p><p><font color="red">注意 使用时要避免出现并发失败的情况</font></p><p>CMS收集器的运作过程更加复杂。整个过程分为几个步骤：</p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程(STW)，并记录下gc roots<strong>直接能引用的对象</strong>，<strong>速度很快</strong>。</li><li><strong>并发标记：</strong> 并发标记阶段就是从GC Roots的直接关联对象开始遍历整个对象图的过程， 这个过程耗时较长但是不需要停顿用户线程， 可以与垃圾收集线程一起并发运行。因为用户程序继续运行，可能会有导致已经标记过的对象状态发生改变。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录(<strong>主要是处理漏标问题</strong>)，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短。<strong>主要用到三色标记里的增量更新算法做重新标记。</strong></li><li><strong>并发清理：</strong> 开启用户线程，同时GC线程开始对未标记的区域做清扫。这个阶段如果有新增对象会被标记为黑色不做任何处理。</li><li><strong>并发重置：</strong>重置本次GC过程中的标记数据。</li></ul><p><img src="/images/jvm/gc-9.png" alt="gc-9"></p><p>优点：<strong>并发收集、低停顿</strong>。</p><p>缺点：</p><ul><li>对CPU资源敏感（会和服务抢资源）；<font color="red">用户线程和垃圾收集线程一起执行</font></li><li>无法处理<strong>浮动垃圾</strong>（在并发标记和并发清理阶段又产生垃圾，只能等到下一次gc再清理）；</li><li>回收算法-<strong>“标记-清除”算法</strong>会导致收集结束时会有<strong>大量空间碎片</strong>产生，通过参数<code>-XX:+UseCMSCompactAtFullCollection</code>可以让jvm在执行完标记清除后再做整理</li><li>执行过程中的不确定性，会存在上一次垃圾回收还没执行完，然后垃圾回收又被触发的情况，<strong>特别是在并发标记和并发清理阶段会出现</strong>。当剩余内存不能满足程序运行要求时，系统会出现”<strong>concurrent mode failure</strong>“，<strong>此时会进入stop the world，用serial old垃圾收集器来回收</strong></li></ul><p><strong>CMS的相关核心参数</strong></p><table><thead><tr><th>参数</th><th>作用</th><th>默认</th></tr></thead><tbody><tr><td><code>-XX:+UseConcMarkSweepGC</code></td><td>启用cms</td><td></td></tr><tr><td><code>-XX:ConcGCThreads</code></td><td>并发的GC线程数</td><td></td></tr><tr><td><code>-XX:+UseCMSCompactAtFullCollection</code></td><td>FullGC之后做压缩整理（减少碎片）</td><td></td></tr><tr><td><code>-XX:CMSFullGCsBeforeCompaction</code></td><td>多少次FullGC之后压缩一次，0代表每次FullGC后都会压缩一次</td><td>0</td></tr><tr><td><code>-XX:CMSInitiatingOccupancyFraction</code></td><td>当老年代使用达到该百分比时会触发FullGC</td><td>92</td></tr><tr><td><code>-XX:+UseCMSInitiatingOccupancyOnly</code></td><td>只使用设定的回收阈值(<code>-XX:CMSInitiatingOccupancyFraction</code>设定的值)，如果不指定，JVM仅在第一次使用设定值，后续则会自动调整</td><td></td></tr><tr><td><code>-XX:+CMSScavengeBeforeRemark</code></td><td>在CMS GC前启动一次minor gc，降低CMS GC标记阶段的开销，一般CMS的GC耗时 80%都在标记阶段</td><td></td></tr><tr><td><code>-XX:+CMSParallellnitialMarkEnabled</code></td><td>在初始标记的时候多线程执行，缩短STW</td><td></td></tr><tr><td><code>-XX:+CMSParallelRemarkEnabled</code></td><td>在重新标记的时候多线程执行，缩短STW</td><td></td></tr></tbody></table><p><strong>亿级流量电商系统如何优化JVM参数设置(ParNew+CMS)</strong></p><p><img src="/images/jvm/gc-10.png" alt="gc-10"></p><p><strong>很多优化无非就是让短期存活的对象尽量都留在survivor里，不要进入老年代，这样在minor gc的时候这些对象都会被回收，不会进到老年代从而导致full gc</strong></p><p>只要年轻代参数设置合理，老年代CMS的参数设置基本都可以用默认值，参考：</p><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>Xms3072M <span class="token operator">-</span>Xmx3072M <span class="token operator">-</span>Xmn2048M <span class="token operator">-</span>Xss1M  <span class="token operator">-</span>XX<span class="token operator">:</span>MetaspaceSize<span class="token operator">=</span>256M <span class="token operator">-</span>XX<span class="token operator">:</span>MaxMetaspaceSize<span class="token operator">=</span>256M  <span class="token operator">-</span>XX<span class="token operator">:</span>SurvivorRatio<span class="token operator">=</span><span class="token number">8</span> <span class="token operator">-</span>XX<span class="token operator">:</span>MaxTenuringThreshold<span class="token operator">=</span><span class="token number">5</span> <span class="token operator">-</span>XX<span class="token operator">:</span>PretenureSizeThreshold<span class="token operator">=</span>1M <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseParNewGC <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseConcMarkSweepGC <span class="token operator">-</span>XX<span class="token operator">:</span>CMSInitiatingOccupancyFraction<span class="token operator">=</span><span class="token number">92</span> <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UseCMSCompactAtFullCollection <span class="token operator">-</span>XX<span class="token operator">:</span>CMSFullGCsBeforeCompaction<span class="token operator">=</span><span class="token number">3</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-内存分配机制</title>
      <link href="/posts/jvm-family/5/"/>
      <url>/posts/jvm-family/5/</url>
      
        <content type="html"><![CDATA[<h2 id="对象内存分配"><a href="#对象内存分配" class="headerlink" title="对象内存分配"></a>对象内存分配</h2><p>对象内存分配流程图：</p><p><img src="/images/jvm/oma.png" alt="oma"></p><span id="more"></span><h4 id="对象栈上分配"><a href="#对象栈上分配" class="headerlink" title="对象栈上分配"></a>对象栈上分配</h4><p>我们通过JVM内存分配可以知道JAVA中的对象都是在堆上进行分配，当对象没有被引用的时候，需要依靠GC进行回收内存，如果对象数量较多的时候，会给GC带来较大压力，也间接影响了应用的性能。为了减少临时对象在堆内分配的数量，JVM通过<strong>逃逸分析</strong>确定该对象不会被外部访问。如果不会逃逸可以将该对象在<strong>栈上分配</strong>内存，这样该对象所占用的内存空间就可以随栈帧出栈而销毁，就减轻了垃圾回收的压力。</p><p><font color="red">为了减少临时变量在堆上的分配，尝试在栈上进行分配，临时变量随着方法结束随着栈帧一起销毁</font></p><p><strong>对象逃逸分析</strong>：就是分析对象动态作用域，当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他地方中。</p><p><font color="red">用来判断对象能不能在栈上分配，如果对象只在方法内部使用，没有可能被其他对象或方法引用，就认为当前对象没有逃逸出这个方法，可以栈上分配</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> User <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//TODO 保存到数据库</span>   <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//TODO 保存到数据库</span><span class="token punctuation">}</span></code></pre><p>如上test1中，User对象作为返回值逃逸出了当前方法；test2中User对象没有逃逸出当前方法，方法结束后就可以销毁。</p><p>JVM对于这种情况可以通过开启逃逸分析参数(<code>-XX:+DoEscapeAnalysis</code>)来优化对象内存分配位置，使其通过<strong>标量替换</strong>优先分配在栈上(<strong>栈上分配</strong>)，<strong>JDK7之后默认开启逃逸分析</strong>，如果要关闭使用参数(<code>-XX:-DoEscapeAnalysis</code>)</p><p><strong>标量替换：</strong>通过逃逸分析确定该对象不会被外部访问，并且对象可以被进一步分解时，<strong>JVM不会创建该对象</strong>，而是将该对象成员变量分解若干个被这个方法使用的成员变量所代替，这些代替的成员变量在栈帧或寄存器上分配空间，这样就不会因为没有一大块连续空间导致对象内存不够分配。开启标量替换参数(<code>-XX:+EliminateAllocations</code>)，<strong>JDK7之后默认开启</strong>。</p><p><font color="red">对逃逸分析栈上分配的优化，对象进一步拆分可以在不连续的空间保存，充分利用栈内空间</font></p><p><strong>标量与聚合量：</strong>标量即不可被进一步分解的量，而JAVA的基本数据类型就是标量（如：int，long等基本数据类型以及reference类型等），标量的对立就是可以被进一步分解的量，而这种量称之为聚合量。而在JAVA中对象就是可以被进一步分解的聚合量。</p><p><font color="red">基本数据类型是标量，对象含有多个属性就是聚合量</font></p><h4 id="对象在Eden区分配"><a href="#对象在Eden区分配" class="headerlink" title="对象在Eden区分配"></a>对象在Eden区分配</h4><p>大多数情况下，对象在新生代中 Eden 区分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次Minor GC。</p><p> <strong>Minor GC和Full GC 有什么不同呢？</strong></p><ul><li><strong>Minor GC/Young GC</strong>：指发生新生代的的垃圾收集动作，Minor GC非常频繁，回收速度一般也比较快。</li><li><strong>Major GC/Full GC</strong>：一般会回收老年代 ，年轻代，方法区的垃圾，Major GC的速度一般会比Minor GC的慢10倍以上。</li></ul><p><strong>Eden与Survivor区默认8:1:1</strong></p><p>大量的对象被分配在eden区，eden区满了后会触发minor gc，可能会有99%以上的对象成为垃圾被回收掉，剩余存活的对象会被挪到为空的那块survivor区，下一次eden区满了后又会触发minor gc，把eden区和survivor区垃圾对象回收，把剩余存活的对象一次性挪动到另外一块为空的survivor区，因为新生代的对象都是朝生夕死的，存活时间很短，所以JVM默认的8:1:1的比例是很合适的，<strong>让eden区尽量的大，survivor区够用即可，</strong></p><p>JVM默认有这个参数<code>-XX:+UseAdaptiveSizePolicy</code>(默认开启)，会导致这个8:1:1比例自动变化，如果不想这个比例有变化可以设置参数<code>-XX:-UseAdaptiveSizePolicy</code></p><h4 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h4><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。JVM参数 <code>-XX:PretenureSizeThreshold</code> 可以设置大对象的大小，如果对象超过设置大小会直接进入老年代，不会进入年轻代，这个参数<strong>只在 Serial 和ParNew两个收集器下有效</strong>。</p><p>比如设置JVM参数：<code>-XX:PretenureSizeThreshold=1000000 (单位是字节)  -XX:+UseSerialGC </code> </p><p><strong>为什么要这样呢？</strong></p><p>为了避免为大对象分配内存时的复制操作而降低效率。</p><p><font color="red">大对象如果在年轻代的Eden或Survivor区，且经历minor gc依旧存活的情况下，会占用大量年轻代的空间，年轻代剩余可用空间减少，进而导致频繁的minor gc</font></p><h4 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h4><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。</p><p>如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并将对象年龄设为1。对象在 Survivor 中每熬过一次 MinorGC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁，CMS收集器默认6岁，不同的垃圾收集器会略微有点不同），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><p><font color="red">长期存活对象经历Minor GC后仍然存活，会在Eden和Survivor区频繁复制，占用内存，可用空间减少，导致频繁Minor GC</font></p><p><strong>老年代空间分配担保机制</strong></p><p>年轻代每次<strong>minor gc</strong>之前JVM都会计算下老年代<strong>剩余可用空间</strong></p><p>如果这个可用空间小于年轻代里现有的所有对象大小之和(<strong>包括垃圾对象</strong>)</p><p>就会看一个<code>-XX:-HandlePromotionFailure</code>(jdk1.8默认就设置了)的参数是否设置了</p><p>如果有这个参数，就会看看老年代的可用内存大小，是否大于之前每一次minor gc后进入老年代的对象的<strong>平均大小</strong>。</p><p>如果上一步结果是小于或者之前说的参数没有设置，那么就会触发一次Full gc，对老年代和年轻代一起回收一次垃圾，如果回收完还是没有足够空间存放新的对象就会发生”OOM”</p><p>当然，如果minor gc之后剩余存活的需要挪动到老年代的对象大小还是大于老年代可用空间，那么也会触发full gc，full gc完之后如果还是没有空间放minor gc之后的存活对象，则也会发生“OOM”</p><p><font color="red">担保的就是不发生Full Gc，历史平均放入老年代的对象大小&lt;老年代剩余空间，不进行Full Gc</font></p><p><strong>对象内存回收</strong></p><p>堆中几乎放着所有的对象实例，对堆垃圾回收前的第一步就是要<strong>判断哪些对象已经死亡</strong>（即不能再被任何途径使用的对象）。</p><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加1；当引用失效，计数器就减1；任何时候计数器为0的对象就是不可能再被使用的。</p><p><strong>这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题</strong></p><p><font color="red">Redis的底层数据结构使用C语言实现的，垃圾收集用的是引用计数法</font></p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>将<strong>“GC Roots”</strong> 对象作为起点，从这些节点开始向下搜索引用的对象，找到的对象都标记为<strong>非垃圾对象</strong>，其余未标记的对象都是垃圾对象</p><p><strong>GC Roots</strong>根节点：<font color="red">线程栈的本地变量</font>、静态变量、本地方法栈的变量等等</p><p><img src="/images/jvm/ma-1.png" alt="ma-1"></p><h4 id="常见引用类型"><a href="#常见引用类型" class="headerlink" title="常见引用类型"></a>常见引用类型</h4><p>java的引用类型一般分为四种：<strong>强引用</strong>、<strong>软引用</strong>、弱引用、虚引用</p><p><strong>强引用</strong>：普通的变量引用</p><blockquote><p>public static User user = new User(); </p></blockquote><p><strong>软引用</strong>：将对象用SoftReference软引用类型的对象包裹，正常情况不会被回收，但是GC做完后发现释放不出空间存放新的对象，则会把这些软引用的对象回收掉。<strong>软引用可用来实现内存敏感的高速缓存。</strong></p><blockquote><p>public static SoftReference<user> user = new SoftReference<user>(new User());</user></user></p></blockquote><p>软引用在实际中有重要的应用，例如浏览器的后退按钮。按后退时，这个后退时显示的网页内容是重新进行请求还是从缓存中取出呢？这就要看具体的实现策略了。</p><p>（1）如果一个网页在浏览结束时就进行内容的回收，则按后退查看前面浏览过的页面时，需要重新构建</p><p>（2）如果将浏览过的网页存储到内存中会造成内存的大量浪费，甚至会造成内存溢出</p><p><strong>弱引用</strong>：将对象用WeakReference软引用类型的对象包裹，弱引用跟没引用差不多，<strong>GC会直接回收掉</strong>，很少用</p><blockquote><p>public static WeakReference<user> user = new WeakReference<user>(new User());    </user></user></p></blockquote><p><strong>虚引用：</strong>虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系，几乎不用</p><h4 id="finalize-方法最终判定对象是否存活"><a href="#finalize-方法最终判定对象是否存活" class="headerlink" title="finalize()方法最终判定对象是否存活"></a>finalize()方法最终判定对象是否存活</h4><p>即使在可达性分析算法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历再次标记过程。</p><p><strong>标记的前提是对象在进行可达性分析后发现没有与GC Roots相连接的引用链。</strong></p><p><strong>1. 第一次标记并进行一次筛选。</strong></p><p>筛选的条件是此对象是否有必要执行finalize()方法。</p><p>当对象没有覆盖finalize方法，对象将直接被回收。</p><p><strong>2. 第二次标记</strong></p><p>如果这个对象覆盖了finalize方法，finalize方法是对象脱逃死亡命运的最后一次机会，如果对象要在finalize()中成功拯救自己，只要重新与引用链上的任何的一个对象建立关联即可，譬如把自己赋值给某个类变量或对象的成员变量，那在第二次标记时它将移除出“即将回收”的集合。如果对象这时候还没逃脱，那基本上它就真的被回收了。</p><p>注意：一个对象的finalize()方法只会被执行一次，也就是说通过调用finalize方法自我救命的机会就一次。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">,</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>j<span class="token operator">--</span><span class="token punctuation">,</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//User类需要重写finalize方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    OOMTest<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭资源，userid="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"即将被回收"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>finalize()方法的运行代价高昂， 不确定性大， 无法保证各个对象的调用顺序， 如今已被官方明确声明为不推荐使用的语法。 有些资料描述它适合做“关闭外部资源”之类的清理性工作， 这完全是对finalize()方法用途的一种自我安慰。 finalize()能做的所有工作， 使用try-finally或者其他方式都可以做得更好、更及时， 所以建议大家完全可以忘掉Java语言里面的这个方法。</p><h4 id="如何判断一个类是无用的类"><a href="#如何判断一个类是无用的类" class="headerlink" title="如何判断一个类是无用的类"></a>如何判断一个类是无用的类</h4><p>方法区主要回收的是无用的类，那么如何判断一个类是无用的类呢？</p><p>类需要同时满足下面3个条件才能算是 <strong>“无用的类”</strong> ：</p><ul><li>该类所有的对象实例都已经被回收，也就是 Java 堆中不存在该类的任何实例。</li><li>加载该类的 ClassLoader 已经被回收。</li><li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-对象创建</title>
      <link href="/posts/jvm-family/4/"/>
      <url>/posts/jvm-family/4/</url>
      
        <content type="html"><![CDATA[<h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>Java中提供的几种创建对象的方式：</p><table><thead><tr><th>Header</th><th>解释</th></tr></thead><tbody><tr><td>使用new关键字</td><td>调用了构造函数</td></tr><tr><td>使用Class的newInstance方法</td><td>调用了构造函数</td></tr><tr><td>使用Constructor类的newInstance方法</td><td>调用了构造函数</td></tr><tr><td>使用clone方法</td><td>没有调用构造函数</td></tr><tr><td>使用反序列化</td><td>没有调用构造函数</td></tr></tbody></table><span id="more"></span><p>对象创建的主要流程：</p><p><img src="/images/jvm/oc-1.png" alt="oc-1"></p><p>虚拟机遇到一条new指令时，先检查常量池是否已经加载相应的类，如果没有，必须先执行相应的类加载。类加载通过后，接下来分配内存。若Java堆中内存是绝对规整的，使用”指针碰撞”方式分配i内存；如果不是规整的，就从空闲列表中分配，叫做”空闲列表”方式。划分内存时还需要考虑一个问题-并发，也有两种方式：CAS同步处理，或者本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）。然后内存空间初始化操作，接着做一些必要的对象设置（元信息、哈希码…），最后执行方法。</p><p><strong>1.类加载检查</strong></p><p>虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的<font color="red">类是否已被加载、解析和初始化过</font>。如果没有，那必须先执行相应的类加载过程。</p><p><strong>2.分配内存</strong></p><p>在类加载检查通过后，虚拟机将<font color="red">为新生对象分配内存</font>。对象所需内存的大小在类加载完成后便可完全确定。</p><p>这个步骤有两个问题：</p><p><strong>划分内存的方法：</strong></p><ul><li>“指针碰撞”（Bump the Pointer）(默认)</li></ul><p>如果Java堆中<font color="red">内存是绝对规整</font>的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离。</p><ul><li>“空闲列表”（Free List）</li></ul><p>如果Java堆中的<font color="red">内存并不是规整</font>的，已使用的内存和空闲的内存相互交错，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例， 并更新列表上的记录</p><p><strong>解决并发问题的方法：</strong></p><ul><li>CAS（compare and swap）</li></ul><p>虚拟机采用<font color="red">CAS配上失败重试</font>的方式保证更新操作的<strong>原子性</strong>来对分配内存空间的动作进行同步处理。</p><ul><li>本地线程分配缓冲（Thread Local Allocation Buffer,TLAB）</li></ul><p>把内存分配的动作按照线程划分在不同的空间之中进行，即<font color="red">每个线程在Java堆中预先分配一小块内存</font>。通过<code>-XX:+/-UseTLAB</code>参数来设定虚拟机是否使用TLAB(JVM会默认开启<code>-XX:+UseTLAB</code>)，<code>-XX:TLABSize</code> 指定TLAB大小。</p><p><strong>3.初始化零值</strong></p><p>内存分配完成后，虚拟机需要将<font color="red">分配到的内存空间都初始化为零值</font>（不包括对象头）， 如果使用TLAB，这一工作过程也可以提前至TLAB分配时进行。这一步操作保证了对象的实例字段在Java代码中可以<strong>不赋初始值就直接使用</strong>，程序能访问到这些字段的数据类型所对应的零值。</p><p><strong>4.设置对象头</strong></p><p>初始化零值之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对象头Object Header之中。</p><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：<strong>对象头（Header）、 实例数据（Instance Data）和对齐填充（Padding）</strong>。 HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据， 如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p><strong>32位对象头</strong></p><p><img src="/images/jvm/oh32.png" alt="oh32"></p><p><strong>64位对象头</strong></p><p><img src="/images/jvm/oh64.png" alt="oh64"></p><p><strong>5.执行方法</strong></p><p> 执行<code>&lt;init&gt;</code>方法，即对象按照程序员的意愿进行初始化。对应到语言层面上讲，就是为<strong>属性赋值</strong>（注意，这与上面的赋零值不同，这是由程序员赋的值），和执行构造方法。</p><p>什么是java对象的<strong>指针压缩</strong>？</p><p>1.jdk1.6 update14开始，在64bit操作系统中，JVM支持指针压缩</p><p>2.jvm配置参数:UseCompressedOops，compressed–压缩、oop(ordinary object pointer)–对象指针</p><p>3.启用指针压缩:-XX:+UseCompressedOops(<strong>默认开启</strong>)，禁止指针压缩:-XX:-UseCompressedOops</p><p>为什么要进行指针压缩？</p><p>1.在64位平台的HotSpot中使用32位指针(实际存储用64位)，内存使用会多出1.5倍左右，使用较大指针在主内存和缓存之间移动数据，<strong>占用较大宽带，同时GC也会承受较大压力</strong></p><p>2.为了减少64位平台下内存的消耗，启用指针压缩功能</p><p>3.在jvm中，32位地址最大支持4G内存(2的32次方)，可以通过对对象指针存入<strong>堆内存</strong>时压缩编码、取出到<strong>cpu寄存器</strong>后解码的方式进行优化(对象指针在堆中是32位，在寄存器中是35位，2的35次方=32G)，使得jvm只用32位地址就可以支持更大的内存配置(小于等于32G)</p><p>4.堆内存小于4G时，不需要启用指针压缩，jvm会直接去除高32位地址，即使用低虚拟地址空间</p><p>5.堆内存大于32G时，压缩指针会失效，会强制使用64位(即8字节)来对java对象寻址，这就会出现1的问题，所以堆内存不要大于32G为好</p><p><font color="red">节约内存，减少带宽压力，注意堆内存小于4G或者大于32G指针压缩失效</font></p><p><strong>对齐填充：</strong>对于大部分处理器，对象以8字节整数倍来对齐填充都是最高效的存取方式。</p><p><strong>对象内存分配流程图</strong></p><p><img src="/images/jvm/oma.png" alt="oma"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-内存模型</title>
      <link href="/posts/jvm-family/3/"/>
      <url>/posts/jvm-family/3/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h2><p><img src="/images/jvm/jmm.png" alt="jmm"></p><span id="more"></span><p>Spring Boot程序的JVM参数设置格式(Tomcat启动直接加在bin目录下catalina.sh文件里)：</p><blockquote><p>java -Xms2048M -Xmx2048M -Xmn1024M -Xss512K -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M -jar microservice-eureka-server.jar              </p></blockquote><p>-Xss：每个线程的栈大小</p><p>-Xms：设置堆的初始可用大小，默认物理内存的1/64 </p><p>-Xmx：设置堆的最大可用大小，默认物理内存的1/4</p><p>-Xmn：新生代大小</p><p>-XX:NewRatio：默认2表示新生代占年老代的1/2，占整个堆内存的1/3。</p><p>-XX:SurvivorRatio：默认8表示一个survivor区占用1/8的Eden内存，即1/10的新生代内存。</p><p>关于元空间的JVM参数有两个：-XX:MetaspaceSize=N和 -XX:MaxMetaspaceSize=N</p><p><strong>-XX：MaxMetaspaceSize</strong>： 设置元空间最大值， 默认是-1， 即不限制， 或者说只受限于本地内存大小。</p><p><strong>-XX：MetaspaceSize</strong>： 指定元空间触发Fullgc的初始阈值(元空间无固定初始大小)， 以字节为单位，默认是21M左右，达到该值就会触发full gc进行类型卸载， 同时收集器会对该值进行调整： 如果释放了大量的空间， 就适当降低该值； 如果释放了很少的空间， 那么在不超过-XX：MaxMetaspaceSize（如果设置了的话） 的情况下， 适当提高该值。这个跟早期jdk版本的**-XX:PermSize**参数意思不一样，-<strong>XX:PermSize</strong>代表永久代的初始容量。</p><p>由于调整元空间的大小需要Full GC，这是非常昂贵的操作，如果应用在启动的时候发生大量Full GC，通常都是由于永久代或元空间发生了大小调整，基于这种情况，一般建议在JVM参数中将MetaspaceSize和MaxMetaspaceSize设置成一样的值，并设置得比初始值要大，对于8G物理内存的机器来说，一般我会将这两个值都设置为256M。</p><p><strong>补充一个问题：</strong></p><p><strong>在minor gc过程中对象挪动后，引用如何修改？</strong></p><p>对象在堆内部挪动的过程其实是复制，原有区域对象还在，一般不直接清理，JVM内部清理过程只是将对象分配指针移动到区域的头位置即可，比如扫描s0区域，扫到gcroot引用的非垃圾对象是将这些对象<strong>复制</strong>到s1或老年代，最后扫描完了将s0区域的对象分配指针移动到区域的起始位置即可，s0区域之前对象并不直接清理，当有新对象分配了，原有区域里的对象也就被清除了。</p><p>minor gc在根扫描过程中会记录所有被扫描到的对象引用(在年轻代这些引用很少，因为大部分都是垃圾对象不会扫描到)，如果引用的对象被复制到新地址了，最后会一并更新引用指向新地址。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-自定义类加载器</title>
      <link href="/posts/jvm-family/2/"/>
      <url>/posts/jvm-family/2/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><p>自定义类加载器只需要继承 java.lang.ClassLoader 类，该类有两个核心方法，一个是loadClass(String, boolean)，实现了<strong>双亲委派机制</strong>，还有一个方法是findClass，默认实现是空方法，所以我们自定义类加载器主要是<strong>重写findClass方法</strong>。</p><p><font color="red">1、继承 java.lang.ClassLoader 类，2、重写findClass方法</font></p><span id="more"></span><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoaderTest</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> String classPath<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>String classPath<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>classPath <span class="token operator">=</span> classPath<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadByte</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>            <span class="token keyword">throws</span> Exception        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>classPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> data<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ClassNotFoundException        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">loadByte</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// defineClass将一个字节数组转为Class对象，这个字节数组是class文件读取后最终的字节数组。</span>                <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> Exception    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化自定义类加载器，会先初始化父类ClassLoader，其中会把自定义类加载器的父加载器设置为应用程序类加载器AppClassLoader</span>        MyClassLoader classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token string">"E:/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// E盘创建 test/com/gax/jvm 几级目录，将User类的复制类User1.class丢入该目录</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.gax.jvm.User1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sout"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>沙箱安全机制验证，自定义java.lang.String类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoaderTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> String classPath<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>String classPath<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>classPath <span class="token operator">=</span> classPath<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadByte</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>classPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> name                    <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> data<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">loadByte</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 重写类加载方法，实现自己的加载逻辑，不委派给双亲加载         * @param name         * @param resolve         * @return         * @throws ClassNotFoundException         */</span>        <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>                <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>                    <span class="token comment" spellcheck="true">// to find the class.</span>                    <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> c<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyClassLoader classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token string">"E:/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//尝试用自己改写类加载机制去加载自己写的java.lang.String.class</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method<span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sout"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>运行结果：java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>SecurityException<span class="token operator">:</span> Prohibited <span class="token keyword">package</span> name<span class="token operator">:</span> java<span class="token punctuation">.</span>langat java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader<span class="token punctuation">.</span><span class="token function">preDefineClass</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">662</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">761</span><span class="token punctuation">)</span>at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassLoader<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span>ClassLoader<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">642</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>MyClassLoaderTest$MyClassLoader<span class="token punctuation">.</span><span class="token function">findClass</span><span class="token punctuation">(</span>MyClassLoaderTest<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>MyClassLoaderTest$MyClassLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>MyClassLoaderTest<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">56</span><span class="token punctuation">)</span>at com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>MyClassLoaderTest<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>MyClassLoaderTest<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">73</span><span class="token punctuation">)</span></code></pre><p><strong>Tomcat打破双亲委派机制</strong></p><p>Tomcat是个web容器， 解决的问题： </p><p>1、不同的应用程序可能会<strong>依赖同一个第三方类库的不同版本</strong></p><p>2、部署在同一个web容器中<strong>相同的类库相同的版本可以共享</strong></p><p>3、<strong>web容器也有自己依赖的类库，不能与应用程序的类库混淆</strong></p><p>4、web容器需要支持 jsp 修改后不用重启，热部署。jsp对应唯一的类加载器</p><p><strong>Tomcat自定义加载器详解</strong></p><p><img src="/images/jvm/cuscl-1.png" alt="cuscl-1"></p><p>tomcat的几个主要类加载器：</p><ul><li>commonLoader：Tomcat<strong>最基本的</strong>类加载器，加载路径中的class可以被Tomcat容器本身以及各个Webapp访问；</li><li>catalinaLoader：Tomcat<strong>容器私有的</strong>类加载器，加载路径中的class对于Webapp不可见；</li><li>sharedLoader：各个<strong>Webapp共享</strong>的类加载器，加载路径中的class对于所有Webapp可见，但是对于Tomcat容器不可见；</li><li>WebappClassLoader：各个<strong>Webapp私有的类加载器</strong>，加载路径中的class只对当前Webapp可见，<strong>每个webappClassLoader加载自己的目录下的class文件，不会传递给父类加载器，打破了双亲委派机制</strong>。</li></ul><p><strong>模拟实现Tomcat的webappClassLoader加载自己war包应用内不同版本类实现相互共存与隔离</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoaderTest3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> String classPath<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>String classPath<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>classPath <span class="token operator">=</span> classPath<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">loadByte</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>classPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> name                    <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> data<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token function">loadByte</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 重写类加载方法，实现自己的加载逻辑，不委派给双亲加载         * @param name         * @param resolve         * @return         * @throws ClassNotFoundException         */</span>        <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>                <span class="token keyword">throws</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>                    <span class="token comment" spellcheck="true">// to find the class.</span>                    <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//非自定义的类还是走双亲委派加载</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"com.gax.jvm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        c <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> c<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyClassLoader classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token string">"E:/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.gax.jvm.User1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method<span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sout"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyClassLoader classLoader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClassLoader</span><span class="token punctuation">(</span><span class="token string">"E:/test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz1</span> <span class="token operator">=</span> classLoader1<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.gax.jvm.User1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj1 <span class="token operator">=</span> clazz1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method method1<span class="token operator">=</span> clazz1<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"sout"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>运行结果：自定义类加载器执行com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>MyClassLoaderTest3$MyClassLoader<span class="token annotation punctuation">@677327b6</span><span class="token number">222</span> my <span class="token keyword">class</span> <span class="token class-name">loader</span>com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>MyClassLoaderTest3$MyClassLoader<span class="token annotation punctuation">@6d6f6e28</span></code></pre><p><strong>注意：</strong>同一个JVM内，两个相同包名和类名的类对象可以共存，因为他们的类加载器可以不一 样。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User1</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"自定义类加载器执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>补充一个java 和javac 版本不一致的问题：</p><p><img src="/images/jvm/cuscl-2.png" alt="cuscl-2"></p><p>原因是环境变量版本和最新安装的jdk版本不一致，修改环境变量版本可解决问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-类加载机制</title>
      <link href="/posts/jvm-family/1/"/>
      <url>/posts/jvm-family/1/</url>
      
        <content type="html"><![CDATA[<h2 id="类加载运行全过程"><a href="#类加载运行全过程" class="headerlink" title="类加载运行全过程"></a>类加载运行全过程</h2><p>用java命令运行某个类的main函数启动程序时，首先需要通过<strong>类加载器</strong>把主类加载到JVM</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>gax<span class="token punctuation">.</span>jvm<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Math</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> initData <span class="token operator">=</span> <span class="token number">666</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Math math <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Math</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><span id="more"></span><p><strong>通过Java命令执行代码的大体流程如下：</strong></p><p><img src="/images/jvm/cl-1.png" alt="cl-1"></p><p>步骤简单总结如下：</p><p>① java命令执行main方法</p><p>C++阶段</p><p>② 创建虚拟机，c++实现的</p><p>③ 创建引导类加载器，c++实现</p><p>Java阶段</p><p>④ 引导类加载器调用sun.misc.Launcher启动类，<strong>Launcher负责创建其他类加载器</strong></p><p>⑤ 获取Launcher的类加载器，就是<strong>AppClassLoader</strong></p><p>⑥ 用第5步的类加载器，加载应用程序类</p><p>⑦ c++发起调用，调用java代码的main方法</p><p>查看源码可以证明Launcher的类加载器就是AppClassLoader：</p><p><img src="/images/jvm/cl-2.png" alt="cl-2"></p><p>其中loadClass的类加载过程有如下几步：</p><p><strong>加载 &gt;&gt; 验证 &gt;&gt; 准备 &gt;&gt; 解析 &gt;&gt; 初始化 &gt;&gt;</strong> 使用 &gt;&gt; 卸载</p><ul><li>加载：在硬盘上查找并通过IO读入字节码文件，使用到类时才会加载，例如调用类的main()方法，new对象等等，在加载阶段会在内存中生成一个<strong>代表这个类的java.lang.Class对象</strong>，作为方法区这个类的各种数据的访问入口，<font color="red">找到磁盘中的.class 文件加载到内存</font></li><li>验证：校验字节码文件的正确性，<font color="red">字节码文件是否附合 JVM 语义规范、Java 语义规范</font></li><li>准备：给类的静态变量分配内存，并赋予默认值，<font color="red">JVM 规定的，和真正的值没有任何关系</font></li><li>解析：将<strong>符号引用</strong>替换为直接引用，该阶段会把一些静态方法(符号引用，比如main()方法)替换为指向数据所存内存的指针或句柄等(直接引用)，这是所谓的<strong>静态链接</strong>过程(类加载期间完成)，<strong>动态链接</strong>是在程序运行期间完成的将符号引用替换为直接引用，下节课会讲到动态链接，<font color="red">静态链接：编译阶段可以确定的，把符号转换成对应内存中的地址，符号指的是方法名、小括号等，是java定义的名词；动态链接运行时转换相对复杂</font></li><li><strong>初始化</strong>：静态变量初始化为指定的值，执行静态代码块，<font color="red">真正的值，定义的等号后面的值</font></li></ul><p>类被加载到方法区中后主要包含 <strong>运行时常量池、类型信息、字段信息、方法信息、类加载器的引用、对应class实例的引用</strong>等信息。</p><p><strong>类加载器的引用</strong>：这个类到类加载器实例的引用</p><p><strong>对应class实例的引用</strong>：类加载器在加载类信息放到方法区中后，会创建一个对应的Class 类型的对象实例放到堆(Heap)中, 作为开发人员访问方法区中类定义的入口和切入点。</p><p><strong>注意，</strong>主类在运行过程中如果使用到其它类，会逐步加载这些类。jar包或war包里的类不是一次性全部加载的，是使用到时才加载。<font color="red">懒加载，用时加载</font></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDynamicLoad</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************load TestDynamicLoad************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************load test************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        B b <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//B不会加载，除非这里执行 new B()</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************load A************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************initial A************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************load B************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************initial B************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>运行结果：<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>load TestDynamicLoad<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>load A<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>initial A<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>load test<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span></code></pre><p><strong>类加载器分类</strong></p><ul><li>引导类加载器：负责加载支撑JVM运行的位于<strong>JRE的lib目录</strong>下的核心类库，比如rt.jar、charsets.jar等</li><li>扩展类加载器：负责加载支撑JVM运行的位于<strong>JRE的lib目录下的ext扩展目录</strong>中的JAR类包</li><li>应用程序类加载器：负责加载ClassPath路径下的类包，主要就是加载你<strong>自己写的那些类</strong></li><li>自定义加载器：负责加载用户<strong>自定义路径</strong>下的类包</li></ul><p><strong>类加载</strong>示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJDKClassLoader</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>DESKeyFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>TestJDKClassLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader appClassLoader <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader extClassloader <span class="token operator">=</span> appClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader bootstrapLoader <span class="token operator">=</span> extClassloader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the bootstrapLoader : "</span> <span class="token operator">+</span> bootstrapLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the extClassloader : "</span> <span class="token operator">+</span> extClassloader<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the appClassLoader : "</span> <span class="token operator">+</span> appClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bootstrapLoader加载以下文件："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                URL<span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> Launcher<span class="token punctuation">.</span><span class="token function">getBootstrapClassPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getURLs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> urls<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>urls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"extClassloader加载以下文件："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.ext.dirs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"appClassLoader加载以下文件："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.class.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>运行结果：nullsun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher$ExtClassLoadersun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher$AppClassLoaderthe bootstrapLoader <span class="token operator">:</span> nullthe extClassloader <span class="token operator">:</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher$ExtClassLoader<span class="token annotation punctuation">@29453f44</span>the appClassLoader <span class="token operator">:</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Launcher$AppClassLoader<span class="token annotation punctuation">@18b4aac2</span>bootstrapLoader加载以下文件：file<span class="token operator">:</span><span class="token operator">/</span>C<span class="token operator">:</span><span class="token operator">/</span>Program<span class="token operator">%</span>20Files<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>resources<span class="token punctuation">.</span>jarfile<span class="token operator">:</span><span class="token operator">/</span>C<span class="token operator">:</span><span class="token operator">/</span>Program<span class="token operator">%</span>20Files<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>rt<span class="token punctuation">.</span>jarfile<span class="token operator">:</span><span class="token operator">/</span>C<span class="token operator">:</span><span class="token operator">/</span>Program<span class="token operator">%</span>20Files<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>sunrsasign<span class="token punctuation">.</span>jarfile<span class="token operator">:</span><span class="token operator">/</span>C<span class="token operator">:</span><span class="token operator">/</span>Program<span class="token operator">%</span>20Files<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>jsse<span class="token punctuation">.</span>jarfile<span class="token operator">:</span><span class="token operator">/</span>C<span class="token operator">:</span><span class="token operator">/</span>Program<span class="token operator">%</span>20Files<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>jce<span class="token punctuation">.</span>jarfile<span class="token operator">:</span><span class="token operator">/</span>C<span class="token operator">:</span><span class="token operator">/</span>Program<span class="token operator">%</span>20Files<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>charsets<span class="token punctuation">.</span>jarfile<span class="token operator">:</span><span class="token operator">/</span>C<span class="token operator">:</span><span class="token operator">/</span>Program<span class="token operator">%</span>20Files<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>jfr<span class="token punctuation">.</span>jarfile<span class="token operator">:</span><span class="token operator">/</span>C<span class="token operator">:</span><span class="token operator">/</span>Program<span class="token operator">%</span>20Files<span class="token operator">/</span>Java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121<span class="token operator">/</span>jre<span class="token operator">/</span>classesextClassloader加载以下文件：C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext<span class="token punctuation">;</span>C<span class="token operator">:</span>\Windows\Sun\Java\lib\extappClassLoader加载以下文件：C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\charsets<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\deploy<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\access<span class="token operator">-</span>bridge<span class="token operator">-</span><span class="token number">64</span><span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\cldrdata<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\dnsns<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\jaccess<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\jfxrt<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\localedata<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\nashorn<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\sunec<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\sunjce_provider<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\sunmscapi<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\sunpkcs11<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\ext\zipfs<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\javaws<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\jce<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\jfr<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\jfxswt<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\jsse<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\management<span class="token operator">-</span>agent<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\plugin<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\resources<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>C<span class="token operator">:</span>\Program Files\Java\jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_121\jre\lib\rt<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>D<span class="token operator">:</span>\MyProject\jvm<span class="token operator">-</span>seek\out\production\jvm<span class="token operator">-</span>seek<span class="token punctuation">;</span>D<span class="token operator">:</span>\JetBrains\IntelliJ IDEA <span class="token number">2021.2</span><span class="token punctuation">.</span><span class="token number">2</span>\lib\idea_rt<span class="token punctuation">.</span>jar</code></pre><p><strong>类加载器初始化过程：</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//jdk1.8源码的构造方法</span><span class="token keyword">public</span> <span class="token function">Launcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Launcher<span class="token punctuation">.</span>ExtClassLoader var1<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造扩展类加载器，在构造的过程中将其父加载器设置为null</span>        var1 <span class="token operator">=</span> Launcher<span class="token punctuation">.</span>ExtClassLoader<span class="token punctuation">.</span><span class="token function">getExtClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var10<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token string">"Could not create extension class loader"</span><span class="token punctuation">,</span> var10<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造应用类加载器，在构造的过程中将其父加载器设置为ExtClassLoader，</span>        <span class="token comment" spellcheck="true">//Launcher的loader属性值是AppClassLoader，一般都是用这个类加载器来加载写的应用程序</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loader <span class="token operator">=</span> Launcher<span class="token punctuation">.</span>AppClassLoader<span class="token punctuation">.</span><span class="token function">getAppClassLoader</span><span class="token punctuation">(</span>var1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var9<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token string">"Could not create application class loader"</span><span class="token punctuation">,</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContextClassLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>    String var2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.security.manager"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>var2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SecurityManager var3 <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token string">"default"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                var3 <span class="token operator">=</span> <span class="token punctuation">(</span>SecurityManager<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> var5<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> var6<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> var7<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> var8<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            var3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var3 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span><span class="token string">"Could not create SecurityManager: "</span> <span class="token operator">+</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>双亲委派机制</strong></p><p>加载某个类时会先委托父加载器寻找目标类，找不到再委托上层父加载器加载，如果所有父加载器在自己的加载类路径下都找不到目标类，则在自己的类加载路径中查找并载入目标类</p><p><font color="red">先找父加载器加载，加载不到再由子加载器加载</font></p><p>ClassLoader的loadClass方法查看源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ClassLoader的loadClass方法，实现了双亲委派机制</span><span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ClassNotFoundException<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检查当前类加载器是否已经加载了该类</span>        <span class="token comment" spellcheck="true">// First, check if the class has already been loaded</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> t0 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前加载器父加载器不为空则委托父加载器加载该类</span>                    c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果当前加载器父加载器为空则委托引导类加载器加载该类</span>                    c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// ClassNotFoundException thrown if class not found</span>                <span class="token comment" spellcheck="true">// from the non-null parent class loader</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// If still not found, then invoke findClass in order</span>                <span class="token comment" spellcheck="true">// to find the class.</span>                <span class="token keyword">long</span> t1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用URLClassLoader的findClass方法在加载器的类路径里查找并加载该类</span>                c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// this is the defining class loader; record the stats</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>                sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>PerfCounter<span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不会执行</span>            <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>为什么要设计双亲委派机制？</strong></p><ul><li>沙箱安全机制：防止核心API库被随意篡改，自定义的Object、String等类不会被加载</li><li>避免类的重复加载：保证<strong>被加载类的唯一性</strong>，父加载器加载过的类没必要子加载器重复加载</li></ul><p><strong>全盘负责委托机制</strong></p><p>“全盘负责”是指当一个ClassLoder装载一个类时，除非显式的使用另外一个ClassLoder，该类所依赖及引用的类也由这个ClassLoder载入。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-日志机制二</title>
      <link href="/posts/mysql-family/12/"/>
      <url>/posts/mysql-family/12/</url>
      
        <content type="html"><![CDATA[<h2 id="CPU、内存和磁盘的简单模型"><a href="#CPU、内存和磁盘的简单模型" class="headerlink" title="CPU、内存和磁盘的简单模型"></a>CPU、内存和磁盘的简单模型</h2><p><img src="/images/mysql/log2-1.png" alt="log2-1"></p><span id="more"></span><p><strong>redo log重做日志关键参数</strong></p><p><strong>innodb_log_buffer_size</strong>：设置<font color="red">redo log buffer大小</font>参数，默认16M ，最大值是4096M，最小值为1M。</p><p><strong>innodb_log_group_home_dir</strong>：设置<font color="red">redo log文件存储位置</font>参数，默认值为”./“，即innodb数据文件存储位置，其中的 ib_logfile0 和 ib_logfile1 即为redo log文件。</p><p><strong>innodb_log_files_in_group</strong>：设置<font color="red">redo log文件的个数</font>，命名方式如: ib_logfile0, iblogfile1… iblogfileN。默认2个，最大100个。</p><p><strong>innodb_log_file_size</strong>：设置<font color="red">单个redo log文件大小</font>，默认值为48M。最大值为512G，注意最大值指的是整个 redo log系列文件之和，即(innodb_log_files_in_group * innodb_log_file_size)不能大于最大值512G。</p><p><strong>innodb_flush_log_at_trx_commit</strong>：这个参数控制 <font color="red">redo log 的写入策略</font>，它有三种可能取值：</p><p>设置0：只保存在redo log buffer中，数据库宕机丢失数据</p><p>设置1：保存到OS缓存pageCache中，写磁盘日志文件，<font color="red">默认设置，线上系统推荐</font></p><p>设置2：保存到OS缓存pageCache中，不用写磁盘日志文件</p><p><font color="red">0效率最高，1效率最低安全最高，2兼顾</font></p><p>redo log写入策略：</p><p><img src="/images/mysql/log2-2.png" alt="log2-2"></p><blockquote><p>– 查看innodb_flush_log_at_trx_commit参数值：<br>show variables like ‘innodb_flush_log_at_trx_commit’;<br>– 设置innodb_flush_log_at_trx_commit参数值(也可以在my.ini或my.cnf文件里配置)：<br>set global innodb_flush_log_at_trx_commit=1;</p></blockquote><p><font color="red">生产环境一般设置1；也分业务场景，生产上不同的业务有不同的库。有些场景比如说想要更高的并发，丢失数据不敏感，宕机丢点数据无所谓，像记录数据日志业务日志可设置0，核心数据库不能丢数据要设置1；2的性能也比较高，写到内存里</font></p><p><strong>binlog二进制归档日志</strong></p><p>binlog二进制日志记录保存了所有执行过的<strong>修改操作语句</strong>，不保存查询操作。如果 MySQL 服务意外停止，可通过二进制日志文件排查，用户操作或表结构操作，从而来恢复数据库数据。</p><p><font color="red">记录修改操作，包括数据修改和表结构修改，MySQL宕机后用来恢复数据</font></p><p><font color="red">binlog通常都要开启，可以恢复数据和实现主从复制</font></p><p>MySQL5.7 版本中，binlog默认关闭，8.0版本默认打开。因为实际业务场景经常开启</p><p><img src="/images/mysql/log2-3.png" alt="log2-3"></p><p>参数说明：</p><pre><code>log_bin：binlog日志是否打开状态log_bin_basename：是binlog日志的基本文件名，binlog日志文件会滚动增加log_bin_index：指定的是binlog文件的索引文件，这个文件管理了所有的binlog文件的目录。sql_log_bin：sql语句是否写入binlog文件，ON代表需要写入，OFF代表不需要写入。如果想在主库上执行一些操作，但不复制到slave库上，可以通过修改参数sql_log_bin来实现。比如说，模拟主从同步复制异常。</code></pre><p>MySQL5.7 默认关闭binlog功能，打开需要修改配置文件my.ini(windows)或my.cnf(linux)，然后重启数据库。</p><p>在配置文件中增加如下配置:</p><pre><code># 设置binlog的存放位置，绝对路径/相对路径，# 相对路径binlog文件默认会放在data数据目录下，mysql-binlog就是生成的bin log日志文件的前缀log-bin=mysql-binlog# Server Id是数据库服务器id，在mysql集群环境中唯一，不唯一时启动会报错server-id=1# 其他配置binlog_format = row # 日志文件格式expire_logs_days = 15 # 执行自动删除距离当前15天以前的binlog日志文件的天数，默认为0表示不自动删除max_binlog_size = 200M # 单个binlog日志文件的大小限制，默认为1GB</code></pre><p>重启数据库后data数据目录多出两个文件，<code>mysql-binlog.000001</code>是binlog日志文件，<code>mysql-binlog.index</code>是binlog文件的索引文件，这个文件管理了所有的binlog文件的目录。</p><p><strong>binlog 的日志格式</strong></p><p>用参数 binlog_format 可以设置binlog日志的记录格式，mysql支持三种格式类型：</p><ul><li>STATEMENT：记录<strong>每一条修改数据的sql</strong>到master机器的bin-log中，优点：<strong>日志量小，节约IO开销，提高性能</strong>，缺点：执行过程中才能确定结果的函数，会导致主从同步的数据不一致。如UUID()、SYSDATE()等函数。</li><li>ROW：记录<strong>每一行被修改的数据</strong>，优点：<strong>可以解决函数、存储过程等在slave机器的复制问题</strong>，缺点：日志量较大，性能不如Statement。举个例子，假设update语句更新10行数据，Statement方式就记录这条update语句，Row方式会记录被修改的10行数据。</li><li>MIXED：<strong>混合模式复制</strong>，实际就是前两种模式的结合，在Mixed模式下，MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是在Statement和Row之间选择一种，如果sql里有函数或一些在执行时才知道结果的情况，会选择Row，其它情况选择Statement，<strong>推荐</strong>使用这一种。</li></ul><p><font color="red">STATEMENT记录更新的sql；ROW记录更新的每行数据；MIXED混合模式，推荐这一种</font></p><p><strong>binlog写入磁盘机制</strong></p><p>binlog写入磁盘机制主要通过 sync_binlog 参数控制，<font color="red">默认值是 0</font>。</p><ul><li>为0的时候，表示每次提交事务都只 write 到<strong>page cache</strong>，系统自行判断什么时候执行 fsync 写入磁盘。优点：性能得到提升，缺点：机器宕机，page cache里面的 binlog 会丢失。</li><li>也可以设置为1，表示<strong>每次提交事务都会执行 fsync</strong> 写入磁盘，这种方式<strong>最安全</strong>。</li><li>还有一种折中方式，可以设置为N(N&gt;1)，表示每次提交事务都write 到page cache，但<strong>累积N个事务后才 fsync</strong> 写入磁盘，这种如果机器宕机会丢失N个事务的binlog。</li></ul><p><font color="red">0：只写入pageCache最快，可能丢数据；1：每次写入磁盘。最慢不丢数据；N&gt;1：写pageCache，积累N个写磁盘，可能丢失N个数据</font></p><p>发生以下事件时, binlog日志文件重新生成：</p><ul><li>服务器启动或重新启动</li><li>服务器刷新日志，执行命令flush logs</li><li>日志文件大小达到 max_binlog_size 值，默认值为 1GB</li></ul><p><font color="red">每次执行flush logs都会生成一个新的日志文件<code>mysql-binlog.00000X</code>，日志信息会记录在最新的一个文件里面</font></p><p><strong>删除 binlog 日志文件</strong></p><pre><code># 删除当前的binlog文件reset master;# 删除指定日志文件之前的所有日志文件，下面这个是删除6之前的所有日志文件，当前这个文件不删除purge master logs to 'mysql-binlog.000006';# 删除指定日期前的日志索引中binlog日志文件，purge master logs before '2023-09-18 23:59:59';</code></pre><p><font color="red">reset master 是恢复日志的初始状态；第二种文件名不存在时报错；第三种全部删除时最少保留一个最新的日志文件</font></p><p><strong>查看 binlog 日志文件</strong></p><p>可以用mysql自带的命令工具 mysqlbinlog 查看binlog日志内容<font color="red">，注意是命令行执行</font></p><pre><code># 查看bin-log二进制文件（命令行方式，不用登录mysql）mysqlbinlog --no-defaults -v --base64-output=decode-rows D:\mysql-binlog.000001# 查看bin-log二进制文件（带查询条件）mysqlbinlog --no-defaults -v --base64-output=decode-rows D:\mysql-binlog.000001 start-datetime="2023-09-15 00:00:00" stop-datetime="2023-09-18 00:00:00" start-position="5000" stop-position="20000"</code></pre><p>执行命令：</p><blockquote><p>mysqlbinlog –no-defaults -v –base64-output=decode-rows D:\mysql-binlog.000008</p></blockquote><p>查出来的binlog日志文件内容如下：</p><pre><code>/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;DELIMITER /*!*/;# at 4#230918 23:18:28 server id 1  end_log_pos 123 CRC32 0x50235ab2  Start: binlog v 4, server v 5.7.43-log created 230918 23:18:28# Warning: this binlog is either in use or was not closed properly.# at 123#230918 23:18:28 server id 1  end_log_pos 154 CRC32 0xa4d1e6a3  Previous-GTIDs# [empty]# at 154#230918 23:20:41 server id 1  end_log_pos 219 CRC32 0x7d9ea5df  Anonymous_GTID  last_committed=0        sequence_number=1       rbr_only=yes/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;# at 219#230918 23:20:41 server id 1  end_log_pos 292 CRC32 0x5c885b0b  Query   thread_id=4     exec_time=0     error_code=0SET TIMESTAMP=1695050441/*!*/;SET @@session.pseudo_thread_id=4/*!*/;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;SET @@session.sql_mode=1436549152/*!*/;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;/*!\C utf8 *//*!*/;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;SET @@session.lc_time_names=0/*!*/;SET @@session.collation_database=DEFAULT/*!*/;BEGIN/*!*/;# at 292#230918 23:20:41 server id 1  end_log_pos 347 CRC32 0x2d811125  Table_map: `nacos`.`account` mapped to number 109# at 347#230918 23:20:41 server id 1  end_log_pos 411 CRC32 0x42a872ca  Update_rows: table id 109 flags: STMT_END_F### UPDATE `nacos`.`account`### WHERE###   @1=2###   @2='liu'###   @3=10000### SET###   @1=2###   @2='liu'###   @3=500# at 411#230918 23:20:41 server id 1  end_log_pos 442 CRC32 0x180fe5f8  Xid = 166COMMIT/*!*/;# at 442... ...SET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;DELIMITER ;# End of log file/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;</code></pre><p>能看到里面有具体执行的修改伪sql语句以及执行时的相关情况。</p><p><strong>binlog日志文件恢复数据</strong></p><p>用binlog日志文件恢复数据其实就是<strong>回放执行之前记录在binlog文件里的sql</strong>，举一个数据恢复的例子</p><pre><code># 先执行刷新日志的命令生成一个新的binlog文件mysql-binlog.000009flush logs;# 执行两条插入语句INSERT INTO `account` (`id`, `name`, `balance`) VALUES ('4', 'gc', '666');INSERT INTO `account` (`id`, `name`, `balance`) VALUES ('5', 'gc2', '888');# 假设现在误操作执行了一条删除语句把刚新增的两条数据删掉了delete from account where id &gt; 3;</code></pre><p>现在需要恢复被删除的两条数据，我们先查看binlog日志文件</p><blockquote><p>mysqlbinlog –no-defaults -v –base64-output=decode-rows D:\mysql-binlog.000009</p></blockquote><p>文件内容如下：</p><pre><code>/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;DELIMITER /*!*/;# at 4#230919  0:00:43 server id 1  end_log_pos 123 CRC32 0x3356853f  Start: binlog v 4, server v 5.7.43-log created 230919  0:00:43# Warning: this binlog is either in use or was not closed properly.# at 123#230919  0:00:43 server id 1  end_log_pos 154 CRC32 0x6a692065  Previous-GTIDs# [empty]# at 154#230919  0:01:29 server id 1  end_log_pos 219 CRC32 0x6c2fbdab  Anonymous_GTID  last_committed=0        sequence_number=1       rbr_only=yes/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;# at 219#230919  0:01:29 server id 1  end_log_pos 292 CRC32 0xacb5682a  Query   thread_id=4     exec_time=0     error_code=0SET TIMESTAMP=1695052889/*!*/;SET @@session.pseudo_thread_id=4/*!*/;SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;SET @@session.sql_mode=1436549152/*!*/;SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;/*!\C utf8 *//*!*/;SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=8/*!*/;SET @@session.lc_time_names=0/*!*/;SET @@session.collation_database=DEFAULT/*!*/;BEGIN/*!*/;# at 292#230919  0:01:29 server id 1  end_log_pos 347 CRC32 0xed132ff1  Table_map: `nacos`.`account` mapped to number 109# at 347#230919  0:01:29 server id 1  end_log_pos 395 CRC32 0xffe57581  Write_rows: table id 109 flags: STMT_END_F### INSERT INTO `nacos`.`account`### SET###   @1=4###   @2='gc'###   @3=666# at 395#230919  0:01:29 server id 1  end_log_pos 426 CRC32 0xed13739e  Xid = 240COMMIT/*!*/;# at 426#230919  0:01:29 server id 1  end_log_pos 491 CRC32 0x93b4637a  Anonymous_GTID  last_committed=1        sequence_number=2       rbr_only=yes/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;# at 491#230919  0:01:29 server id 1  end_log_pos 564 CRC32 0xc891862b  Query   thread_id=4     exec_time=0     error_code=0SET TIMESTAMP=1695052889/*!*/;BEGIN/*!*/;# at 564#230919  0:01:29 server id 1  end_log_pos 619 CRC32 0xb2d40367  Table_map: `nacos`.`account` mapped to number 109# at 619#230919  0:01:29 server id 1  end_log_pos 668 CRC32 0xe7a8cfe4  Write_rows: table id 109 flags: STMT_END_F### INSERT INTO `nacos`.`account`### SET###   @1=5###   @2='gc2'###   @3=888# at 668#230919  0:01:29 server id 1  end_log_pos 699 CRC32 0x67cec2d4  Xid = 241COMMIT/*!*/;# at 699#230919  0:01:32 server id 1  end_log_pos 764 CRC32 0x413df26d  Anonymous_GTID  last_committed=2        sequence_number=3       rbr_only=yes/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;# at 764#230919  0:01:32 server id 1  end_log_pos 837 CRC32 0xce150675  Query   thread_id=4     exec_time=0     error_code=0SET TIMESTAMP=1695052892/*!*/;BEGIN/*!*/;# at 837#230919  0:01:32 server id 1  end_log_pos 892 CRC32 0xc5e92b64  Table_map: `nacos`.`account` mapped to number 109# at 892#230919  0:01:32 server id 1  end_log_pos 995 CRC32 0x31814ff3  Delete_rows: table id 109 flags: STMT_END_F### DELETE FROM `nacos`.`account`### WHERE###   @1=4###   @2='gc'###   @3=666### DELETE FROM `nacos`.`account`### WHERE###   @1=5###   @2='gc2'###   @3=888### DELETE FROM `nacos`.`account`### WHERE###   @1=9###   @2='zhao'###   @3=888### DELETE FROM `nacos`.`account`### WHERE###   @1=15###   @2='ma'###   @3=3000### DELETE FROM `nacos`.`account`### WHERE###   @1=30###   @2='gc'###   @3=2000# at 995#230919  0:01:32 server id 1  end_log_pos 1026 CRC32 0x515a2230         Xid = 248COMMIT/*!*/;SET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;DELIMITER ;# End of log file/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;</code></pre><p>找到两条插入数据的sql，每条sql的上下都有<strong>BEGIN和COMMIT</strong>，我们找到第一条sql <strong>BEGIN前面的文件位置标识 at 219</strong>(这是文件的位置标识)，再找到第二条sql <strong>COMMIT后面的文件位置标识 at 699</strong></p><p>我们可以根据文件位置标识来恢复数据，执行如下sql：</p><pre><code>mysqlbinlog  --no-defaults --start-position=219 --stop-position=699 --database=nacos D:/mysql-binlog.000009 | mysql -uroot -p123666 -v nacos# 补充一个根据时间来恢复数据的命令，我们找到第一条sql BEGIN前面的时间戳标记 SET TIMESTAMP=1695052889，再找到第二条sql COMMIT后面的时间戳标记 SET TIMESTAMP=1695052892，转成datetime格式mysqlbinlog  --no-defaults --start-datetime="2023-09-19 00:01:29" --stop-datetime="2023-09-19 00:01:32" --database=nacos D:/mysql-binlog.000009 | mysql -uroot -p123666 -v nacos</code></pre><p><strong>注意</strong>：要恢复大量数据，如果数据库之前没有备份，所有的binlog日志都在的话，就从binlog第一个文件开始逐个恢复每个binlog文件里的数据，这种一般不太可能，因为binlog日志比较大，早期的binlog文件会定期删除的，所以一般不可能用binlog文件恢复整个数据库。</p><p>推荐每天(在凌晨后)做一次<strong>全量数据库备份</strong>，那么恢复数据库可以用<strong>最近的一次全量备份再加上备份时间点之后</strong>的binlog来恢复数据。</p><p>备份数据库一般可以用mysqldump 命令工具</p><pre><code># nacos数据库名，备份整个数据库mysqldump -u root -p nacos &gt; D:/test.txt# nacos数据库名，account表名，备份整个表mysqldump -u root -p nacos account &gt; D:/test2.txt# nacos数据库名，恢复上面备份的数据表mysql -u root -p nacos &lt; D:/test2.txt# test为新建的数据库名，恢复整个数据库mysql -u root -p test &lt; D:/test.txt</code></pre><p><strong>为什么会有redo log和binlog两份日志呢？</strong></p><p>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。</p><p><font color="red">redo log是InnoDB引擎特有的，binlog是MySQL的Server层面的。redo log可以恢复MySQL宕机导致buffer pool来不及刷入磁盘的数据</font></p><p><strong>undo log回滚日志</strong></p><p>InnoDB对undo log文件的管理采用段的方式，也就是回滚段（rollback segment） 。每个回滚段记录了 1024 个 undo log segment ，每个事务只会使用一个undo log segment。</p><p>在MySQL5.5的时候，只有一个回滚段，那么最大同时支持的事务数量为1024个。在MySQL 5.6开始，InnoDB支持最大128个回滚段，故其支持同时在线的事务限制提高到了 128*1024 。</p><pre><code>innodb_undo_directory：设置undo log文件所在的路径。该参数的默认值为"./"，即innodb数据文件存储位置，目录下ibdata1文件就是undo log存储的位置。innodb_undo_logs: 设置undo log文件内部回滚段的个数，默认值为128。innodb_undo_tablespaces: 设置undo log文件的数量，这样回滚段可以较为平均地分布在多个文件中。设置该参数后，会在路径innodb_undo_directory看到undo为前缀的文件。</code></pre><p><font color="red">上面配置不能写在my.ini 文件中，写在my.ini文件中启动MySQL失败</font></p><p><strong>undo log日志什么时候删除</strong></p><p>新增类型的，在事务提交之后就可以清除掉了。</p><p>修改类型的，事务提交之后不能立即清除掉，这些日志会用于mvcc。只有当没有事务用到该版本信息时才可以清除。</p><p><strong>为什么Mysql不能直接更新磁盘上的数据而设置这么一套复杂的机制来执行SQL了？</strong></p><p>因为来一个请求就直接对磁盘文件进行随机读写，然后更新磁盘文件里的数据性能可能相当差。</p><p>因为磁盘随机读写的性能是非常差的，所以直接更新磁盘文件是不能让数据库抗住很高并发的。</p><p>Mysql这套机制看起来复杂，但它可以保证每个更新请求都是<strong>更新内存BufferPool</strong>，然后<strong>顺序写日志文件</strong>，同时还能保证各种异常情况下的数据一致性。</p><p>更新内存的性能是极高的，然后顺序写磁盘上的日志文件的性能也是非常高的，要远高于随机读写磁盘文件。</p><p>正是通过这套机制，才能让我们的MySQL数据库在较高配置的机器上每秒可以抗下几干甚至上万的读写请求。</p><p><font color="red">早期没有固态硬盘，只有机械硬盘，而机械硬盘的读写要依赖于磁道、磁针的寻址，是一种随机读写，每一次都要随机读写的性能是很低的</font></p><p><strong>错误日志</strong></p><p>Mysql还有一个比较重要的日志是错误日志，它记录了数据库启动和停止，以及运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，建议首先查看此日志。</p><p>在MySQL数据库中，错误日志功能是<strong>默认开启</strong>的，而且<strong>无法被关闭</strong>。</p><blockquote><p>#查看错误日志存放位置 </p><p>show variables like ‘%log_error%’;              </p></blockquote><p><strong>通用查询日志</strong></p><p>通用查询日志记录用户的<strong>所有操作</strong>，包括启动和关闭MySQL服务、所有用户的连接开始时间和截止时间、发给 MySQL 数据库服务器的所有 SQL 指令等，如select、show等，无论SQL的语法正确还是错误、也无论SQL执行成功还是失败，MySQL都会将其记录下来。</p><p>通用查询日志用来还原操作时的具体场景，可以帮助我们准确定位一些疑难问题，比如重复支付等问题。</p><p>general_log：是否开启日志参数，默认为OFF，处于关闭状态，因为开启会消耗系统资源并且占用磁盘空间。一般不建议开启，只在需要调试查询问题时开启。</p><p>general_log_file：通用查询日志记录的位置参数。</p><blockquote><p>show variables like ‘%general_log%’; </p><p>#打开通用查询日志 </p><p>SET GLOBAL general_log=on;              </p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-日志机制</title>
      <link href="/posts/mysql-family/11/"/>
      <url>/posts/mysql-family/11/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL日志机制"><a href="#MySQL日志机制" class="headerlink" title="MySQL日志机制"></a>MySQL日志机制</h2><p><img src="/images/mysql/log-1.png" alt="log-1"></p><span id="more"></span><p>更新sql 例如<code>update 【tableName】 set 【columnName】 = 'xx' where id = 1</code> 流程分析：</p><p><strong>Server阶段</strong></p><p>连接器：客户端连接到MySQL时的用户名、密码验证，查询用户是否有权限更新</p><p>词法分析器：检查sql是否有拼写错误、语法错误</p><p>优化器：生成执行计划，索引选择，表连接顺序选择，sql语句的常量计算和书写顺序优化</p><p>（where a = 1+2 优化为：where a = 3; 另外联合索引由于查询顺序错误导致索引失效时，可以优化书写顺序）</p><p>执行器：根据建表时使用的执行引擎，调用执行引擎对应的接口</p><p><strong>InnoDB执行引擎阶段</strong></p><p>① 到Buffer Pool中查找是否存在id 为1的这条数据，没有就读取磁盘文件查到结果后加载进来，注意这里从磁盘中读取的是一个page页的数据，而不是单条数据。</p><p>② 写undo log日志，记录sql的反向操作，或者说是保存执行sql前的原始数据，事务提交失败时根据undo log日志恢复buffer pool中的缓存数据。MySQL通过undo log实现的原子性</p><p>③ 根据更新sql 去更新Buffer Pool中的数据，注意这里还没有把更新结果写进磁盘.ibd文件</p><p>④ 把redo log需要记录的信息写入Redo Log Buffer，为了提高写入性能设计的这个缓存（磁盘顺序写）</p><p>⑤ redo log缓存中的数据顺序写入到磁盘文件，准备提交事务</p><p>（redo日志重做系统是InnoDB执行引擎特有的，物理修改：在哪个page页更新了什么）</p><p>⑥ 写binlog日志，属于Server层的，逻辑修改。bin log用来恢复数据库磁盘里面的数据</p><p>⑦ 写commit标记到redo log日志文件里。事务提交成功后，保证了redo log和bin log数据的一致性</p><p>⑧ 后台IO线程，把Buffer Pool中的数据写入到磁盘文件的.ibd文件中</p><p>补充WAL机制（Write-Ahead Logging）：先写redo log后刷新数据表文件的机制</p><p><strong>redo log重做日志关键参数</strong></p><p><strong>innodb_log_buffer_size</strong>：设置<font color="red">redo log buffer大小</font>参数，默认16M ，最大值是4096M，最小值为1M。</p><blockquote><p>show variables like ‘%innodb_log_buffer_size%’; </p></blockquote><p><strong>innodb_log_group_home_dir</strong>：设置<font color="red">redo log文件存储位置</font>参数，默认值为”./“，即innodb数据文件存储位置，其中的 ib_logfile0 和 ib_logfile1 即为redo log文件。</p><blockquote><p>show variables like ‘%innodb_log_group_home_dir%’;</p></blockquote><p><strong>innodb_log_files_in_group</strong>：设置<font color="red">redo log文件的个数</font>，命名方式如: ib_logfile0, iblogfile1… iblogfileN。默认2个，最大100个。</p><blockquote><p>show variables like ‘%innodb_log_files_in_group%’;</p></blockquote><p><strong>innodb_log_file_size</strong>：设置<font color="red">单个redo log文件大小</font>，默认值为48M。最大值为512G，注意最大值指的是整个 redo log系列文件之和，即(innodb_log_files_in_group * innodb_log_file_size)不能大于最大值512G。</p><blockquote><p>show variables like ‘%innodb_log_file_size%’; </p></blockquote><p><strong>redo log 写入磁盘过程分析：</strong></p><p>redo log 从头开始写，写完一个文件继续写另一个文件，写到最后一个文件末尾就又回到第一个文件开头循环写，如下面这个图所示。</p><p><img src="/images/mysql/log-2.png" alt="log-2"></p><p><strong>write pos</strong> 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。</p><p><strong>checkpoint</strong> 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件里。</p><p>write pos 和 checkpoint 之间的部分就是空着的可写部分，可以用来记录新的操作。如果 write pos 追上checkpoint，表示redo log写满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><p><font color="red">环形存储结构写数据，类似双指针</font></p><p><strong>innodb_flush_log_at_trx_commit</strong>：这个参数控制 <font color="red">redo log 的写入策略</font>，它有三种可能取值：</p><ul><li>设置为0：表示每次事务提交时都只是把 redo log 留在 redo log buffer 中，数据库宕机可能会丢失数据。</li><li><font color="red">设置为1(默认值)</font>：表示<font color="red">每次事务提交时都将 redo log 直接持久化到磁盘</font>，数据最安全，不会因为数据库宕机丢失数据，但是效率稍微差一点，线上系统推荐这个设置。</li><li>设置为2：表示每次事务提交时都只是把 redo log 写到操作系统的缓存page cache里，这种情况如果数据库宕机是不会丢失数据的，但是操作系统如果宕机了，page cache里的数据还没来得及写入磁盘文件的话就会丢失数据。</li></ul><p>InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用操作系统函数 write 写到文件系统的 page cache，然后调用操作系统函数 fsync 持久化到磁盘文件。</p><blockquote><p>– 查看innodb_flush_log_at_trx_commit参数值：<br>show variables like ‘innodb_flush_log_at_trx_commit’;<br>– 设置innodb_flush_log_at_trx_commit参数值(也可以在my.ini或my.cnf文件里配置)：<br>set global innodb_flush_log_at_trx_commit=1;</p></blockquote><p><strong>binlog二进制归档日志</strong></p><p>binlog二进制日志记录保存了<strong>所有执行过的修改操作语句</strong>，不保存查询操作。如果 MySQL 服务意外停止，可通过二进制日志文件排查用户操作或表结构操作，从而来恢复数据库数据。</p><p>启动binlog记录功能，会影响服务器性能，但如果需要<strong>恢复数据或主从复制</strong>功能，则好处大于对服务器的影响。</p><blockquote><p>– 查看binlog相关参数<br>show variables like ‘%log_bin%’;   </p></blockquote><p>MySQL5.7 版本中，binlog默认关闭，8.0版本默认打开。打开binlog功能，需要修改配置文件my.ini(windows)或my.cnf(linux)，然后重启数据库。<br>在配置文件中的[mysqld]部分增加如下配置:</p><pre><code># log-bin设置binlog的存放位置，可以是绝对路径，也可以是相对路径，这里写的相对路径，则binlog文件默认会放在data数据目录下log-bin=mysql-binlog# Server Id是数据库服务器id，随便写一个数都可以，这个id用来在mysql集群环境中标记唯一mysql服务器，集群环境中每台mysql服务器的id不能一样，不加启动会报错server-id=1# 其他配置binlog_format = row # 日志文件格式，下面会详细解释expire_logs_days = 15 # 执行自动删除距离当前15天以前的binlog日志文件的天数， 默认为0， 表示不自动删除max_binlog_size = 200M # 单个binlog日志文件的大小限制，默认为 1GB</code></pre><p>重启数据库后data数据目录多出两个文件，第一个是binlog日志文件，第二个是binlog文件的索引文件，这个文件管理了所有的binlog文件的目录。</p><p><img src="/images/mysql/log-3.png" alt="log-3"></p><p>执行命令查看有多少binlog文件，注意只有开启binlog 以后执行下面sql会得到结果，未开启执行报错</p><blockquote><p>show binary logs;</p></blockquote><p>执行<code>show variables like '%log_bin%';</code> 查询binlog相关参数：</p><p><img src="/images/mysql/log-4.png" alt="log-4"></p><p>上图参数说明：</p><pre><code>log_bin：binlog日志是否打开状态log_bin_basename：是binlog日志的基本文件名，后面会追加标识来表示每一个文件，binlog日志文件会滚动增加log_bin_index：指定的是binlog文件的索引文件，这个文件管理了所有的binlog文件的目录。sql_log_bin：sql语句是否写入binlog文件，ON代表需要写入，OFF代表不需要写入。如果想在主库上执行一些操作，但不复制到slave库上，可以通过修改参数sql_log_bin来实现。比如说，模拟主从同步复制异常。</code></pre><p><strong>binlog 的日志格式</strong></p><p>用参数 binlog_format 可以设置binlog日志的记录格式，mysql支持三种格式类型：</p><ul><li>STATEMENT：基于SQL语句的复制，每一条会修改数据的sql都会记录到master机器的bin-log中，这种方式日志量小，节约IO开销，提高性能，但是对于一些执行过程中才能确定结果的函数，比如UUID()、SYSDATE()等函数如果随sql同步到slave机器去执行，则结果跟master机器执行的不一样。</li><li>ROW：基于行的复制，日志中会记录成每一行数据被修改的形式，然后在slave端再对相同的数据进行修改记录下每一行数据修改的细节，可以解决函数、存储过程等在slave机器的复制问题，但这种方式日志量较大，性能不如Statement。举个例子，假设update语句更新10行数据，Statement方式就记录这条update语句，Row方式会记录被修改的10行数据。</li><li>MIXED：混合模式复制，实际就是前两种模式的结合，在Mixed模式下，MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是在Statement和Row之间选择一种，如果sql里有函数或一些在执行时才知道结果的情况，会选择Row，其它情况选择Statement，推荐使用这一种。</li></ul><p><font color="red">STATEMENT记录sql，ROW记录每行数据，MIXED混合，推荐最后一种</font></p><p><strong>binlog写入磁盘机制</strong></p><p>binlog写入磁盘机制主要通过 sync_binlog 参数控制，<font color="red">默认值是 0</font>。</p><ul><li>为0的时候，表示每次提交事务都只 write 到<strong>page cache</strong>，由系统自行判断什么时候执行 fsync 写入磁盘。虽然性能得到提升，但是机器宕机，page cache里面的 binlog 会丢失。</li><li>也可以设置为1，表示每次提交事务都会执行 fsync 写入磁盘，这种方式最安全。</li><li>还有一种折中方式，可以设置为N(N&gt;1)，表示每次提交事务都write 到page cache，但累积N个事务后才 fsync 写入磁盘，这种如果机器宕机会丢失N个事务的binlog。</li></ul><p>发生以下任何事件时, binlog日志文件会重新生成：</p><ul><li>服务器启动或重新启动</li><li>服务器刷新日志，执行命令flush logs</li><li>日志文件大小达到 max_binlog_size 值，默认值为 1GB</li></ul><p><strong>删除 binlog 日志文件</strong></p><pre><code># 删除当前的binlog文件reset master;# 删除指定日志文件之前的所有日志文件，下面这个是删除6之前的所有日志文件，当前这个文件不删除purge master logs to 'mysql-binlog.000006';# 删除指定日期前的日志索引中binlog日志文件purge master logs before '2023-01-21 14:00:00';</code></pre><p><strong>查看 binlog 日志文件</strong></p><p>可以用mysql自带的命令工具 mysqlbinlog 查看binlog日志内容</p><pre><code># 查看bin-log二进制文件（命令行方式，不用登录mysql）mysqlbinlog --no-defaults -v --base64-output=decode-rows D:\mysql-binlog.000001# 查看bin-log二进制文件（带查询条件）mysqlbinlog --no-defaults -v --base64-output=decode-rows D:\mysql-binlog.000001 start-datetime="2023-01-21 00:00:00" stop-datetime="2023-02-01 00:00:00" start-position="5000" stop-position="20000"</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-InnoDB底层原理</title>
      <link href="/posts/mysql-family/10/"/>
      <url>/posts/mysql-family/10/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL的内部组件结构"><a href="#MySQL的内部组件结构" class="headerlink" title="MySQL的内部组件结构"></a>MySQL的内部组件结构</h2><p><img src="/images/mysql/idb-1.png" alt="idb-1"></p><p>大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。</p><span id="more"></span><h3 id="Server层"><a href="#Server层" class="headerlink" title="Server层"></a>Server层</h3><p>主要包括<strong>连接器、查询缓存、分析器、优化器、执行器</strong>等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><h3 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h3><p>存储引擎层负责数据的存储和提取。其架构模式是<strong>插件式</strong>的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。</p><p>Server层的连接器、查询缓存、分析器、优化器、执行器的功能介绍：</p><p><strong>连接器</strong></p><p>我们知道由于MySQL是开源的，他有非常多种类的客户端：navicat,mysql front,jdbc,SQLyog等非常丰富的客户端，包括各种编程语言实现的客户端连接程序，这些客户端要向mysql发起通信都必须先跟Server端建立通信连接，而建立连接的工作就是有连接器完成的。</p><p>第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端<strong>建立连接、获取权限、维持和管理连接</strong>。连接命令一般是这么写的：</p><blockquote><p> [root@192 ~]# mysql -h host[数据库地址] -u root[用户] -p root[密码] -P 3306              </p></blockquote><p>连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。</p><blockquote><p>1、如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端程序结束执行。</p><p>2、如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</p></blockquote><p>这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。</p><p><font color="red">小结：验证用户名和密码建立连接，连接成功后查询权限，另外更新权限刷新后才生效</font></p><p><strong>查询缓存</strong></p><p>连接建立完成后，执行 select 语句。执行逻辑就会来到第二步：查询缓存。</p><p>MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。</p><p><font color="red">小结：执行select 语句后先去查询缓存查找，缓存没有再去执行查询逻辑。使用查询缓存很高效，但是命中低</font></p><p><strong>大多数情况查询缓存就是个鸡肋，为什么呢？</strong></p><p>因为查询缓存往往弊大于利。查询缓存的<strong>失效非常频繁</strong>，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。</p><p>一般建议大家在静态表里使用查询缓存，什么叫静态表呢？就是一般我们极少更新的表。比如，一个系统配置表、字典表，那这张表上的查询才适合使用查询缓存。好在 MySQL 也提供了这种“按需使用”的方式。你可以将my.cnf参数 query_cache_type 设置成 DEMAND。</p><blockquote><p>my.cnf </p><p>#query_cache_type有3个值 0代表关闭查询缓存OFF，1代表开启ON，2（DEMAND）代表当sql语句中有SQL_CACHE关键词时才缓存 query_cache_type=2              </p></blockquote><p>这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：</p><blockquote><p>select SQL_CACHE * from test where ID=5；              </p></blockquote><p>查看当前mysql实例是否开启缓存机制</p><blockquote><p>show global variables like “%query_cache_type%”;              </p></blockquote><p><font color="red">小结：查询缓存适用极少更新的表，多数场景下命中低，默认关闭。mysql 8.0已经移除</font></p><p><strong>分析器</strong></p><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。</p><p>分析器先会做“<strong>词法分析</strong>”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。</p><p>MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>做完了这些识别以后，就要做“<strong>语法分析</strong>”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。</p><p>如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 from 写成了 “rom”。</p><blockquote><p>mysql&gt; select * fro test where id=1; </p><p>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘fro test where id=1’ at line 1              </p></blockquote><p><font color="red">小结：词法分析关键字拼写是否正确，语法分析是否符合语法规则，全部正确生成语法树</font></p><p><strong>优化器</strong></p><p>经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。</p><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序；以及一些mysql自己内部的优化机制。</p><p><font color="red">小结：生成执行计划，选择合适的索引、合适的表连接顺序等</font></p><p><strong>执行器</strong></p><p>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证)。</p><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><p><font color="red">小结：权限验证，选择执行引擎</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-MVCC多版本并发控制机制</title>
      <link href="/posts/mysql-family/9/"/>
      <url>/posts/mysql-family/9/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL在可重复读隔离级别下如何保证事务较高的隔离性？"><a href="#MySQL在可重复读隔离级别下如何保证事务较高的隔离性？" class="headerlink" title="MySQL在可重复读隔离级别下如何保证事务较高的隔离性？"></a>MySQL在可重复读隔离级别下如何保证事务较高的隔离性？</h2><p>同样的sql查询语句在一个事务里多次执行查询结果相同，就算其它事务对数据有修改也不会影响当前事务sql语句的查询结果。这个隔离性就是靠MVCC(<strong>Multi-Version Concurrency Control</strong>)机制来保证的，对一行数据的读和写两个操作默认是不会通过加锁互斥来保证隔离性，避免了频繁加锁互斥，而在串行化隔离级别为了保证较高的隔离性是通过将所有操作加锁互斥来实现的。</p><p>MySQL在<strong>读已提交和可重复读</strong>隔离级别下都实现了MVCC机制。</p><p><font color="red">MySQL在RC和RR隔离级别下，事务第一次查询数据表生成全部数据的<strong>快照</strong>功能，就是通过MVCC多版本控制实现的</font></p><span id="more"></span><p>补充一个事务和锁状态的案例，分别执行下面步骤：</p><p>1、Session1开启事务后，执行查询 select * from account</p><p>2、Session2开启事务后，执行更新 update account set balance = ‘500’ where id = 1;</p><p>3、Session3开启事务后，执行更新 update account set balance = ‘1000’ where id = 1;</p><p>此时Session2的更新操作对id 为1的数据添加了写锁，Session3更新失败超时。</p><p>Session3执行超时期间（MySQL超时时间默认50s左右），查询锁状态如下：</p><p><img src="/images/mysql/mvcc-1.png" alt="mvcc-1"></p><p><img src="/images/mysql/mvcc-2.png" alt="mvcc-2"></p><p><img src="/images/mysql/mvcc-3.png" alt="mvcc-3"></p><p><strong>undo日志版本链与read view机制详解</strong></p><p>undo日志版本链是指一行数据被多个事务依次修改过后，在每个事务修改完后，Mysql会保留修改前的数据undo回滚日志，并且用两个隐藏字段trx_id和roll_pointer把这些undo日志串联起来形成一个历史记录版本链</p><p><img src="/images/mysql/mvcc-undo.png" alt="mvcc-undo"></p><p>在<strong>可重复读隔离级别</strong>，当事务开启，执行任何查询sql时会生成当前事务的<strong>一致性视图read-view，</strong><font color="red">该视图在事务结束之前永远都不会变化</font>(<strong>如果是读已提交隔离级别在每次执行查询sql时都会重新生成read-view</strong>)，这个视图由执行查询时所有未提交事务id数组（数组里最小的id为min_id）和已创建的最大事务id（max_id）组成，事务里的任何sql查询结果需要从对应版本链里的最新数据开始逐条跟read-view做比对从而得到最终的快照结果。</p><p><font color="red">事务开启后，即使第一次查询SQL与业务无关，也会创建一致性视图。max_id 是已提交事务中最大的tx_id，max_id可能大于活跃事务数组的tx_id 最大值，也可能在活跃事务数组范围内；min_id 是活跃事务数组中tx_id 的最小值</font></p><p>对于删除的情况可以认为是update的特殊情况，会将版本链上最新的数据复制一份，然后将trx_id修改成删除操作的trx_id，同时在该条记录的头信息（record header）里的（deleted_flag）标记位写上true，来表示当前记录已经被删除，在查询时按照上面的规则查到对应的记录如果delete_flag标记位为true，意味着记录已被删除，则不返回数据。</p><p><strong>关于readview和可见性算法的原理解释</strong></p><p>readview和可见性算法其实就是记录了sql查询那个时刻数据库里提交和未提交所有事务的状态。</p><p>要实现RR隔离级别，事务里每次执行查询操作readview都是使用第一次查询时生成的readview，也就是都是以第一次查询时当时数据库里所有事务提交状态来比对数据是否可见，可以实现每次查询可重复读的效果。</p><p>要实现RC隔离级别，事务里每次执行查询操作readview都会按照数据库当前状态重新生成readview，也就是每次查询都是跟数据库里当前所有事务提交状态来比对数据是否可见，实现的就是每次都能查到已提交最新数据的效果。</p><p><strong>注意：</strong>begin/start transaction 命令并不是一个事务的起点，在执行到它们之后的<strong>第一个修改操作或加排它锁</strong>操作(比如select…for update)的语句，事务才真正启动，才会向MySQL申请真正的事务id，MySQL内部是严格按照事务的启动顺序来分配事务id的。</p><p><strong>总结：</strong></p><p>MVCC机制的实现就是通过read-view机制与undo版本链比对机制，使得不同的事务会根据数据版本链对比规则读取同一条数据在版本链上的不同版本数据。</p><p><font color="red">数据是同一套，版本链不同。。MVCC多版本（多版本指的是日志链版本）并发控制不阻塞，读写并行执行。</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-锁机制</title>
      <link href="/posts/mysql-family/8/"/>
      <url>/posts/mysql-family/8/</url>
      
        <content type="html"><![CDATA[<h2 id="锁机制详解"><a href="#锁机制详解" class="headerlink" title="锁机制详解"></a>锁机制详解</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p><p>在数据库中，除了传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供需要用户共享的资源。如何<strong>保证数据并发访问的一致性、有效性</strong>是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。</p><span id="more"></span><h3 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h3><p>性能分类：<strong>悲观锁、乐观锁</strong></p><p>数据操作粒度分类：<strong>表锁、页锁、行锁</strong></p><p>数据库操作类型分类：<strong>读锁和写锁</strong>（都属于悲观锁，有锁等待）、还有<strong>意向锁</strong></p><p><font color="red">乐观锁更适合读多的场景：读多的场景加悲观锁会影响性能，因为读读不互斥加锁没有必要；</font></p><p><font color="red">悲观锁更适合写多的场景：写多的场景乐观锁加锁失败的概率大大增加，不断重试空转CPU影响性能</font></p><p><strong>读锁</strong>（共享锁，S锁(<strong>S</strong>hared)）：针对同一份数据，多个读操作可以同时进行而不会互相影响，比如：</p><blockquote><p> select * from T where id=1 lock in share mode              </p></blockquote><p><strong>写锁</strong>（排它锁，X锁(e<strong>X</strong>clusive)）：当前写操作没有完成前，它会阻断其他写锁和读锁，数据修改操作都会加写锁，查询也可以通过for update加写锁，比如：</p><blockquote><p>select * from T where id=1 for update              </p></blockquote><p><font color="red">读读不互斥，其他都互斥。Serializable 串行化的隔离级别，对所有读写操作都加锁，另外查询不存在的数据或者范围查询会额外对间隙范围的每一行加锁，从而解决幻读的问题</font></p><p><strong>意向锁</strong>（Intention Lock）：又称<strong>I锁</strong>，针对<strong>表锁</strong>，主要是为了<strong>提高加表锁的效率</strong>，是mysql数据库自己加的。当有事务给表的数据行加了共享锁或排他锁，同时会给表设置一个标识，代表已经有行锁了，其他事务要想对表加表锁时，就不必逐行判断有没有行锁可能跟表锁冲突了，直接读这个标识就可以确定自己该不该加表锁。特别是表中的记录很多时，逐行判断加表锁的方式效率很低。而这个标识就是意向锁。</p><p>意向锁主要分为：</p><p>意向共享锁，IS锁，对整个表加共享锁之前，需要先获取到意向共享锁。</p><p>意向排他锁，IX锁，对整个表加排他锁之前，需要先获取到意向排他锁。</p><p><font color="red">意向锁就是给表打的标记，标记当前表中是否有行锁。事务在尝试获取表锁时直接根据标记判断即可，表中已经加过行锁的情况不允许其他事务对当前表加表锁</font></p><p><strong>表锁</strong></p><p>每次操作锁住整张表。<strong>开销小，加锁快</strong>；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低；一般用在整表数据迁移的场景。</p><p><font color="red">开销小，加锁快，指的是加锁的这个操作，找到表即可 无需遍历找到某一行的记录。并发性能差，更适合半夜业务量小的时候，进行数据迁移，加锁防止表数据修改迁移完成后解锁</font></p><p>预置表数据：</p><pre><code>-- 建表SQLCREATE TABLE `mylock` (    `id` INT (11) NOT NULL AUTO_INCREMENT,    `NAME` VARCHAR (20) DEFAULT NULL,    PRIMARY KEY (`id`)) ENGINE = MyISAM DEFAULT CHARSET = utf8;-- 插入数据INSERT INTO `mylock` (`id`, `NAME`) VALUES ('1', 'a');INSERT INTO `mylock` (`id`, `NAME`) VALUES ('2', 'b');INSERT INTO `mylock` (`id`, `NAME`) VALUES ('3', 'c');INSERT INTO `mylock` (`id`, `NAME`) VALUES ('4', 'd');</code></pre><p>表锁操作：</p><pre><code>-- 手动增加表锁lock table 表名称 read(write),表名称2 read(write);-- 查看表上加过的锁show open tables;-- 删除表锁unlock tables;</code></pre><p><font color="red">表锁write 添加后，其他事务对当前表的读写操作都会阻塞；表锁read 添加后，其他事务对当前表的更新操作阻塞，读操作不阻塞</font></p><p><strong>页锁</strong></p><p>只有<strong>BDB存储引擎支持页锁</strong>，页锁就是在页的粒度上进行锁定，锁定的数据资源比行锁要多，因为一个页中可以有多个行记录。当我们使用页锁的时候，会出现数据浪费的现象，但这样的浪费最多也就是一个页上的数据行。页锁的开销介于表锁和行锁之间，会出现死锁。锁定粒度介于表锁和行锁之间，并发度一般。</p><p><font color="red">考虑到行锁粒度比较大的问题，页锁粒度更小每次锁住MySQL的一个磁盘页，类似分段锁的思想</font></p><p><strong>行锁</strong></p><p>每次操作锁住一行数据。<strong>开销大，加锁慢</strong>；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度最高。</p><p>InnoDB相对于MYISAM的最大不同有两点：</p><ul><li><strong>InnoDB支持事务（TRANSACTION）</strong></li><li><strong>InnoDB支持行级锁</strong></li></ul><p>注意，InnoDB的行锁实际上是针对索引加的锁(在索引对应的索引项上做标记)，不是针对整个行记录加的锁。并且该索引不能失效，否则会从行锁升级为表锁。(<strong>RR级别会升级为表锁，RC级别不会升级为表锁</strong>)</p><p>比如我们在RR级别执行如下sql</p><blockquote><p>select * from account where name = ‘gao’ for update;    – where条件里的name字段无索引              </p></blockquote><p>则其它Session对该表任意一行记录做修改操作都会被阻塞住。</p><p><font color="red">RR级别下要尽量避免这种情况发生，表锁的并发度最低 极大的影响性能</font></p><p><strong>PS：关于RR级别行锁升级为表锁的原因分析</strong></p><p>因为在RR隔离级别下，需要解决不可重复读和幻读问题，所以在遍历扫描聚集索引记录时，为了防止扫描过的索引被其它事务修改(不可重复读问题) 或 间隙被其它事务插入记录(幻读问题)，从而导致数据不一致，所以MySQL的解决方案就是把所有扫描过的索引记录和间隙都锁上，这里要注意，并不是直接将整张表加表锁，因为不一定能加上表锁，可能会有其它事务锁住了表里的其它行记录。</p><p><strong>间隙锁(Gap Lock)</strong></p><p>间隙锁，锁的就是两个值之间的空隙，<strong>间隙锁是在可重复读隔离级别下才会生效。</strong></p><p>只要在间隙范围内锁了一条不存在的记录会锁住整个间隙范围，不锁边界记录，这样就能防止其它Session在这个间隙范围内插入数据，就解决了可重复读隔离级别的幻读问题。</p><p><font color="red">间隙锁可以彻底解决RR级别的幻读问题，执行 select * from [表名] where id = [不存在id] for update，锁住间隙范围。这里的锁的间隙也是通过索引，对索引范围加锁</font></p><p><strong>临键锁(Next-key Locks)</strong></p><p>Next-Key Locks是行锁与间隙锁的组合。</p><p><font color="red">select * from [表名] where id &gt; 15 for update，查询条件是范围，且范围内存在索引列和间隙列时产生临键锁</font></p><p><strong>总结：</strong></p><p>MyISAM在执行查询语句SELECT前，会自动给涉及的所有表加读锁，在执行update、insert、delete操作会自动给涉及的表加写锁。</p><p>InnoDB在执行查询语句SELECT时(非串行隔离级别)，不会加锁。但是update、insert、delete操作会加行锁。</p><p>另外，读锁会阻塞写，但是不会阻塞读。而写锁则会把读和写都阻塞。</p><p>Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一下，但是在整体并发处理能力方面要远远优于MYISAM的表级锁定的。当系统并发量高的时候，Innodb的整体性能和MYISAM相比就会有比较明显的优势了。</p><p>但是，Innodb的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让Innodb的整体性能表现不仅不能比MYISAM高，甚至可能会更差。</p><h3 id="锁等待分析"><a href="#锁等待分析" class="headerlink" title="锁等待分析"></a>锁等待分析</h3><p>通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况</p><pre><code>show status like 'innodb_row_lock%';对各个状态量的说明如下：Innodb_row_lock_current_waits: 当前正在等待锁定的数量Innodb_row_lock_time: 从系统启动到现在锁定总时间长度Innodb_row_lock_time_avg: 每次等待所花平均时间Innodb_row_lock_time_max：从系统启动到现在等待最长的一次所花时间Innodb_row_lock_waits: 系统启动后到现在总共等待的次数</code></pre><p>其中比较重要的主要是： <code>Innodb_row_lock_time_avg</code> （等待平均时长）、<code>Innodb_row_lock_waits</code> （等待总次数）、<code>Innodb_row_lock_time</code>（等待总时长）</p><p>尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</p><p><strong>查看INFORMATION_SCHEMA系统库锁相关数据表</strong></p><pre><code>-- 查看事务select * from INFORMATION_SCHEMA.INNODB_TRX;-- 查看锁，8.0之后需要换成这张表performance_schema.data_locksselect * from INFORMATION_SCHEMA.INNODB_LOCKS;  -- 查看锁等待，8.0之后需要换成这张表performance_schema.data_lock_waitsselect * from INFORMATION_SCHEMA.INNODB_LOCK_WAITS;  -- 释放锁，trx_mysql_thread_id可以从INNODB_TRX表里查看到kill trx_mysql_thread_id-- 查看锁等待详细信息show engine innodb status; </code></pre><p><strong>死锁问题分析</strong></p><pre><code>set tx_isolation='repeatable-read';Session_1执行：select * from account where id=1 for update;Session_2执行：select * from account where id=2 for update;Session_1执行：select * from account where id=2 for update;Session_2执行：select * from account where id=1 for update;查看近期死锁日志信息：show engine innodb status; </code></pre><p>大多数情况mysql可以<strong>自动检测死锁</strong>并回滚产生死锁的那个事务，但是有些情况mysql没法自动检测死锁，这种情况我们可以通过日志分析找到对应事务线程id，可以通过kill杀掉。</p><h3 id="锁优化实践"><a href="#锁优化实践" class="headerlink" title="锁优化实践"></a>锁优化实践</h3><ul><li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能减少检索条件范围，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度，涉及事务加锁的SQL尽量放在事务最后执行</li><li>尽可能用低的事务隔离级别</li></ul><p><font color="red">只有在RR级别下才有行锁升级为表锁的情况，因为RR级别要解决各种问题：不可重复读、幻读等，RC级别就不需要解决这些问题</font></p><p>业务中常遇见的下单业务，需要插入订单表insert 和更新库存表update，如何选择顺序？</p><p><strong>先insert 后update 更优</strong>，因为insert 插入的是新增数据，其他事务不会对不存在的数据操作。如果是先update 那么有可能其他事务要操作这条数据而进入等待。<strong>涉及事务加锁SQL放在最后</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-事务</title>
      <link href="/posts/mysql-family/7/"/>
      <url>/posts/mysql-family/7/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>数据库并发执行多个事务对相同的一批数据进行增删改查操作，可能就会导致脏写、脏读、不可重复读、幻读这些问题。这些问题的本质都是数据库的多事务并发问题，为了解决多事务并发问题，数据库设计了<strong>事务隔离机制、锁机制、MVCC多版本并发控制隔离机制、日志机制</strong>，用一整套机制来<strong>解决多事务并发问题</strong>。</p><span id="more"></span><h2 id="事务及其ACID属性"><a href="#事务及其ACID属性" class="headerlink" title="事务及其ACID属性"></a>事务及其ACID属性</h2><p>事务：一组操作要么全部成功，要么全部失败，目的是保证数据的最终一致性。</p><p>事务具有以下4个属性,通常简称为事务的ACID属性。</p><ul><li>原子性(Atomicity) ：事务操作要么同时成功，要么同时失败。原子性由undo log日志来实现。</li><li>一致性(Consistent) ：使用事务的最终目的，由其它3个特性以及业务代码正确逻辑来实现。</li><li>隔离性(Isolation) ：事务并发执行时，他们内部的操作不能互相干扰。隔离性由MySQL的各种锁以及MVCC机制来实现。</li><li>持久性(Durable) ：一旦提交了事务，它对数据库的改变就应该是永久性的。持久性由redo log日志来实现。</li></ul><h2 id="并发事务处理带来的问题"><a href="#并发事务处理带来的问题" class="headerlink" title="并发事务处理带来的问题"></a>并发事务处理带来的问题</h2><p><font color="red">更新丢失(Lost Update)或脏写</font></p><p>两个或多个事务对同一行数据修改时可能发生，即最后的更新覆盖了由其他事务所做的更新。</p><p><font color="red">脏读（Dirty Reads）</font></p><p>事务A读取到了事务B已经修改但尚未提交的数据</p><p><font color="red">不可重读（Non-Repeatable Reads） </font></p><p>事务A内部的相同查询语句在不同时刻读出的结果不一致</p><p><font color="red">幻读（Phantom Reads）</font></p><p>事务A读取到了事务B提交的新增数据</p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>“脏读”、“不可重复读”和“幻读”都是数据库读一致性问题，必须由数据库的事务隔离机制来解决。</p><table><thead><tr><th>隔离级别</th><th>脏读(Dirty Read)</th><th>不可重复读(NonRepeatable Read)</th><th>幻读(Phantom Read)</th></tr></thead><tbody><tr><td>读未提交(Read uncommitted)</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>读已提交(Read committed)  <font color="red">RC</font></td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读(Repeatableread)   <font color="red">RR</font></td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>可串行化(Serializable)</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table><p>数据库的隔离级别越严格（上表越靠下越严格），并发性能约好，但相应的成本代价越高。</p><p>查看当前数据库的事务隔离级别：<code>show variables like 'tx_isolation';</code></p><p>设置事务隔离级别：<code>set tx_isolation='REPEATABLE-READ';</code></p><p><strong>Mysql默认的事务隔离级别是可重复读，用Spring开发程序时，如果不设置隔离级别默认用Mysql设置的隔离级别，如果Spring设置了就用已经设置的隔离级别</strong></p><p>为什么用RR级别的隔离级别？</p><p>我的理解是：隔离性能还不错，同时并发性能比串行化好很多。对代码的业务开发更友好（避免了脏读和不可重读的问题，同时通过间隙锁一定程度上避免幻读的发生）</p><h3 id="事务隔离级别案例分析"><a href="#事务隔离级别案例分析" class="headerlink" title="事务隔离级别案例分析"></a>事务隔离级别案例分析</h3><p>预置表数据：</p><pre><code>CREATE TABLE `account` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(255) DEFAULT NULL, `balance` int(11) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;INSERT INTO `account` (`name`, `balance`) VALUES ('guan', '450');INSERT INTO `account` (`name`, `balance`) VALUES ('liu', '16000');INSERT INTO `account` (`name`, `balance`) VALUES ('zhang', '2400');</code></pre><p><strong>读未提交：</strong></p><p>1、打开一个客户端A设置隔离级别为读未提交；开启事务并查询表数据</p><p><img src="/images/mysql/tra-1.png" alt="tra-1"></p><p>2、打开一个新的客户端B开启事务，修改表中id为1的数据，不提交事务</p><p><img src="/images/mysql/tra-2.png" alt="tra-2"></p><p>3、到客户端A中重新查询表数据，发现读取到 id 为1的数据是客户端B修改后的数据</p><p><img src="/images/mysql/tra-3.png" alt="tra-3"></p><p>4、客户端B发生回滚，所有操作都会被撤销，此时客户端A查询到的数据就是<strong>脏数据</strong></p><p><font color="red">第3步读取到其他事务修改未提交的数据，带入到程序中处理的情况下，一旦其他事务发生回滚，那么程序中处理的数据就是脏数据。解决这个问题可以用读已提交的隔离级别。</font></p><p><strong>读已提交：</strong></p><p>1、打开一个客户端A，并设置当前事务模式为read committed，查询表account的所有记录</p><p><img src="/images/mysql/tra-4.png" alt="tra-4"></p><p>2、在客户端A的事务提交之前，打开另一个客户端B，更新表account：</p><p><img src="/images/mysql/tra-5.png" alt="tra-5"></p><p>3、这时，客户端B的事务还没提交，客户端A不能查询到B已经更新的数据，<font color="red">解决了脏读问题</font></p><p><img src="/images/mysql/tra-6.png" alt="tra-6"></p><p>4、客户端B的事务提交，执行commit;</p><p>5、客户端A执行与上一步相同的查询，结果与上一步不一致，即产生了不可重复读的问题</p><p><img src="/images/mysql/tra-7.png" alt="tra-7"></p><p><strong>可重复读</strong></p><p><font color="red">可重复读隔离级别在事务开启的时候，第一次查询是查的数据库里已提交的最新数据，这时候全数据库会有一个快照(并不是真正生成一个快照，有类似功能的实现机制，可以简单这样理解)，在这个事务之后执行的查询操作都是查快照里的数据，别的事务不管怎么修改数据对当前这个事务的查询都没有影响，但是当前事务如果修改了某条数据，那当前事务之后查这条修改的数据就是被修改之后的值，但是查其它数据依然是从快照里查，不受影响。</font></p><p>1、打开一个客户端A，并设置当前事务模式为repeatable read，查询表account的所有记录</p><p><img src="/images/mysql/tra-8.png" alt="tra-8"></p><p>2、在客户端A的事务提交之前，打开另一个客户端B，更新表account并提交</p><p><img src="/images/mysql/tra-9.png" alt="tra-9"></p><p>3、在客户端A查询表account的所有记录，与步骤1查询结果一致，没有出现不可重复读的问题</p><p><img src="/images/mysql/tra-10.png" alt="tra-10"></p><p>4、在客户端A，接着执行update account set balance = balance - 50 where id = 1，balance没有变成450-50=400，guan的balance值用的是步骤2中的400来算的，所以是350，数据的一致性倒是没有被破坏。可重复读的隔离级别下使用了MVCC(multi-version concurrency control)机制，select操作是<strong>快照读（历史版本）</strong>；insert、update和delete是<strong>当前读（当前版本）</strong>。</p><p><img src="/images/mysql/tra-11.png" alt="tra-11"></p><p><font color="red">注意：这里的更新是按照数据表的实际数据更新，尽管查询到的是快照数据</font></p><p>5、重新打开客户端B，插入一条新数据后提交</p><p><img src="/images/mysql/tra-12.png" alt="tra-12"></p><p>6、在客户端A查询表account的所有记录，没有查出新增数据，所以没有出现幻读</p><p><img src="/images/mysql/tra-13.png" alt="tra-13"></p><p><font color="red">注意：这里没有查到客户端B新增的id等于4的数据，但是可以更新id为4的数据参考步骤7</font></p><p>7、在客户端A执行update account set balance=888 where id = 4；能更新成功，再次查询能查到客户端B新增的数据</p><p><img src="/images/mysql/tra-14.png" alt="tra-14"></p><p><font color="red">显然根据上面的例子可重复读没有完全解决幻读的问题，可重复读加间隙锁可以彻底解决幻读问题</font></p><p><strong>串行化</strong></p><p>1、打开一个客户端A，并设置当前事务模式为serializable，查询表account的初始值</p><p><img src="/images/mysql/tra-15.png" alt="tra-15"></p><p>2、打开一个客户端B，并设置当前事务模式为serializable，更新相同的id为1的记录会被阻塞等待，更新id为2的记录可以成功，说明在串行模式下innodb的查询也会被加上行锁，如果查询的记录不存在会给这条不存在的记录加上锁(这种是间隙锁)。</p><p>如果客户端A执行的是一个范围查询，那么该<strong>范围内的所有行包括每行记录所在的间隙区间范围都会被加锁</strong>。此时如果客户端B在该范围内插入数据都会被阻塞，所以就避免了幻读。</p><p><font color="red">这种隔离级别并发性极低，开发中很少会用。</font></p><p><img src="/images/mysql/tra-16.png" alt="tra-16"></p><p><img src="/images/mysql/tra-17.png" alt="tra-17"></p><p><font color="red">小结：串行化隔离级别开启后，读取时自动加上共享锁 lock in share mode，写数据时自动加上排他锁 for update，通过读写互斥保证串行化。</font></p><blockquote><p>补充：隔离级别与锁的关系？</p><p>在Read Uncommitted级别下，读取数据不需要加共享锁，这样就不会跟被修改的数据上的排他锁冲突</p><p>在Read Committed级别下，读操作需要加共享锁，但是在语句执行完以后释放共享锁；</p><p>在Repeatable Read级别下，读操作需要加共享锁，但是在事务提交之前并不释放共享锁，也就是必须等待事务执行完毕以后才释放共享锁。</p><p>SERIALIZABLE 是限制性最强的隔离级别，因为该级别锁定整个范围的键，并一直持有锁，直到事务完成。</p></blockquote><h2 id="事务问题定位"><a href="#事务问题定位" class="headerlink" title="事务问题定位"></a>事务问题定位</h2><pre><code>#查询执行时间超过1秒的事务SELECT    * FROM    information_schema.innodb_trx WHERE    TIME_TO_SEC( timediff( now( ), trx_started ) ) &gt; 1;  #强制结束事务 kill 事务对应的线程id(就是上面语句查出结果里的trx_mysql_thread_id字段的值)</code></pre><h2 id="大事务的影响"><a href="#大事务的影响" class="headerlink" title="大事务的影响"></a>大事务的影响</h2><ul><li>并发情况下，数据库连接池容易被撑爆</li><li>锁定太多的数据，造成大量的阻塞和锁超时</li><li>执行时间长，容易造成主从延迟</li><li>回滚所需要的时间比较长</li><li>undo log膨胀</li><li>容易导致死锁</li></ul><p><font color="red">连接池被撑爆可能导致服务崩溃，在微服务中可能导致服务调用失败等一系列问题</font></p><h2 id="事务优化"><a href="#事务优化" class="headerlink" title="事务优化"></a>事务优化</h2><ul><li>将查询等数据准备操作放到事务外</li><li>事务中避免远程调用，远程调用要设置超时，防止事务等待时间太久</li><li>事务中避免一次性处理太多数据，可以拆分成多个事务分次处理</li><li>更新等涉及加锁的操作尽可能放在事务靠后的位置</li><li>能异步处理的尽量异步处理</li><li>应用侧(业务代码)保证数据一致性，非事务执行</li></ul><p><font color="red">简单总结就是大事务拆分成小事务，减少事务发生的时间（加等待超时、异步处理等）</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-优化三</title>
      <link href="/posts/mysql-family/6/"/>
      <url>/posts/mysql-family/6/</url>
      
        <content type="html"><![CDATA[<h2 id="分页查询优化"><a href="#分页查询优化" class="headerlink" title="分页查询优化"></a><font color="red">分页查询优化</font></h2><p>预置表：</p><pre><code>CREATE TABLE `employees` (    `id` INT ( 11 ) NOT NULL AUTO_INCREMENT,    `name` VARCHAR ( 24 ) NOT NULL DEFAULT '' COMMENT '姓名',    `age` INT ( 11 ) NOT NULL DEFAULT '0' COMMENT '年龄',    `position` VARCHAR ( 20 ) NOT NULL DEFAULT '' COMMENT '职位',    `hire_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '入职时间',    PRIMARY KEY ( `id` ),    KEY `idx_name_age_position` ( `name`, `age`, `position` ) USING BTREE ) ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT = '员工记录表';drop procedure if exists insert_emp; delimiter ;;create procedure insert_emp()        begin  declare i int;                      set i=1;                            while(i&lt;=100000)do                     insert into employees(name,age,position) values(CONCAT('gax',i),i,'dev');      set i=i+1;                         end while;end;;delimiter ;call insert_emp();</code></pre><p>分析业务上可能遇到的分页SQL：</p><pre><code>select * from employees limit 10000,10;</code></pre><p>表示从表 employees 中取出从 10001 行开始的 10 行记录。看似只查询了 10 条记录，实际这条 SQL 是先读取 10010 条记录，然后抛弃前 10000 条记录，然后读到后面 10 条想要的数据。因此要查询一张大表比较靠后的数据，执行效率是非常低的。</p><span id="more"></span><h3 id="常见的分页场景优化："><a href="#常见的分页场景优化：" class="headerlink" title="常见的分页场景优化："></a>常见的分页场景优化：</h3><h4 id="根据自增且连续的主键排序的分页查询"><a href="#根据自增且连续的主键排序的分页查询" class="headerlink" title="根据自增且连续的主键排序的分页查询"></a>根据自增且连续的主键排序的分页查询</h4><p><img src="/images/mysql/opt3-1.png" alt="opt3-1"></p><p><img src="/images/mysql/opt3-2.png" alt="opt3-2"></p><p>上图的第一个SQL表示查询从第 90001开始的五行数据，没添加单独 order by，表示通过<strong>主键排序</strong>。我们再看表 employees ，因为主键是自增并且连续的，所以可以改写成按照主键去查询从第 90001开始的五行数据，查询结果一致。</p><p>对比执行计划：改写后的 SQL 走了<strong>索引</strong>，而且<strong>扫描的行数大大减少</strong>，执行效率更高。</p><p>但是，这条改写的SQL 在很多场景并不实用，因为表中可能某些记录被删后，主键空缺，导致结果不一致。</p><p>另外如果原 SQL 是 order by 非主键的字段，按照上面说的方法改写会导致两条 SQL 的结果不一致。所以这种改写得满足以下两个条件：</p><ul><li>主键自增且连续</li><li>结果是按照主键排序的</li></ul><h4 id="根据非主键字段排序的分页查询"><a href="#根据非主键字段排序的分页查询" class="headerlink" title="根据非主键字段排序的分页查询"></a>根据非主键字段排序的分页查询</h4><p><img src="/images/mysql/opt3-3.png" alt="opt3-3"></p><p><img src="/images/mysql/opt3-4.png" alt="opt3-4"></p><p>从上面第一个SQL的执行计划可以看出，没有使用索引，并且使用了文件排序。（<strong>扫描整个索引并查找到没索引的行(可能要遍历多个索引树)的成本比扫描全表的成本更高，所以优化器放弃使用索引</strong>）</p><p>其优化的关键是<strong>让排序时返回的字段尽可能少</strong>，所以可以让排序和分页操作先查出主键，然后根据主键查到对应的记录，于是可以改写成上面的第二个SQL进行优化</p><p>需要的结果与原 SQL 一致，执行时间减少了一半以上，原 SQL 使用的是 filesort 排序，而优化后的 SQL 使用的是索引排序。</p><h2 id="Join关联查询优化"><a href="#Join关联查询优化" class="headerlink" title="Join关联查询优化"></a><font color="red">Join关联查询优化</font></h2><p>预置表数据：（t1和t2两张表，表结构完全一样，1表10000条数据，2表100条数据）</p><pre><code>CREATE TABLE `t1` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `a` int(11) DEFAULT NULL,  `b` int(11) DEFAULT NULL,  PRIMARY KEY (`id`),  KEY `idx_a` (`a`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;create table t2 like t1;-- 插入一些示例数据-- 往t1表插入1万行记录drop procedure if exists insert_t1;delimiter ;;create procedure insert_t1()        begin  declare i int;                      set i=1;                            while(i&lt;=10000)do                     insert into t1(a,b) values(i,i);      set i=i+1;                         end while;end;;delimiter ;call insert_t1();-- 往t2表插入100行记录drop procedure if exists insert_t2; delimiter ;;create procedure insert_t2()        begin  declare i int;                      set i=1;                            while(i&lt;=100)do                     insert into t2(a,b) values(i,i);      set i=i+1;                         end while;end;;delimiter ;call insert_t2();</code></pre><h3 id="MySQL的表关联常见有两种算法"><a href="#MySQL的表关联常见有两种算法" class="headerlink" title="MySQL的表关联常见有两种算法"></a>MySQL的表关联常见有两种算法</h3><ul><li><p>Nested-Loop Join 算法</p></li><li><p>Block Nested-Loop Join 算法</p></li></ul><h4 id="嵌套循环连接-Nested-Loop-Join-NLJ-算法"><a href="#嵌套循环连接-Nested-Loop-Join-NLJ-算法" class="headerlink" title="嵌套循环连接 Nested-Loop Join(NLJ) 算法"></a>嵌套循环连接 Nested-Loop Join(NLJ) 算法</h4><p>一次一行循环地从第一张表（称为<strong>驱动表</strong>）中读取行，在这行数据中取到关联字段，根据关联字段在另一张表（<strong>被驱动表</strong>）里取出满足条件的行，然后取出两张表的结果合集。</p><p><img src="/images/mysql/opt3-5.png" alt="opt3-5"></p><p>从执行计划中可以看到这些信息：</p><ul><li>驱动表是 t2，被驱动表是 t1。先执行的就是驱动表(执行计划结果的id如果一样则按从上到下顺序执行sql)；优化器一般会优先选择<strong>小表做驱动表，</strong>用where条件过滤完驱动表，然后再跟被驱动表做关联查询。<strong>使用 inner join 时，排在前面的表并不一定就是驱动表。</strong> <font color="red">注意：这里的小表并不是单纯指数据量小的表，而是指关联字段少的表，比如1表数据10000条范围查找后得到10条 此时1表是小表</font></li><li>当使用left join时，左表是驱动表，右表是被驱动表，当使用right join时，右表是驱动表，左表是被驱动表，当使用join时，mysql会选择数据量比较小的表作为驱动表，大表作为被驱动表。</li><li>使用了 NLJ算法。一般 join 语句中，如果执行计划 Extra 中未出现 <strong>Using join buffer</strong> 则表示使用的 join 算法是 NLJ。</li></ul><p><font color="red">简单理解：从一张表（小表）里拿出所有记录，到另一张表（大表）里面去查询。</font></p><p><strong>上面sql的大致流程如下：</strong></p><ol><li>从表 t2 中读取一行数据（如果t2表有查询过滤条件的，用先用条件过滤完，再从过滤结果里取出一行数据）；</li><li>从第 1 步的数据中，取出关联字段 a，到表 t1 中查找；</li><li>取出表 t1 中满足条件的行，跟 t2 中获取到的结果合并，作为结果返回给客户端；</li><li>重复上面 3 步。</li></ol><p>整个过程会读取 t2 表的所有数据(<strong>扫描100行</strong>)，然后遍历这每行数据中字段 a 的值，根据 t2 表中 a 的值索引扫描 t1 表中的对应行(<strong>扫描100次 t1 表的索引，1次扫描可以认为最终只扫描 t1 表一行完整数据，也就是总共 t1 表也扫描了100行</strong>)。因此整个过程扫描了 <strong>200 行</strong>。</p><p><font color="red">注意：这里的扫描指的是扫描磁盘中的完整数据，扫描索引树很快相比扫描磁盘数据可以忽略，</font></p><p>如果被驱动表的关联字段没索引，使用NLJ算法性能会比较低(下面有详细解释)，mysql会选择Block Nested-Loop Join算法。</p><h4 id="基于块的嵌套循环连接-Block-Nested-Loop-Join-BNL-算法"><a href="#基于块的嵌套循环连接-Block-Nested-Loop-Join-BNL-算法" class="headerlink" title="基于块的嵌套循环连接 Block Nested-Loop Join(BNL)算法"></a>基于块的嵌套循环连接 Block Nested-Loop Join(BNL)算法</h4><p>把<strong>驱动表</strong>的数据读入到 join_buffer 中，然后扫描<strong>被驱动表</strong>，把<strong>被驱动表</strong>每一行取出来跟 join_buffer 中的数据做对比。</p><p><img src="/images/mysql/opt3-6.png" alt="opt3-6"></p><p>Extra 中 的Using join buffer (Block Nested Loop)说明该关联查询使用的是 BNL 算法。</p><p><strong>上面sql的大致流程如下：</strong></p><ol><li>把 t2 的所有数据放入到 <strong>join_buffer</strong> 中</li><li>把表 t1 中每一行取出来，跟 join_buffer 中的数据做对比</li><li>返回满足 join 条件的数据</li></ol><p>整个过程对表 t1 和 t2 都做了一次全表扫描，因此扫描的总行数为10000(表 t1 的数据总量) + 100(表 t2 的数据总量) = <strong>10100</strong>。并且 join_buffer 里的数据是无序的，因此对表 t1 中的每一行，都要做 100 次判断，所以内存中的判断次数是 100 * 10000= <strong>100 万次</strong>。</p><p>这个例子里表 t2 才 100 行，要是表 t2 是一个大表，join_buffer 放不下怎么办呢？·</p><p>join_buffer 的大小是由参数 join_buffer_size 设定的，默认值是 256k。如果放不下表 t2 的所有数据话，策略很简单，就是<strong>分段放</strong>。</p><p>比如 t2 表有1000行记录， join_buffer 一次只能放800行数据，那么执行过程就是先往 join_buffer 里放800行记录，然后从 t1 表里取数据跟 join_buffer 中数据对比得到部分结果，然后清空  join_buffer ，再放入 t2 表剩余200行记录，再次从 t1 表里取数据跟 join_buffer 中数据对比。所以就多扫了一次 t1 表。</p><p><font color="red">简单理解：从一张表（小表）里拿出所有记录放入 join_buffer 中，另一张表（大表）每次取出一行到 join_buffer 中去比较。</font></p><p><strong>被驱动表的关联字段没索引为什么要选择使用 BNL 算法而不使用 Nested-Loop Join 呢？</strong></p><p>如果上面第二条sql使用 Nested-Loop Join，那么扫描行数为 100 * 10000 = 100万次，这个是<strong>磁盘扫描</strong>。</p><p>很显然，用BNL磁盘扫描次数少很多，相比于磁盘扫描，BNL的内存计算会快得多。</p><p><font color="red">总结：MySQL对于被驱动表的关联字段没索引的关联查询，一般都会使用 BNL 算法。如果有索引一般选择 NLJ 算法，有索引的情况下 NLJ 算法比 BNL算法性能更高。</font></p><h3 id="对于关联sql的优化"><a href="#对于关联sql的优化" class="headerlink" title="对于关联sql的优化"></a>对于关联sql的优化</h3><ul><li><strong>关联字段加索引</strong>，让mysql做join操作时尽量选择NLJ算法，驱动表因为需要全部查询出来，所以过滤的条件也尽量要走索引，避免全表扫描，总之，能走索引的过滤条件尽量都走索引</li><li><strong>小表驱动大表</strong>，写多表连接sql时如果<strong>明确知道</strong>哪张表是小表可以用straight_join写法固定连接驱动方式，省去mysql优化器自己判断的时间</li></ul><p><strong>straight_join解释：straight_join</strong>功能同join类似，但能让左边的表来驱动右边的表，能改表优化器对于联表查询的执行顺序。</p><p>比如：select * from t2 straight_join t1 on t2.a = t1.a; 代表指定mysql选着 t2 表作为驱动表。</p><ul><li><strong>straight_join</strong>只适用于inner join，并不适用于left join，right join。（因为left join，right join已经代表指定了表的执行顺序）</li><li>尽可能让优化器去判断，因为大部分情况下mysql优化器是比人要聪明的。使用<strong>straight_join</strong>一定要慎重，因为部分情况下人为指定的执行顺序并不一定会比优化引擎要靠谱。</li></ul><h4 id="对于小表定义的明确"><a href="#对于小表定义的明确" class="headerlink" title="对于小表定义的明确"></a>对于小表定义的明确</h4><p>在决定哪个表做驱动表的时候，应该是两个表按照各自的条件过滤，<strong>过滤完成之后</strong>，计算参与 join 的各个字段的总数据量，<strong>数据量小的那个表，就是“小表”</strong>，应该作为驱动表。</p><h4 id="in和exsits优化"><a href="#in和exsits优化" class="headerlink" title="in和exsits优化"></a>in和exsits优化</h4><p>原则：<strong>小表驱动大表</strong>，即小的数据集驱动大的数据集</p><p><strong>in：</strong>当B表的数据集小于A表的数据集时，in优于exists </p><pre><code>select * from A where id in (select id from B)  #等价于：　　for(select id from B){      select * from A where A.id = B.id    }</code></pre><p><strong>exists：</strong>当A表的数据集小于B表的数据集时，exists优于in</p><p>将主查询A的数据，放到子查询B中做条件验证，根据验证结果（true或false）来决定主查询的数据是否保留</p><pre><code>select * from A where exists (select 1 from B where B.id = A.id)#等价于:    for(select * from A){      select * from B where B.id = A.id    }    #A表与B表的ID字段应建立索引</code></pre><p>1、EXISTS (subquery)只返回TRUE或FALSE,因此子查询中的SELECT * 也可以用SELECT 1替换，官方说法是实际执行时会忽略SELECT清单，因此没有区别</p><p>2、EXISTS子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比</p><p>3、EXISTS子查询往往也可以用JOIN来代替，何种最优需要具体问题具体分析</p><h2 id="count-查询优化"><a href="#count-查询优化" class="headerlink" title="count(*)查询优化"></a><font color="red">count(*)查询优化</font></h2><p><img src="/images/mysql/opt3-7.png" alt="opt3-7"></p><p><font color="red">注意：以上4条sql只有根据某个字段count不会统计字段为null值的数据行</font></p><p><strong>四个sql的执行计划一样，说明这四个sql执行效率应该差不多</strong></p><p><strong>字段有索引：</strong><code>count(*)≈count(1)&gt;count(字段)&gt;count(主键 id) </code></p><p><font color="red">注意：字段有索引count(字段)统计走二级索引，二级索引存储数据比主键索引少</font></p><p><strong>字段无索引：</strong><code>count(*)≈count(1)&gt;count(主键 id)&gt;count(字段) </code></p><p><font color="red">注意：字段没有索引count(字段)统计走不了索引，count(主键 id)还可以走主键索引</font></p><p>count(1)跟count(字段)执行过程类似，不过count(1)不需要取出字段统计，就用常量1做统计，count(字段)还需要取出字段，所以理论上count(1)比count(字段)会快一点。</p><p><font color="red"><code>count(*)</code> 是例外，mysql并不会把全部字段取出来，而是专门做了优化，不取值，按行累加，效率很高，</font>所以不需要用count(列名)或count(常量)来替代 <code>count(*)</code>。</p><h3 id="常见优化方法"><a href="#常见优化方法" class="headerlink" title="常见优化方法"></a>常见优化方法</h3><p><strong>1、查询mysql自己维护的总行数</strong></p><p>对于<strong>myisam存储引擎</strong>的表做不带where条件的count查询性能是很高的，因为myisam存储引擎的表的总行数会被mysql存储在磁盘上，查询不需要计算</p><p><img src="/images/mysql/opt3-8.png" alt="opt3-8"></p><p>对于<strong>innodb存储引擎</strong>的表mysql不会存储表的总记录行数(因为有MVCC机制)，查询count需要实时计算</p><p><strong>2、show table status</strong></p><p>如果只需要知道表总行数的<strong>估计值</strong>可以用如下sql查询，性能很高</p><p><img src="/images/mysql/opt3-9.png" alt="opt3-9"></p><p><font color="red">注意：很显然统计的记录数和实际上有偏差，精确统计时不适用</font></p><p><strong>3、将总数维护到Redis里</strong></p><p>插入或删除表数据行的时候同时维护redis里的表总行数key的计数值(用incr或decr命令)，但是这种方式可能不准，很难保证表操作和redis操作的事务一致性</p><p><strong>4、增加数据库计数表</strong></p><p>插入或删除表数据行的时候同时维护计数表，让他们在同一个事务里操作</p><p><font color="red">注意：在业务系统中对于count查询比较多的场景，增加数据库计数表是很有必要的，至少也要维护在缓存</font></p><h2 id="MySQL数据类型选择"><a href="#MySQL数据类型选择" class="headerlink" title="MySQL数据类型选择"></a><font color="red">MySQL数据类型选择</font></h2><p>在MySQL中，选择正确的数据类型，对于性能至关重要。一般应该遵循下面两步：</p><p>（1）确定合适的大类型：数字、字符串、时间、二进制；</p><p>（2）确定具体的类型：有无符号、取值范围、变长定长等。</p><p>在MySQL数据类型设置方面，尽量用更小的数据类型，因为它们通常有更好的性能，花费更少的硬件资源。并且尽量把字段定义为NOT NULL，避免使用NULL。</p><p><strong>1、数值类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围（有符号）</th><th>范围（无符号）</th><th>用途</th></tr></thead><tbody><tr><td>TINYINT</td><td>1 字节</td><td>(-128, 127)</td><td>(0, 255)</td><td>小整数值</td></tr><tr><td>SMALLINT</td><td>2 字节</td><td>(-32 768, 32 767)</td><td>(0, 65 535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3 字节</td><td>(-8 388 608, 8 388 607)</td><td>(0, 16 777 215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4 字节</td><td>(-2 147 483 648, 2 147 483 647)</td><td>(0, 4 294 967 295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8 字节</td><td>(-9 233 372 036 854 775 808, 9 223 372 036 854 775 807)</td><td>(0, 18 446 744 073 709 551 615)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4 字节</td><td>(-3.402 823 466 E+38, 1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0, (1.175 494 351 E-38, 3.402 823 466 E+38)</td><td>单精度浮点数值</td></tr><tr><td>DOUBLE</td><td>8 字节</td><td>(1.797 693 134 862 315 7 E+308, 2.225 073 858 507 201 4 E-308), 0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td><td>0, (2.225 073 858 507 201 4 E-308, 1.797 693 134 862 315 7 E+308)</td><td>双精度浮点数值</td></tr><tr><td>DECIMAL</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table><p><strong>优化建议</strong></p><ol><li>如果整形数据没有负数，如ID号，建议指定为UNSIGNED无符号类型，容量可以扩大一倍。</li><li>建议使用TINYINT代替ENUM、BITENUM、SET。</li><li>避免使用整数的显示宽度，也就是说，不要用INT(10)类似的方法指定字段显示宽度，直接用INT。</li><li>DECIMAL最适合保存准确度要求高，而且用于计算的数据，比如价格。但是在使用DECIMAL类型的时候，注意长度设置。</li><li>建议使用整形类型来运算和存储实数，方法是，实数乘以相应的倍数后再操作。</li><li>整数通常是最佳的数据类型，因为它速度快，并且能使用AUTO_INCREMENT。</li></ol><p><font color="red">之前做过的业务上就经常用 long 类型来保存金额（单位：分）,计算简单且易读。另外设置整数字段时，推荐不指定长度，因为没多大实际意义</font></p><p><strong>2、日期和时间</strong></p><table><thead><tr><th>类型</th><th>大小(字节)</th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 到 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>‘-838:59:59’ 到 ‘838:59:59’</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 到 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 到 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:00 到 2038-01-19 03:14:07</td><td>YYYYMMDDhhmmss</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><p><strong>优化建议</strong></p><ol><li>MySQL能存储的最小时间粒度为秒。</li><li>建议用DATE数据类型来保存日期。MySQL中默认的日期格式是yyyy-mm-dd。</li><li>用MySQL的内建类型DATE、TIME、DATETIME来存储时间，而不是使用字符串。</li><li>当数据格式为TIMESTAMP和DATETIME时，可以用CURRENT_TIMESTAMP作为默认（MySQL5.6以后），MySQL会自动返回记录插入的确切时间。</li><li>TIMESTAMP是UTC时间戳，与时区相关。</li><li>DATETIME的存储格式是一个YYYYMMDD HH:MM:SS的整数，与时区无关，你存了什么，读出来就是什么。</li><li>除非有特殊需求，一般的公司建议使用TIMESTAMP，它比DATETIME更节约空间，但是像阿里这样的公司一般会用DATETIME，因为不用考虑TIMESTAMP将来的时间上限问题。</li><li>有时人们把Unix的时间戳保存为整数值，但是这通常没有任何好处，这种格式处理起来不太方便，我们并不推荐它。</li></ol><p><font color="red">工作中常用的就是&nbsp;DATETIME 和&nbsp;TIMESTAMP，之前公司用的大都是&nbsp;TIMESTAMP，个人更偏爱&nbsp;DATETIME </font></p><p><strong>3、字符串</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255字节</td><td>定长字符串，char(n)当插入的字符数不足n时(n代表字符数)，插入空格进行补充保存。在进行检索时，尾部的空格会被去掉。</td></tr><tr><td>VARCHAR</td><td>0-65535 字节</td><td>变长字符串，varchar(n)中的n代表最大字符数，插入的字符数不足n时不会补充空格</td></tr><tr><td>TINYBLOB</td><td>0-255字节</td><td>不超过 255 个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255字节</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65 535字节</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65 535字节</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16 777 215字节</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16 777 215字节</td><td>中等长度文本数据</td></tr><tr><td>LONGBLOB</td><td>0-4 294 967 295字节</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4 294 967 295字节</td><td>极大文本数据</td></tr></tbody></table><p><strong>优化建议</strong></p><ol><li>字符串的长度相差较大用VARCHAR；字符串短，且所有值都接近一个长度用CHAR。</li><li>CHAR和VARCHAR适用于包括人名、邮政编码、电话号码和不超过255个字符长度的任意字母数字组合。那些要用来计算的数字不要用VARCHAR类型保存，因为可能会导致一些与计算相关的问题。换句话说，可能影响到计算的准确性和完整性。</li><li>尽量少用BLOB和TEXT，如果实在要用可以考虑将BLOB和TEXT字段单独存一张表，用id关联。</li><li>BLOB系列存储二进制字符串，与字符集无关。TEXT系列存储非二进制字符串，与字符集相关。</li><li>BLOB和TEXT都不能有默认值。</li></ol><p><font color="red">做大数据相关的项目时，用到过 text 字段，字段内容自定义可能很长。常用的就是<strong>varchar 和 char</strong>，身份证、手机号这种长度固定的用 char，长度不确定的用 varchar 就行。注意姓名可能不止3个汉字，工作中遇到过客户的名字十几个字的</font></p><blockquote><p>补充一个JAVA常见的问题：String、StringBuffer、StringBuilder如何选择？</p><p>简述：已知字符串不会改变的情况使用String；字符串长度可变大部分情况使用StringBuilder；但是存在并发问题，可能存在多个线程都来修改共享数据时使用StringBuffer。</p></blockquote><p><strong>PS：INT显示宽度</strong></p><p>我们经常会使用命令来创建数据表，而且同时会指定一个长度，如下：</p><pre><code>CREATE TABLE `user`(    `id` TINYINT(2) UNSIGNED);</code></pre><p>这里表示user表的id字段的类型是TINYINT，可以存储的最大数值是255。如果存入值大于255，如500，那么MySQL会自动保存为TINYINT类型的最大值255。</p><p>在查询数据时，不管查询结果为何值，都按实际输出。这里TINYINT(2)中2的作用就是，当需要在查询结果前填充0时，命令中加上ZEROFILL就可以实现，如：</p><pre><code>`id` TINYINT(2) UNSIGNED ZEROFILL</code></pre><p>这样，查询结果如果是5，那输出就是05。如果指定TINYINT(5)，那输出就是00005，其实实际存储的值还是5，而且存储的数据不会超过255，只是MySQL输出数据时在前面填充了0。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-优化二</title>
      <link href="/posts/mysql-family/5/"/>
      <url>/posts/mysql-family/5/</url>
      
        <content type="html"><![CDATA[<h2 id="常见sql深入优化"><a href="#常见sql深入优化" class="headerlink" title="常见sql深入优化"></a>常见sql深入优化</h2><h3 id="Order-by与Group-by优化"><a href="#Order-by与Group-by优化" class="headerlink" title="Order by与Group by优化"></a><font color="red">Order by与Group by优化</font></h3><p>Case1：</p><p><img src="/images/mysql/opt2-1.png" alt="opt2-1"></p><p>分析： 利用最左前缀法则：中间字段不能断，因此查询用到了<strong>name索引</strong>，从key_len=74也能看出，age索引列用在<strong>排序</strong>过程中，因为Extra字段里<strong>没有using filesort</strong></p><span id="more"></span><p>Case2：</p><p><img src="/images/mysql/opt2-2.png" alt="opt2-2"></p><p>分析： 从explain的执行结果来看：key_len=74，查询使用了name索引，由于用了position进行排序，跳过了age，出现了<strong>Using filesort</strong>。</p><p><font color="red">小结：比较Case1和Case2，where+order不符合最左前缀法则 使用了文件排序</font></p><p>Case3：</p><p><img src="/images/mysql/opt2-3.png" alt="opt2-3"></p><p>分析： 查找只用到索引name，age和position用于排序，<strong>无Using filesort</strong>。</p><p>Case4：</p><p><img src="/images/mysql/opt2-4.png" alt="opt2-4"></p><p>分析： 和Case 3中explain的执行结果一样，但是出现了<strong>Using filesort</strong>，因为索引的创建顺序为 name,age,position，但是排序的时候age和position<strong>颠倒位置</strong>了。</p><p>Case5：</p><p><img src="/images/mysql/opt2-5.png" alt="opt2-5"></p><p>分析： 与Case 4对比，在Extra中并<strong>未出现Using filesort</strong>，因为<strong>age为常量</strong>，在排序中被优化，所以索引未颠倒， 不会出现Using filesort。</p><p>Case6：</p><p><img src="/images/mysql/opt2-6.png" alt="opt2-6"></p><p>分析： 虽然排序的字段列与索引顺序一样，且order by默认升序，这里position desc变成了降序，<strong>导致与索引的排序方式不同</strong>，从而产生Using filesort。Mysql8以上版本有降序索引可以支持该种查询方式。</p><p>Case7：</p><p><img src="/images/mysql/opt2-7.png" alt="opt2-7"></p><p>分析： 对于排序来说，多个相等条件也是范围查询。</p><p>Case8：</p><p><img src="/images/mysql/opt2-8.png" alt="opt2-8"></p><p><img src="/images/mysql/opt2-9.png" alt="opt2-9"></p><p>分析：范围查询可以用覆盖索引优化，注意where和order by的条件符合最左前缀法则。</p><h4 id="优化总结："><a href="#优化总结：" class="headerlink" title="优化总结："></a>优化总结：</h4><p>1、MySQL支持两种方式的排序<strong>filesort</strong>和<strong>index</strong>，Using index是指MySQL<strong>扫描索引本身完成排序</strong>。index效率高，filesort效率低。 </p><p>2、order by满足两种情况会使用Using index。</p><p>a) order by语句使用<strong>索引最左前列</strong>。 </p><p>b) 使用where子句与order by子句<strong>条件列组合满足索引最左前列</strong>。 </p><p>3、尽量在<strong>索引列</strong>上完成排序，遵循<strong>索引建立（索引创建的顺序）</strong>时的最左前缀法则。 </p><p>4、如果order by的条件不在索引列上，就会产生Using filesort。 </p><p>5、能用覆盖索引尽量用覆盖索引 </p><p>6、group by与order by很类似，其实质是<strong>先排序后分组</strong>，遵照<strong>索引创建顺序</strong>的最左前缀法则。对于group by的优化如果不需要排序的可以加上<strong>order by null</strong>禁止排序。注意，where高于having，能写在where中的限定条件就不要去having限定了。</p><h4 id="Using-filesort文件排序原理详解"><a href="#Using-filesort文件排序原理详解" class="headerlink" title="Using filesort文件排序原理详解"></a>Using filesort文件排序原理详解</h4><p><strong>filesort文件排序方式</strong> </p><ul><li><strong>单路排序</strong>：是一次性取出满足条件行的所有字段，然后在sort buffer中进行排序；用trace工具可以看到sort_mode信息里显示&lt; sort_key, additional_fields &gt;或者&lt; sort_key, packed_additional_fields &gt; </li><li><strong>双路排序（又叫回表排序模式）</strong>：是首先根据相应的条件取出相应的<strong>排序字段</strong>和<strong>可以直接定位行数据的行 ID</strong>，然后在 sort buffer 中进行排序，排序完后需要再次取回其它需要的字段；用trace工具可以看到sort_mode信息里显示&lt; sort_key, rowid &gt;</li></ul><p>MySQL 通过比较系统变量 max_length_for_sort_data(默认1024字节) 的大小和需要查询的字段总大小来判断使用哪种排序模式。 </p><ul><li>如果字段的总长度<strong>小于</strong>max_length_for_sort_data ，那么使用 <strong>单路排序模式</strong>； </li><li>如果字段的总长度<strong>大于</strong>max_length_for_sort_data ，那么使用 <strong>双路排序模式</strong>。</li></ul><p><font color="red">我的理解：sort buffer缓存大小有限，默认是1M，排序数据总长度小于max_length_for_sort_data时可以把全部字段放入缓存中排序，排序后直接返回给客户端；排序数据总长度超过max_length_for_sort_data时需要把排序字段和标识列（通常是主键）放入缓存中排序，排序完成通过标识列回表查到全部数据返回给客户端。</font></p><p>简单点就是：</p><p>数据总长度小于阈值，全部字段放入缓存排序，无需回表；</p><p>数据总长度大于阈值，排序字段和主键放入缓存排序（可以排序更多的列），但是需要回表。</p><p><strong>示例验证下各种排序方式：</strong></p><p><img src="/images/mysql/opt2-10.png" alt="opt2-10"></p><p>查看下这条sql对应trace结果如下(只展示排序部分)：</p><pre><code>"join_execution": {  --sql执行阶段    "select#": 1,    "steps": [      {        "filesort_information": [          {            "direction": "asc",            "table": "`employees`",            "field": "position"          }        ] /* filesort_information */,        "filesort_priority_queue_optimization": {          "usable": false,          "cause": "not applicable (no LIMIT)"        } /* filesort_priority_queue_optimization */,        "filesort_execution": [        ] /* filesort_execution */,        "filesort_summary": {  --文件排序信息          "rows": 0,  -- 预计扫描行数          "examined_rows": 0,  --参与扫描行数          "number_of_tmp_files": 0,  --使用临时文件的个数，这个值如果为0代表全部使用的sort_buffer内存排序，否则使用的磁盘文件排序          "sort_buffer_size": 262080,  --排序缓存的大小，单位Byte          "sort_mode": "&lt;sort_key, packed_additional_fields&gt;"  --排序方式，单路排序        } /* filesort_summary */      }    ] /* steps */} /* join_execution */</code></pre><p>验证双路排序：</p><pre><code>-- 执行sql命令set session optimizer_trace="enabled=on";set max_length_for_sort_data = 10; -- 设置缓存大小，表中所有字段长度一定大于10字节select name,age,position from employees where name = 'gax' order by position;select * from information_schema.OPTIMIZER_TRACE;set session optimizer_trace="enabled=off";截取trace工具结果关键部分："filesort_summary": {    "rows": 0,    "examined_rows": 0,    "number_of_tmp_files": 0,    "sort_buffer_size": 262136,    "sort_mode": "&lt;sort_key, rowid&gt;" -- 双路排序} /* filesort_summary */</code></pre><p>总结单路排序：</p><p>根据查询条件找到满足条件的主键，依次根据主键查出整行，并把<strong>所有字段放入到sort_buffer</strong>中，在sort_buffer中按照order by的排序字段排好顺序，返回给客户端。</p><p>总结双路排序：</p><p>根据查询条件找到满足条件的主键，依次根据主键查出整行，并把<strong>主键和排序字段放入到sort_buffer</strong>中，在sort_buffer中根据排序字段对主键排好顺序，取出主键遍历，到<strong>原数据表</strong>中查出全部数据返回给客户端。</p><p>如果 MySQL <strong>排序内存 sort_buffer</strong> 配置的比较小并且没有条件继续增加了，可以适当把 max_length_for_sort_data 配置小点，让优化器选择使用<strong>双路排序</strong>算法，可以在sort_buffer 中一次排序更多的行，只是需要再根据主键回到原表取数据。 如果 MySQL 排序内存有条件可以配置比较大，可以适当增大 max_length_for_sort_data 的值，让优化器优先选择全字段排序(<strong>单路排序</strong>)，把需要的字段放到 sort_buffer 中，这样排序后就会直接从内存里返回查询结果了。</p><p><strong>注意：</strong>如果全部使用sort_buffer内存排序一般情况下效率会高于磁盘文件排序，但不能因为这个就随便增大sort_buffer(默认1M)，mysql很多参数设置都是做过优化的，不要轻易调整。</p><h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a><font color="red"><strong>索引设计原则</strong></font></h3><p><strong>1. 代码先行，索引后上</strong> </p><p>一般应该等到主体业务功能开发完毕，把涉及到该表相关sql都要拿出来分析之后再建立索引。</p><p><strong>2. 联合索引尽量覆盖条件</strong> </p><p>可以设计一个或者两三个联合索引(尽量少建单值索引)，让每一个联合索引都尽量去包含sql语句里的where、order by、group by的字段，还要确保这些联合索引的字段顺序尽量满足sql查询的最左前缀原则。</p><p><strong>3. 不要在小基数字段上建立索引</strong></p><p>一般建立索引，尽量使用那些基数比较大的字段，就是值比较多的字段，那么才能发挥出B+树快速二分查找的优势来。</p><p><strong>4. 长字符串我们可以采用前缀索引</strong></p><p>尽量对字段类型较小的列设计索引，比如说什么tinyint之类的，因为字段类型较小的话，占用磁盘空间也会比较小，此时你在搜索的时候性能也会比较好一点。 </p><p>当然，这个所谓的字段类型小一点的列，也不是绝对的，很多时候你就是要针对varchar(255)这种字段建立索引，哪怕多占用一些磁盘空间也是有必要的。 </p><p>对于这种varchar(255)的大字段可能会比较占用磁盘空间，可以稍微优化下，比如针对这个字段的前20个字符建立索引，就是说对这个字段里的每个值的前20个字符放在索引树里，类似于 KEY index(name(20),age,position)。 </p><p>此时你在where条件里搜索的时候，如果是根据name字段来搜索，那么此时就会先到索引树里根据name字段的前20个字符去搜索，定位到之后前20个字符的前缀匹配的部分数据之后，再回到聚簇索引提取出来完整的name字段值进行比对。 </p><p>但是假如你要是order by name，那么此时你的name因为在索引树里仅仅包含了前20个字符，所以这个排序是没法用上索引的， group by也是同理。所以这里大家要对前缀索引有一个了解。</p><p><strong>5. where与order by冲突时优先where</strong> </p><p>一般这种时候往往都是让where条件去使用索引来快速筛选出来一部分指定的数据，接着再进行排序。 </p><p>因为大多数情况基于索引进行where筛选往往可以最快速度筛选出你要的少部分数据，然后做排序的成本可能会小很多。</p><p><strong>6. 基于慢sql查询做优化</strong> </p><p>可以根据监控后台的一些慢sql，针对这些慢sql查询做特定的索引优化。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-优化一</title>
      <link href="/posts/mysql-family/4/"/>
      <url>/posts/mysql-family/4/</url>
      
        <content type="html"><![CDATA[<p>预置表数据：</p><pre class=" language-java"><code class="language-java">CREATE TABLE `employees` <span class="token punctuation">(</span>    `id` <span class="token function">INT</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT<span class="token punctuation">,</span>    `name` <span class="token function">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">24</span> <span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">''</span> COMMENT <span class="token string">'姓名'</span><span class="token punctuation">,</span>    `age` <span class="token function">INT</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'年龄'</span><span class="token punctuation">,</span>    `position` <span class="token function">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">''</span> COMMENT <span class="token string">'职位'</span><span class="token punctuation">,</span>    `hire_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class="token string">'入职时间'</span><span class="token punctuation">,</span>    PRIMARY <span class="token function">KEY</span> <span class="token punctuation">(</span> `id` <span class="token punctuation">)</span><span class="token punctuation">,</span>    KEY `idx_name_age_position` <span class="token punctuation">(</span> `name`<span class="token punctuation">,</span> `age`<span class="token punctuation">,</span> `position` <span class="token punctuation">)</span> USING BTREE <span class="token punctuation">)</span> ENGINE <span class="token operator">=</span> INNODB AUTO_INCREMENT <span class="token operator">=</span> <span class="token number">4</span> DEFAULT CHARSET <span class="token operator">=</span> utf8 COMMENT <span class="token operator">=</span> <span class="token string">'员工记录表'</span><span class="token punctuation">;</span>INSERT INTO <span class="token function">employees</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">'LiLei'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'manager'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token function">employees</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">'HanMeimei'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'dev'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token function">employees</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">'Lucy'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'dev'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>drop procedure <span class="token keyword">if</span> exists insert_emp<span class="token punctuation">;</span> delimiter <span class="token punctuation">;</span><span class="token punctuation">;</span>create procedure <span class="token function">insert_emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        begin  declare i <span class="token keyword">int</span><span class="token punctuation">;</span>                      set i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token keyword">do</span>                     insert into <span class="token function">employees</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">)</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token function">CONCAT</span><span class="token punctuation">(</span><span class="token string">'gax'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      set i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                         end <span class="token keyword">while</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span><span class="token punctuation">;</span>delimiter <span class="token punctuation">;</span>call <span class="token function">insert_emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><span id="more"></span><h2 id="举几个例子分析"><a href="#举几个例子分析" class="headerlink" title="举几个例子分析"></a>举几个例子分析</h2><p><strong>1. 联合索引第一个字段用范围</strong></p><p><img src="/images/mysql/opt-1.png" alt="opt-1"></p><p><img src="/images/mysql/opt-2.png" alt="opt-2"></p><p>我的理解：联合索引第一个字段使用范围查找时，后续联合索引列失效。MySQL根据自己的规则分析，以上第一条SQL查找结果略小于全表数据，MySQL认为全表扫描效率更高；第二条SQL查找的数据远远小于全表数据，MySQL认为使用索引查找效率更高。<font color="red">是否使用索引由MySQL决定，可以通过trace工具来查看，MySQL会选出全表扫描或索引查找中消耗更小的一个。</font></p><p><strong>2. 强制走索引</strong></p><p><img src="/images/mysql/opt-3.png" alt="opt-3"></p><p><img src="/images/mysql/opt-4.png" alt="opt-4"></p><p>对比以上两个SQL得到结论：虽然使用了强制走索引让联合索引第一个字段范围查找也走索引，扫描的行rows看上去也少了点，但是最终查找效率不一定比全表扫描高，因为回表效率不高。<font color="red">不建议强制使用索引，由MySQL默认选择即可</font></p><p><strong>3. 覆盖索引优化</strong></p><p><img src="/images/mysql/opt-5.png" alt="opt-5"></p><p>对于上面范围查找使用全表扫描的情况，可以使用<strong>覆盖索引</strong>优化，结果数据在联合索引的索引树上可以直接找到，<strong>不需要回表</strong>查找</p><p><strong>4. in和or在表数据量比较大的情况会走索引，在表记录不多的情况下会选择全表扫描</strong></p><p><img src="/images/mysql/opt-6.png" alt="opt-6"></p><p><img src="/images/mysql/opt-7.png" alt="opt-7"></p><p><img src="/images/mysql/opt-8.png" alt="opt-8"></p><p><img src="/images/mysql/opt-9.png" alt="opt-9"></p><p>将employees 表复制一张employees_copy的表，里面保留三条记录，可以验证第4点</p><pre class=" language-java"><code class="language-java">CREATE TABLE `employees_copy` <span class="token punctuation">(</span>    `id` <span class="token function">INT</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT<span class="token punctuation">,</span>    `name` <span class="token function">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">24</span> <span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">''</span> COMMENT <span class="token string">'姓名'</span><span class="token punctuation">,</span>    `age` <span class="token function">INT</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'年龄'</span><span class="token punctuation">,</span>    `position` <span class="token function">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">''</span> COMMENT <span class="token string">'职位'</span><span class="token punctuation">,</span>    `hire_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class="token string">'入职时间'</span><span class="token punctuation">,</span>    PRIMARY <span class="token function">KEY</span> <span class="token punctuation">(</span> `id` <span class="token punctuation">)</span><span class="token punctuation">,</span>    KEY `idx_name_age_position` <span class="token punctuation">(</span> `name`<span class="token punctuation">,</span> `age`<span class="token punctuation">,</span> `position` <span class="token punctuation">)</span> USING BTREE <span class="token punctuation">)</span> ENGINE <span class="token operator">=</span> INNODB AUTO_INCREMENT <span class="token operator">=</span> <span class="token number">4</span> DEFAULT CHARSET <span class="token operator">=</span> utf8 COMMENT <span class="token operator">=</span> <span class="token string">'员工记录表'</span><span class="token punctuation">;</span>INSERT INTO <span class="token function">employees_copy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">'LiLei'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'manager'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token function">employees_copy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">'HanMeimei'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'dev'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token function">employees_copy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">'Lucy'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'dev'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>5. like KK% 一般情况都会走索引</strong></p><p><img src="/images/mysql/opt-10.png" alt="opt-10"></p><p><img src="/images/mysql/opt-11.png" alt="opt-11"></p><p>注意：这里的模糊查询<strong>like 后面不是以通配符开始</strong>的</p><p>这里补充一个概念，<strong>索引下推（Index Condition Pushdown，ICP）</strong>, like KK%其实就是用到了索引下推优化</p><h3 id="什么是索引下推了？"><a href="#什么是索引下推了？" class="headerlink" title="什么是索引下推了？"></a>什么是索引下推了？</h3><p>对于辅助的联合索引(name,age,position)，正常情况按照最左前缀原则，<strong>SELECT * FROM employees WHERE name like ‘LiLei%’ AND age = 22 AND position =’manager’</strong>  这种情况只会走name字段索引，因为根据name字段过滤完，得到的索引行里的age和position是无序的，无法很好的利用索引。</p><p>在MySQL5.6之前的版本，这个查询只能在联合索引里匹配到名字是 <strong>‘LiLei’ 开头</strong>的索引，然后拿这些索引对应的主键逐个回表，到主键索引上找出相应的记录，再比对<strong>age</strong>和<strong>position</strong>这两个字段的值是否符合。</p><p>MySQL 5.6引入了索引下推优化，<strong>可以在索引遍历过程中，对索引中包含的所有字段先做判断，过滤掉不符合条件的记录之后再回表，可以有效的减少回表次数</strong>。使用了索引下推优化后，上面那个查询在联合索引里匹配到名字是 <strong>‘LiLei’ 开头</strong>的索引之后，同时还会在索引里过滤<strong>age</strong>和<strong>position</strong>这两个字段，拿着过滤完剩下的索引对应的主键id再回表查整行数据。</p><p>索引下推会<strong>减少回表次数</strong>，对于<strong>innodb引擎的表索引下推只能用于二级索引</strong>，innodb的主键索引（聚簇索引）树叶子节点上保存的是全行数据，所以这个时候索引下推并不会起到减少查询全行数据的效果。</p><p><strong>为什么范围查找Mysql没有用索引下推优化？</strong></p><p>估计应该是MySQL认为范围查找过滤的结果集过大，like KK% 在绝大多数情况来看，过滤后的结果集比较小，所以这里MySQL选择给 like KK% 用了索引下推优化，当然这也不是绝对的，有时like KK% 也不一定就会走索引下推。</p><h2 id="Mysql如何选择合适的索引"><a href="#Mysql如何选择合适的索引" class="headerlink" title="Mysql如何选择合适的索引"></a>Mysql如何选择合适的索引</h2><p><img src="/images/mysql/opt-12.png" alt="opt-12"></p><p><img src="/images/mysql/opt-13.png" alt="opt-13"></p><p><img src="/images/mysql/opt-14.png" alt="opt-14"></p><p>总结：如果用name索引需要遍历name字段联合索引树，然后还需要根据遍历出来的主键值去主键索引树里再去查出最终数据，成本比全表扫描还高，可以用覆盖索引优化，这样只需要遍历name字段的联合索引树就能拿到所有结果。</p><p>另外对于上面这两种 name&gt;’a’ 和 name&gt;’zzz’ 的执行结果，mysql最终是否选择走索引或者一张表涉及多个索引，mysql最终如何选择索引，我们可以用<strong>trace工具</strong>来一查究竟，开启trace工具会影响mysql性能，所以只能临时分析sql使用，用完之后立即关闭。</p><h3 id="trace工具用法："><a href="#trace工具用法：" class="headerlink" title="trace工具用法："></a>trace工具用法：</h3><p><img src="/images/mysql/opt-15.png" alt="opt-15"></p><p>注意：上图第二步两条SQL要一起执行，才能得到分析后的<strong>TRACE</strong>，TRACE分析如下：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span>  <span class="token string">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"join_preparation"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token operator">--</span> 第一阶段：SQL准备 格式化SQL        <span class="token string">"select#"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token string">"expanded_query"</span><span class="token operator">:</span> <span class="token string">"/* select#1 */ select `employees`.`id` AS `id`,`employees`.`name` AS `name`,`employees`.`age` AS `age`,`employees`.`position` AS `position`,`employees`.`hire_time` AS `hire_time` from `employees` where (`employees`.`name` > 'a') order by `employees`.`position`"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* steps */</span>      <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* join_preparation */</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"join_optimization"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token operator">--</span> 第二阶段：SQL优化阶段        <span class="token string">"select#"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token string">"condition_processing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token operator">--</span> 条件处理              <span class="token string">"condition"</span><span class="token operator">:</span> <span class="token string">"WHERE"</span><span class="token punctuation">,</span>              <span class="token string">"original_condition"</span><span class="token operator">:</span> <span class="token string">"(`employees`.`name` > 'a')"</span><span class="token punctuation">,</span>              <span class="token string">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                  <span class="token string">"transformation"</span><span class="token operator">:</span> <span class="token string">"equality_propagation"</span><span class="token punctuation">,</span>                  <span class="token string">"resulting_condition"</span><span class="token operator">:</span> <span class="token string">"(`employees`.`name` > 'a')"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  <span class="token string">"transformation"</span><span class="token operator">:</span> <span class="token string">"constant_propagation"</span><span class="token punctuation">,</span>                  <span class="token string">"resulting_condition"</span><span class="token operator">:</span> <span class="token string">"(`employees`.`name` > 'a')"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  <span class="token string">"transformation"</span><span class="token operator">:</span> <span class="token string">"trivial_condition_removal"</span><span class="token punctuation">,</span>                  <span class="token string">"resulting_condition"</span><span class="token operator">:</span> <span class="token string">"(`employees`.`name` > 'a')"</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* steps */</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* condition_processing */</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"substitute_generated_columns"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* substitute_generated_columns */</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"table_dependencies"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token operator">--</span> 表依赖详情              <span class="token punctuation">{</span>                <span class="token string">"table"</span><span class="token operator">:</span> <span class="token string">"`employees`"</span><span class="token punctuation">,</span>                <span class="token string">"row_may_be_null"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token string">"map_bit"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token string">"depends_on_map_bits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* depends_on_map_bits */</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* table_dependencies */</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"ref_optimizer_key_uses"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* ref_optimizer_key_uses */</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"rows_estimation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token operator">--</span> 预估表的访问成本              <span class="token punctuation">{</span>                <span class="token string">"table"</span><span class="token operator">:</span> <span class="token string">"`employees`"</span><span class="token punctuation">,</span>                <span class="token string">"range_analysis"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token string">"table_scan"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token operator">--</span> 全表扫描情况                    <span class="token string">"rows"</span><span class="token operator">:</span> <span class="token number">99988</span><span class="token punctuation">,</span> <span class="token operator">--</span> 扫描行数                    <span class="token string">"cost"</span><span class="token operator">:</span> <span class="token number">20289</span>  <span class="token operator">--</span> 查询成本                  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* table_scan */</span><span class="token punctuation">,</span>                  <span class="token string">"potential_range_indexes"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token operator">--</span> 查询可能使用的索引                    <span class="token punctuation">{</span>                      <span class="token string">"index"</span><span class="token operator">:</span> <span class="token string">"PRIMARY"</span><span class="token punctuation">,</span>  <span class="token operator">--</span> 主键索引                      <span class="token string">"usable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                      <span class="token string">"cause"</span><span class="token operator">:</span> <span class="token string">"not_applicable"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                      <span class="token string">"index"</span><span class="token operator">:</span> <span class="token string">"idx_name_age_position"</span><span class="token punctuation">,</span>  <span class="token operator">--</span> 辅助索引                      <span class="token string">"usable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                      <span class="token string">"key_parts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"name"</span><span class="token punctuation">,</span>                        <span class="token string">"age"</span><span class="token punctuation">,</span>                        <span class="token string">"position"</span><span class="token punctuation">,</span>                        <span class="token string">"id"</span>                      <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* key_parts */</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* potential_range_indexes */</span><span class="token punctuation">,</span>                  <span class="token string">"setup_range_conditions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* setup_range_conditions */</span><span class="token punctuation">,</span>                  <span class="token string">"group_index_range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token string">"chosen"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    <span class="token string">"cause"</span><span class="token operator">:</span> <span class="token string">"not_group_by_or_distinct"</span>                  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* group_index_range */</span><span class="token punctuation">,</span>                  <span class="token string">"analyzing_range_alternatives"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token operator">--</span> 分析各个索引使用成本                    <span class="token string">"range_scan_alternatives"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                      <span class="token punctuation">{</span>                        <span class="token string">"index"</span><span class="token operator">:</span> <span class="token string">"idx_name_age_position"</span><span class="token punctuation">,</span>                        <span class="token string">"ranges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                          <span class="token string">"a &lt; name"</span>  <span class="token operator">--</span> 索引使用范围                        <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* ranges */</span><span class="token punctuation">,</span>                        <span class="token string">"index_dives_for_eq_ranges"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token string">"rowid_ordered"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token operator">--</span> 使用该索引获取的记录是否按照主键排序                        <span class="token string">"using_mrr"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token string">"index_only"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>     <span class="token operator">--</span> 是否覆盖索引                        <span class="token string">"rows"</span><span class="token operator">:</span> <span class="token number">49994</span><span class="token punctuation">,</span>           <span class="token operator">--</span> 索引扫描行数                        <span class="token string">"cost"</span><span class="token operator">:</span> <span class="token number">59994</span><span class="token punctuation">,</span>           <span class="token operator">--</span> 索引使用成本                        <span class="token string">"chosen"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token operator">--</span> 是否选择该索引                        <span class="token string">"cause"</span><span class="token operator">:</span> <span class="token string">"cost"</span>                      <span class="token punctuation">}</span>                    <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* range_scan_alternatives */</span><span class="token punctuation">,</span>                    <span class="token string">"analyzing_roworder_intersect"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token string">"usable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                      <span class="token string">"cause"</span><span class="token operator">:</span> <span class="token string">"too_few_roworder_scans"</span>                    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* analyzing_roworder_intersect */</span>                  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* analyzing_range_alternatives */</span>                <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* range_analysis */</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* rows_estimation */</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"considered_execution_plans"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token string">"plan_prefix"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* plan_prefix */</span><span class="token punctuation">,</span>                <span class="token string">"table"</span><span class="token operator">:</span> <span class="token string">"`employees`"</span><span class="token punctuation">,</span>                <span class="token string">"best_access_path"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token operator">--</span> 最优访问路径                  <span class="token string">"considered_access_paths"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token operator">--</span> 考虑<span class="token operator">/</span>最终选择的访问路径                    <span class="token punctuation">{</span>                      <span class="token string">"rows_to_scan"</span><span class="token operator">:</span> <span class="token number">99988</span><span class="token punctuation">,</span>                      <span class="token string">"access_type"</span><span class="token operator">:</span> <span class="token string">"scan"</span><span class="token punctuation">,</span>  <span class="token operator">--</span> 访问类型，全表扫描                      <span class="token string">"resulting_rows"</span><span class="token operator">:</span> <span class="token number">99988</span><span class="token punctuation">,</span>                      <span class="token string">"cost"</span><span class="token operator">:</span> <span class="token number">20287</span><span class="token punctuation">,</span>                      <span class="token string">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token operator">--</span> 确认选择                      <span class="token string">"use_tmp_table"</span><span class="token operator">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* considered_access_paths */</span>                <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* best_access_path */</span><span class="token punctuation">,</span>                <span class="token string">"condition_filtering_pct"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>                <span class="token string">"rows_for_plan"</span><span class="token operator">:</span> <span class="token number">99988</span><span class="token punctuation">,</span>                <span class="token string">"cost_for_plan"</span><span class="token operator">:</span> <span class="token number">20287</span><span class="token punctuation">,</span>                <span class="token string">"sort_cost"</span><span class="token operator">:</span> <span class="token number">99988</span><span class="token punctuation">,</span>                <span class="token string">"new_cost_for_plan"</span><span class="token operator">:</span> <span class="token number">120275</span><span class="token punctuation">,</span>                <span class="token string">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* considered_execution_plans */</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"attaching_conditions_to_tables"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"original_condition"</span><span class="token operator">:</span> <span class="token string">"(`employees`.`name` > 'a')"</span><span class="token punctuation">,</span>              <span class="token string">"attached_conditions_computation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* attached_conditions_computation */</span><span class="token punctuation">,</span>              <span class="token string">"attached_conditions_summary"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                  <span class="token string">"table"</span><span class="token operator">:</span> <span class="token string">"`employees`"</span><span class="token punctuation">,</span>                  <span class="token string">"attached"</span><span class="token operator">:</span> <span class="token string">"(`employees`.`name` > 'a')"</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* attached_conditions_summary */</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* attaching_conditions_to_tables */</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"clause_processing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"clause"</span><span class="token operator">:</span> <span class="token string">"ORDER BY"</span><span class="token punctuation">,</span>              <span class="token string">"original_clause"</span><span class="token operator">:</span> <span class="token string">"`employees`.`position`"</span><span class="token punctuation">,</span>              <span class="token string">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                  <span class="token string">"item"</span><span class="token operator">:</span> <span class="token string">"`employees`.`position`"</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* items */</span><span class="token punctuation">,</span>              <span class="token string">"resulting_clause_is_simple"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token string">"resulting_clause"</span><span class="token operator">:</span> <span class="token string">"`employees`.`position`"</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* clause_processing */</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"reconsidering_access_paths_for_index_ordering"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"clause"</span><span class="token operator">:</span> <span class="token string">"ORDER BY"</span><span class="token punctuation">,</span>              <span class="token string">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* steps */</span><span class="token punctuation">,</span>              <span class="token string">"index_order_summary"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token string">"table"</span><span class="token operator">:</span> <span class="token string">"`employees`"</span><span class="token punctuation">,</span>                <span class="token string">"index_provides_order"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token string">"order_direction"</span><span class="token operator">:</span> <span class="token string">"undefined"</span><span class="token punctuation">,</span>                <span class="token string">"index"</span><span class="token operator">:</span> <span class="token string">"unknown"</span><span class="token punctuation">,</span>                <span class="token string">"plan_changed"</span><span class="token operator">:</span> <span class="token boolean">false</span>              <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* index_order_summary */</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* reconsidering_access_paths_for_index_ordering */</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token string">"refine_plan"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token string">"table"</span><span class="token operator">:</span> <span class="token string">"`employees`"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* refine_plan */</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* steps */</span>      <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* join_optimization */</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"join_execution"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token operator">--</span> 第三阶段：SQL执行阶段        <span class="token string">"select#"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token string">"filesort_information"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token string">"direction"</span><span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">,</span>                <span class="token string">"table"</span><span class="token operator">:</span> <span class="token string">"`employees`"</span><span class="token punctuation">,</span>                <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"position"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* filesort_information */</span><span class="token punctuation">,</span>            <span class="token string">"filesort_priority_queue_optimization"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"usable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token string">"cause"</span><span class="token operator">:</span> <span class="token string">"not applicable (no LIMIT)"</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* filesort_priority_queue_optimization */</span><span class="token punctuation">,</span>            <span class="token string">"filesort_execution"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* filesort_execution */</span><span class="token punctuation">,</span>            <span class="token string">"filesort_summary"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token string">"rows"</span><span class="token operator">:</span> <span class="token number">100003</span><span class="token punctuation">,</span>              <span class="token string">"examined_rows"</span><span class="token operator">:</span> <span class="token number">100003</span><span class="token punctuation">,</span>              <span class="token string">"number_of_tmp_files"</span><span class="token operator">:</span> <span class="token number">29</span><span class="token punctuation">,</span>              <span class="token string">"sort_buffer_size"</span><span class="token operator">:</span> <span class="token number">262016</span><span class="token punctuation">,</span>              <span class="token string">"sort_mode"</span><span class="token operator">:</span> <span class="token string">"&lt;sort_key, packed_additional_fields>"</span>            <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* filesort_summary */</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* steps */</span>      <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* join_execution */</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span> <span class="token comment" spellcheck="true">/* steps */</span><span class="token punctuation">}</span></code></pre><p>结论：全表扫描的成本低于索引扫描，所以mysql最终选择全表扫描  </p><p>注意：trace分析中的cost消耗是关键，MySQL会选择消耗小的方案去执行。cost分数是MySQL根据内部算法得到的，并非真正的执行一遍SQL获取数据。</p><p>找到一个不错的总结：（参考自文章：<a href="https://www.modb.pro/db/409873">MySQL之explain extra字段解析 - 墨天轮 (modb.pro)</a>）</p><table><thead><tr><th align="left">extra</th><th align="center">where条件</th><th align="center">select的字段</th></tr></thead><tbody><tr><td align="left">null</td><td align="center">where筛选条件是索引的前导列</td><td align="center">查询的列未被索引覆盖</td></tr><tr><td align="left">Using index</td><td align="center">where筛选条件是索引的前导列</td><td align="center">查询的列被索引覆盖</td></tr><tr><td align="left">Using where; Using index</td><td align="center">where筛选条件是索引列之一但不是前导列或者where筛选条件是索引列前导列的一个范围</td><td align="center">查询的列被索引覆盖</td></tr><tr><td align="left">Using where;</td><td align="center">where筛选条件不是索引列</td><td align="center">-</td></tr><tr><td align="left">Using where;</td><td align="center">where筛选条件不是索引前导列、是索引列前导列的一个范围</td><td align="center">查询列未被索引覆盖</td></tr><tr><td align="left">Using index condition</td><td align="center">where索引列前导列的一个范围</td><td align="center">查询列未被索引覆盖</td></tr></tbody></table><p>注意：这里<strong>where索引列前导列的一个范围，可能是Using where; 也可能是Using index condition</strong></p><table><thead><tr><th align="left">extra</th><th align="center">出现场景</th></tr></thead><tbody><tr><td align="left">Using filesort</td><td align="center">filesort主要用于查询数据结果集的排序操作，首先MySQL会使用sort_buffer_size大小的内存进行排序，如果结果集超过了sort_buffer_size大小，会把这一个排序后的chunk转移到file上，最后使用多路归并排序完成所有数据的排序操作。</td></tr><tr><td align="left">Using temporary</td><td align="center">MySQL使用临时表保存临时的结构，以用于后续的处理，MySQL首先创建heap引擎的临时表，如果临时的数据过多，超过max_heap_table_size的大小，会自动把临时表转换成MyISAM引擎的表来使用。</td></tr></tbody></table><p>两者的不同：<br>filesort只能应用在<strong>单个表</strong>上，如果有<strong>多个表</strong>的数据需要排序，那么MySQL会先使用using temporary保存临时数据，然后再在临时表上使用filesort进行排序，最后输出结果。</p><p><strong>什么是索引前导列</strong></p><p>所谓前导列，就是在创建复合索引语句的第一列或者连续的多列。比如通过：CREATE INDEX idx_combine ON table_a(x, y, z)创建索引，那么x,xy,xyz都是前导列，而yz，y，z这样的就不是。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-索引优化实践</title>
      <link href="/posts/mysql-family/3/"/>
      <url>/posts/mysql-family/3/</url>
      
        <content type="html"><![CDATA[<p>预置表数据：</p><pre class=" language-java"><code class="language-java">CREATE TABLE `employees` <span class="token punctuation">(</span>    `id` <span class="token function">INT</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT<span class="token punctuation">,</span>    `name` <span class="token function">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">24</span> <span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">''</span> COMMENT <span class="token string">'姓名'</span><span class="token punctuation">,</span>    `age` <span class="token function">INT</span> <span class="token punctuation">(</span> <span class="token number">11</span> <span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'0'</span> COMMENT <span class="token string">'年龄'</span><span class="token punctuation">,</span>    `position` <span class="token function">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">''</span> COMMENT <span class="token string">'职位'</span><span class="token punctuation">,</span>    `hire_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class="token string">'入职时间'</span><span class="token punctuation">,</span>    PRIMARY <span class="token function">KEY</span> <span class="token punctuation">(</span> `id` <span class="token punctuation">)</span><span class="token punctuation">,</span>    KEY `idx_name_age_position` <span class="token punctuation">(</span> `name`<span class="token punctuation">,</span> `age`<span class="token punctuation">,</span> `position` <span class="token punctuation">)</span> USING BTREE <span class="token punctuation">)</span> ENGINE <span class="token operator">=</span> INNODB AUTO_INCREMENT <span class="token operator">=</span> <span class="token number">4</span> DEFAULT CHARSET <span class="token operator">=</span> utf8 COMMENT <span class="token operator">=</span> <span class="token string">'员工记录表'</span><span class="token punctuation">;</span>INSERT INTO <span class="token function">employees</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">'LiLei'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'manager'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token function">employees</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">'HanMeimei'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'dev'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token function">employees</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>position<span class="token punctuation">,</span>hire_time<span class="token punctuation">)</span> <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">'Lucy'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'dev'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><span id="more"></span><p><strong>1. 全值匹配</strong></p><p>查询条件 = 确切的值</p><p><img src="/images/mysql/idx-1.png" alt="idx-1"></p><p><img src="/images/mysql/idx-2.png" alt="idx-2"></p><p><img src="/images/mysql/idx-3.png" alt="idx-3"></p><p>根据key_len计算规则：</p><p>字符串类型varchar(n)：如果存汉字则长度是 3n + 2 字节</p><p>数值类型int：4字节</p><p>name：<code>24*3+2 = 74</code>字节，age：<code>4</code>字节，position：<code>20*3+2 = 62</code>字节</p><p><strong>2. 最左前缀法则</strong></p><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</p><p><img src="/images/mysql/idx-4.png" alt="idx-4"></p><p><img src="/images/mysql/idx-5.png" alt="idx-5"></p><p><img src="/images/mysql/idx-6.png" alt="idx-6"></p><p>总结：查询1满足最左前列法则可以使用索引，查询2和3跳过索引中的列查询导致索引失效</p><p><strong>3. 不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</strong></p><p><img src="/images/mysql/idx-7.png" alt="idx-7"></p><p><img src="/images/mysql/idx-8.png" alt="idx-8"></p><p>转化为日期范围查询，有可能会走索引：</p><p><img src="/images/mysql/idx-9.png" alt="idx-9"></p><p>总结：查询语句是否走索引和索引的结构息息相关，<strong>排好序</strong></p><p><strong>4. 存储引擎不能使用索引中范围条件右边的列</strong></p><p><img src="/images/mysql/idx-10.png" alt="idx-10"></p><p><strong>5. 尽量使用覆盖索引（只访问索引的查询（索引列包含查询列）），减少 select * 语句</strong></p><p><img src="/images/mysql/idx-11.png" alt="idx-11"></p><p><strong>6. MySQL在使用不等于（!=或者&lt;&gt;），not in ，not exists 的时候无法使用索引会导致全表扫描 &lt; 小于、 &gt; 大于、 &lt;=、&gt;= 这些，MySQL内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引</strong></p><p><img src="/images/mysql/idx-12.png" alt="idx-12"></p><p><strong>7. is null,is not null 一般情况下也无法使用索引</strong></p><p><img src="/images/mysql/idx-13.png" alt="idx-13"></p><p><strong>8. like以通配符开头（’$abc…’）mysql索引失效会变成全表扫描操作</strong></p><p><img src="/images/mysql/idx-14.png" alt="idx-14"></p><p><img src="/images/mysql/idx-15.png" alt="idx-15"></p><p>问题：解决like’%字符串%’索引不被使用的方法？ </p><p>a）使用覆盖索引，查询字段必须是建立覆盖索引字段</p><p>b）如果不能使用覆盖索引则可能需要借助搜索引擎</p><p><strong>9. 字符串不加单引号索引失效</strong></p><p><img src="/images/mysql/idx-16.png" alt="idx-16"></p><p><strong>10. 少用or或in，用它查询时，MySQL不一定使用索引，MySQL内部优化器会根据检索比例、表大小等多个因素整体评估 是否使用索引，详见范围查询优化</strong></p><p><img src="/images/mysql/idx-17.png" alt="idx-17"></p><p><strong>11. 范围查询优化</strong></p><p><img src="/images/mysql/idx-18.png" alt="idx-18"></p><p>没走索引原因：mysql内部优化器会根据检索比例、表大小等多个因素整体评估是否使用索引。比如这个例子，可能是由 于单次数据量查询过大导致优化器最终选择不走索引 </p><p>优化方法：可以将大的范围拆分成多个小范围</p><p><img src="/images/mysql/idx-19.png" alt="idx-19"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-Explain</title>
      <link href="/posts/mysql-family/2/"/>
      <url>/posts/mysql-family/2/</url>
      
        <content type="html"><![CDATA[<h2 id="Explain工具是什么？"><a href="#Explain工具是什么？" class="headerlink" title="Explain工具是什么？"></a>Explain工具是什么？</h2><p>是MySQL提供的工具，在select前添加explain关键字，会返回执行计划信息，而不是执行SQL</p><p>可以用来分析SQL的执行情况，比如使用哪些索引，扫描哪些行…</p><p>注意：如果from包含子查询，仍会执行该子查询，查询结果放入到临时表中</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html">Explain官网入口</a></p><span id="more"></span><p>辅助学习理解预置表数据：</p><pre class=" language-java"><code class="language-java">DROP TABLE IF EXISTS `actor`<span class="token punctuation">;</span>CREATE TABLE `actor` <span class="token punctuation">(</span>`id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">,</span>`name` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span> DEFAULT NULL<span class="token punctuation">,</span>`update_time` datetime DEFAULT NULL<span class="token punctuation">,</span>PRIMARY <span class="token function">KEY</span> <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE<span class="token operator">=</span>InnoDB DEFAULT CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>INSERT INTO `actor` <span class="token punctuation">(</span>`id`<span class="token punctuation">,</span> `name`<span class="token punctuation">,</span> `update_time`<span class="token punctuation">)</span> <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'2017-12-22 15:27:18'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'2017-12-22 15:27:18'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'2017-12-22 15:27:18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DROP TABLE IF EXISTS `film`<span class="token punctuation">;</span>CREATE TABLE `film` <span class="token punctuation">(</span>`id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT<span class="token punctuation">,</span>`name` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> DEFAULT NULL<span class="token punctuation">,</span>PRIMARY <span class="token function">KEY</span> <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">,</span>KEY `idx_name` <span class="token punctuation">(</span>`name`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE<span class="token operator">=</span>InnoDB DEFAULT CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>INSERT INTO `film` <span class="token punctuation">(</span>`id`<span class="token punctuation">,</span> `name`<span class="token punctuation">)</span> <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'film0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'film1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'film2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DROP TABLE IF EXISTS `film_actor`<span class="token punctuation">;</span>CREATE TABLE `film_actor` <span class="token punctuation">(</span>`id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">,</span>`film_id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">,</span>`actor_id` <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL<span class="token punctuation">,</span>`remark` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> DEFAULT NULL<span class="token punctuation">,</span>PRIMARY <span class="token function">KEY</span> <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">,</span>KEY `idx_film_actor_id` <span class="token punctuation">(</span>`film_id`<span class="token punctuation">,</span>`actor_id`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE<span class="token operator">=</span>InnoDB DEFAULT CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>INSERT INTO `film_actor` <span class="token punctuation">(</span>`id`<span class="token punctuation">,</span> `film_id`<span class="token punctuation">,</span> `actor_id`<span class="token punctuation">)</span> <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Explain怎么用？"><a href="#Explain怎么用？" class="headerlink" title="Explain怎么用？"></a>Explain怎么用？</h2><p>在select查询语句前面加上<code>explain</code>关键字即可，sql语句中每有一个select关键字就会输出一行类似执行计划的信息</p><p><img src="/images/mysql/explain-1.png" alt="explain-1"></p><p><img src="/images/mysql/explain-2.png" alt="explain-2"></p><p><strong>explain 两个变种</strong></p><p>a) <strong>explain extended</strong>：额外提供一些优化信息。紧随其后通过 show warnings 命令可以 得到优化后的查询语句，从而看出优化器优化了什么。额外还有 filtered 列，是一个百分比的值，rows * filtered/100 可以<strong>估算出将要和 explain 中前一个表进行连接的行数</strong>（前一个表指 explain 中的id值比当前表id值小的表，id值越大执行的优先级越高，id相同从上往下执行，注意这里的id并非主键）</p><p>b) <strong>explain partitions</strong>：多了个 partitions 字段，如果查询是基于分区表的话，会显示查询将访问的分 区</p><p>我的MySQL5.7版本添加explain默认展示了filtered 和partitions 列，extended和partitions关键字未来版本可能会被移除</p><p>explain输出结果每一列的含义，截取官网描述如下：</p><p><strong>Table 8.1 EXPLAIN Output Columns</strong></p><table><thead><tr><th align="left">Column</th><th align="left">JSON Name</th><th align="left">Meaning</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_id"><code>id</code></a></td><td align="left"><code>select_id</code></td><td align="left">The <code>SELECT</code> identifier</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_select_type"><code>select_type</code></a></td><td align="left">None</td><td align="left">The <code>SELECT</code> type</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_table"><code>table</code></a></td><td align="left"><code>table_name</code></td><td align="left">The table for the output row</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_partitions"><code>partitions</code></a></td><td align="left"><code>partitions</code></td><td align="left">The matching partitions</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_type"><code>type</code></a></td><td align="left"><code>access_type</code></td><td align="left">The join type</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_possible_keys"><code>possible_keys</code></a></td><td align="left"><code>possible_keys</code></td><td align="left">The possible indexes to choose</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_key"><code>key</code></a></td><td align="left"><code>key</code></td><td align="left">The index actually chosen</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_key_len"><code>key_len</code></a></td><td align="left"><code>key_length</code></td><td align="left">The length of the chosen key</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_ref"><code>ref</code></a></td><td align="left"><code>ref</code></td><td align="left">The columns compared to the index</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_rows"><code>rows</code></a></td><td align="left"><code>rows</code></td><td align="left">Estimate of rows to be examined</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_filtered"><code>filtered</code></a></td><td align="left"><code>filtered</code></td><td align="left">Percentage of rows filtered by table condition</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain_extra"><code>Extra</code></a></td><td align="left">None</td><td align="left">Additional information</td></tr></tbody></table><h2 id="explain中的列详细介绍"><a href="#explain中的列详细介绍" class="headerlink" title="explain中的列详细介绍"></a>explain中的列详细介绍</h2><p><strong>1. id列</strong> </p><p>id列的编号是 select 的序列号，有几个 select 就有几个id，并且id的顺序是按 select 出现的顺序增长的。 id列越大执行优先级越高，id相同则从上往下执行，id为NULL最后执行。</p><p><strong>2. select_type列</strong></p><p> select_type 表示对应行是简单还是复杂的查询。</p><p><img src="/images/mysql/explain-3.png" alt="explain-3"></p><p>1）simple：简单查询。查询不包含子查询和union </p><p>2）primary：复杂查询中最外层的 select </p><p>3）subquery：包含在 select 中的子查询（不在 from 子句中） </p><p>4）derived：包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为派生表</p><p>5）union：在 union 中的第二个和随后的 select</p><p><img src="/images/mysql/explain-4.png" alt="explain-4"></p><p><strong>3. table列</strong> </p><p>这一列表示 explain 的一行正在访问哪个表。 当 from 子句中有子查询时，table列是<code>&lt;derivenN&gt;</code>格式，表示当前查询依赖 id=N 的查询，于是先执行 id=N 的查询。 当有 union 时，UNION RESULT 的 table 列的值为<code>&lt;union1,2&gt;</code>，1和2表示参与 union 的 select 行id。</p><p><strong>4. partitions列</strong> </p><p>如果查询是基于分区表的话，partitions 字段会显示查询将访问的分区。</p><p><strong>5. type列</strong> </p><p>这一列表示关联类型或访问类型，即MySQL决定如何查找表中的行，查找数据行记录的大概范围。 </p><p>依次从最优到最差分别为：<font color="red">system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</font> </p><p>一般来说，<font color="red">得保证查询达到range级别，最好达到ref </font></p><p><strong>NULL</strong>：mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。例如：在索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表（目标数据在主键索引树和二级索引树同时存在时，优先用二级索引树去查，因为二级索引树没有保存全部数据，更轻量效率高）</p><p><img src="/images/mysql/explain-5.png" alt="explain-5"></p><p><strong>const, system</strong>：mysql能对查询的某部分进行优化并将其转化成一个常量。用于 primary key 或 unique key 的所有列与常数比较时，所有表最多有一个匹配行，读取1次速度比较快。</p><p><strong>system是 const的特例</strong>，表里只有一条记录匹配时为system</p><p><img src="/images/mysql/explain-6.png" alt="explain-6"></p><p><strong>eq_ref</strong>：primary key 或 unique key 索引的所有部分被连接使用 ，最多只会返回一条符合条件的记录。</p><p><img src="/images/mysql/explain-7.png" alt="explain-7"></p><p><strong>ref</strong>：相比 eq_ref，不使用唯一索引，而是使用普通索引或者唯一索引的部分前缀，索引要和某个值相比较，可能会找到多个符合条件的行。</p><p>简单 select 查询，name是普通索引（非唯一索引）：</p><p><img src="/images/mysql/explain-8.png" alt="explain-8"></p><p>关联表查询，idx_film_actor_id是film_id和actor_id的联合索引，这里使用到了film_actor的左边前缀film_id部分：</p><p><img src="/images/mysql/explain-9.png" alt="explain-9"></p><p><strong>range</strong>：范围扫描通常出现在 <code>in(), between ,&gt; ,&lt;, &gt;=</code> 等操作中。使用一个索引来检索给定范围的行。</p><p><img src="/images/mysql/explain-10.png" alt="explain-10"></p><p><strong>index</strong>：扫描全索引就能拿到结果，一般是扫描某个二级索引，这种扫描不会从索引树根节点开始快速查找，而是直接对二级索引的叶子节点遍历和扫描，速度还是比较慢的，这种查询一般为使用覆盖索引，二级索引一般比较小，所以这种通常比ALL快一些。</p><p><img src="/images/mysql/explain-11.png" alt="explain-11"></p><p><strong>ALL</strong>：即全表扫描，扫描你的聚簇索引的所有叶子节点。通常情况下这需要增加索引来进行优化。</p><p><img src="/images/mysql/explain-12.png" alt="explain-12"></p><p><strong>6. possible_keys列</strong></p><p>这一列显示查询可能使用哪些索引来查找。 </p><p>explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中数据不多，mysql认为索引对此查询帮助不大，选择了全表查询。 </p><p>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查 where 子句看是否可以创造一个适当的索引来提高查询性能，然后用 explain 查看效果。</p><p> <strong>7.key列</strong> </p><p>这一列显示mysql实际采用哪个索引来优化对该表的访问。 如果没有使用索引，则该列是 NULL。如果想强制mysql使用或忽视possible_keys列中的索引，在查询中使用 force index、ignore index。</p><p><strong>8.key_len列</strong> </p><p>这一列显示了mysql在索引里使用的字节数，通过这个值可以算出具体使用了索引中的哪些列。 </p><p>举例来说，film_actor的联合索引 idx_film_actor_id 由 film_id 和 actor_id 两个int列组成，并且每个int是4字节。通过结果中的key_len=4可推断出查询使用了第一个列：film_id列来执行索引查找。</p><p><img src="/images/mysql/explain-13.png" alt="explain-13"></p><p>key_len计算规则如下： </p><ul><li><p>字符串，char(n)和varchar(n)，5.0.3以后版本中，<strong>n均代表字符数，而不是字节数</strong>，如果是utf-8，一个数字或字母占1个字节，一个汉字占3个字节 </p></li><li><ul><li>char(n)：如果存汉字长度就是 3n 字节</li></ul></li><li><ul><li>varchar(n)：如果存汉字则长度是 3n + 2 字节，加的2字节用来存储字符串长度，因为varchar是变长字符串</li></ul></li><li><p>数值类型 </p></li><li><ul><li>tinyint：1字节 </li><li>smallint：2字节 </li><li>int：4字节 </li><li>bigint：8字节</li></ul></li></ul><p>　</p><ul><li><p>时间类型　 </p></li><li><ul><li>date：3字节 </li><li>timestamp：4字节</li><li>datetime：8字节</li></ul></li><li><p>如果字段允许为 NULL，需要1字节记录是否为 NULL</p></li></ul><p>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索 引。</p><p><strong>9. ref列</strong> </p><p>这一列显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常量），字段名（例：film.id） </p><p><strong>10. rows列</strong> </p><p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。 </p><p><strong>11.filtered 列</strong> </p><p>该列是一个百分比的值，rows * filtered/100 可以估算出将要和 explain 中前一个表进行连接的行数（前一个表指 explain 中的id值比当前表id值小的表）。</p><p><strong>12. Extra列</strong> </p><p>这一列展示的是额外信息。常见的重要值如下： </p><p>1）<strong>Using index：</strong>使用覆盖索引 </p><p>覆盖索引定义：mysql执行计划explain结果里的key有使用索引，如果select后面查询的字段都可以从这个索引的树中获取，这种情况一般可以说是用到了覆盖索引，extra里一般都有using index；覆盖索引一般针对的是辅助索引，整个查询结果只通过辅助索引就能拿到结果，不需要通过辅助索引树找到主键，再通过主键去主键索引树里获取其它字段值</p><p><img src="/images/mysql/explain-14.png" alt="explain-14"></p><p>2）<strong>Using where：</strong>使用 where 语句来处理结果，并且查询的列未被索引覆盖</p><p><img src="/images/mysql/explain-15.png" alt="explain-15"></p><p>3）<strong>Using index condition：</strong>查询的列不完全被索引覆盖，where条件中是一个前导列的范围；</p><p><img src="/images/mysql/explain-16.png" alt="explain-16"></p><p>4）<strong>Using temporary：</strong>mysql需要创建一张临时表来处理查询。出现这种情况一般是要进行优化的，首先是想到用索引来优化。</p><ol><li><p>actor.name没有索引，此时创建了张临时表来distinct</p><p><img src="/images/mysql/explain-17.png" alt="explain-17"></p></li><li><p>film.name建立了idx_name索引，此时查询时extra是using index,没有用临时表</p><p><img src="/images/mysql/explain-18.png" alt="explain-18"></p></li></ol><p>5）<strong>Using filesort：</strong>将用外部排序而不是索引排序，数据较小时从内存排序，否则需要在磁盘完成排序。这种情况下一般也是要考虑使用索引来优化的。</p><ol><li><p>actor.name未创建索引，会浏览actor整个表，保存排序关键字name和对应的id，然后排序name并检索行记录</p><p><img src="/images/mysql/explain-19.png" alt="explain-19"></p></li><li><p>film.name建立了idx_name索引,此时查询时extra是using index</p><p><img src="/images/mysql/explain-20.png" alt="explain-20"></p></li></ol><p>6）<strong>Select tables optimized away：</strong>使用某些聚合函数（比如 max、min）来访问存在索引的某个字段是</p><p><img src="/images/mysql/explain-21.png" alt="explain-21"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-索引篇</title>
      <link href="/posts/mysql-family/1/"/>
      <url>/posts/mysql-family/1/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要学习MySQL？"><a href="#为什么要学习MySQL？" class="headerlink" title="为什么要学习MySQL？"></a>为什么要学习MySQL？</h4><p>目前互联网公司多数都在使用，MySQL的数据结构和一些设计思想很值得学习，面试必问…</p><p>思考：生产上遇到的慢查询/慢SQL查询，解决方法通常是添加索引，添加索引后查询速度可以提升几个数量级怎么做到的？正常一条SQL执行速度是几十毫秒或者几百毫秒，慢SQL执行几秒甚至几十秒肯定是不合理的。</p><p>想要学好MySQL首先要理解<code>索引</code>的概念，索引可以帮助MySQL高效查找数据，是一个<font color="red">排好序</font>的<font color="red">数据结构</font>（排好序体现在从左到右依次递增）。</p><p>国外的一个数据结构图示化网址：<a href="https://www.cs.usfca.edu/~galles/visualization/">https://www.cs.usfca.edu/~galles/visualization/</a></p><span id="more"></span><h4 id="索引的数据结构有很多："><a href="#索引的数据结构有很多：" class="headerlink" title="索引的数据结构有很多："></a>索引的数据结构有很多：</h4><ul><li>二叉树</li></ul><p>也叫折半查找，可以快速定位到数据。特点是右子节点的数据一定大于父节点的数据，左子节点的数据一定小于父节点的数据。缺点是由于每个节点只保存单个数据，所以数据量越大树的高度就会越高，查询次数越多查询效率会变低，极端情况例如所有数据都在节点的同一侧，查询类似逐行查找效率很低。</p><p><img src="/images/mysql/BinarySearchTree.png" alt="Binary Search Tree"></p><ul><li>红黑树</li></ul><p>也叫二叉平衡树，在二叉树的基础上做了优化。当节点左右两侧树的高度相差较多时自动做平衡，可以提高一定的查询性能，同时在平衡过程中会带来一定的消耗（左旋右旋等）。数据量大时，同样有树的高度变高导致查询次数多而效率低的问题。Hashmap在1.8版本做了优化，数据结构改为数组＋链表和红黑树，后续再做详细总结。</p><p><img src="/images/mysql/RedBlackTree.png" alt="Red/Black Tree"></p><ul><li>hash</li></ul><p>对于等值查询支持良好，不支持范围查找。对索引键做hash运算后维护到hash表（hash表中保存磁盘文件的地址）中，并关联到数据在磁盘中的地址，可以一次快速查找到目标数据。MySQL实现了自己的hash算法（常见的MD5、CRC16、CRC32等都是hash算法），发生hash冲突时数据在hash桶后面追加。</p><ul><li>B-树</li></ul><p>思考：在红黑树的基础上，横向保存的节点越多，是不是就意味着树的高度越低？</p><p>单个节点可以保存更多的数据。数据量大时，可以明显的降低树的高度，减少查询次数从而提高性能。</p><p>特点：叶子节点具有相同的深度，且指针为空；所有索引元素不重复；节点的数据索引左到右依次递增。</p><p><img src="/images/mysql/BTrees.png" alt="B Trees"></p><p>MySQL的B-树：</p><p><img src="/images/mysql/MySQLBTree.png" alt="MySQL B Trees"></p><ul><li>B+树</li></ul><p>MySQL索引没有选择纯粹的B-树，而是对其进行优化，使用B＋树（B-树变种）作为底层的数据结构，B＋树这种数据结构数据量越大性能提升的越明显。</p><p>B＋树的叶子节点（磁盘页）保存着多条索引和数据，把每个叶子节点上的第一个索引提取出来作为冗余保存在非叶子节点中，非叶子节点大小固定且只保存索引（严格上还有和叶子节点关联的指针），非叶子节点保存更多的索引理论上就代表可以保存更多的数据。</p><p>特点：非叶子节点不存储data，只保存冗余索引，可保存更多索引；叶子节点包含所有索引字段；叶子节点用指针连接，提高区间访问性能。</p><p><img src="/images/mysql/B+Trees.png" alt="B+Trees"></p><p>MySQL的B+树：</p><p><img src="/images/mysql/MySQLB+Trees.png" alt="MySQL B+Trees"></p><p>MySQL对B+树同样做了优化：叶子节点间使用的是双向指针，B+树原本使用的是单向指针</p><p>B＋树相对B-树做了哪些优化？</p><p>a）B＋树的非叶子节点只保存索引，而B-树的非叶子节点保存索引和数据。B+树的叶子节点包含所有的索引元素</p><p>b）B＋树相邻的叶子节点之间有双向的指针，保存相邻节点的磁盘地址，范围查找更友好</p><p>补充：MySQL的数据是保存在磁盘中，存储位置在磁盘中随机，取决于写数据时通过磁道写入的磁盘位置。查询数据时的性能消耗主要发生在磁盘IO，当查找数据时从根节点开始，将磁盘页load到内存中和查询条件比较，把满足条件的下一个磁盘页load到内存中再次比较查找，重复操作最终找到目标数据。</p><p>个人理解：树的高度越低，磁盘页load到内存的次数越少，IO少了所以性能会更高。</p><p>优化：所有的根节点作为常驻内存保存。非叶子节点也可以作为内存进行保存。</p><h4 id="为什么MySQL选择B-树而不是B-树？"><a href="#为什么MySQL选择B-树而不是B-树？" class="headerlink" title="为什么MySQL选择B+树而不是B-树？"></a>为什么MySQL选择B+树而不是B-树？</h4><p>每个节点（磁盘页）大小的选择是有讲究的，默认为16kb大小（16384b），大小可以修改但是不推荐。</p><p>数据表中每一行的数据通常不会超过1kb（按照表中几十个字段估算，没有文本格式大文件的情况），这样每个叶子节点可以保存16条数据</p><p>使用B-树时：非叶子节点同样保存data数据，<code>数据总量 = 16 ^ n </code>，其中n代表树的高度</p><p>使用B+树时：B+树的非叶子节点保存的是索引（按大点算bigint格式占8字节）和指向下一个磁盘页的指针地址（C语言实现约占6字节），这样非叶子节点可以保存的索引个数约为：<code>16384 / (8+6) = 1170</code>，三层高度的树可以保存数据总量约为：<code>1170 * 1170 * 16</code>，两千万+数据</p><p>B+树的高度是由非叶子节点存放的元素个数决定的，存放的越多树的高度越低，查询效率也就越高（load到内存的I/O次数少）。显然相同数据量的情况下，B+树的高度远远小于B-树，性能更高</p><h4 id="InnoDB索引（聚集）和MyISAM索引（非聚集）："><a href="#InnoDB索引（聚集）和MyISAM索引（非聚集）：" class="headerlink" title="InnoDB索引（聚集）和MyISAM索引（非聚集）："></a>InnoDB索引（聚集）和MyISAM索引（非聚集）：</h4><p>InnoDB存储引擎保存的索引和数据在同一个文件中 .ibd</p><p>MyISAM存储引擎保存的索引和数据在不同的文件中 .MYD 和 .MYI</p><p>注意：存储引擎描述的是数据表而不是描述数据据，最终生效的肯定是修饰数据表的存储引擎</p><p>存储引擎和磁盘保存文件格式的关系：</p><p><img src="/images/mysql/datasave.png" alt="datasave"></p><h4 id="为什么DBA推荐创建InnoDB存储引擎的表时必须创建主键？"><a href="#为什么DBA推荐创建InnoDB存储引擎的表时必须创建主键？" class="headerlink" title="为什么DBA推荐创建InnoDB存储引擎的表时必须创建主键？"></a>为什么DBA推荐创建InnoDB存储引擎的表时必须创建主键？</h4><p>开发人员在设计InnoDB表的时候，ibd文件必须要用一个B+树的数据文件来组织</p><p>表自带主键索引的情况，直接用主键索引来组织整张表的所有数据</p><p>不创建主键时，从表的第一列开始选择所有数据都不相等的列来组织B+树</p><p>如果选不到，MySQL会创建一个隐藏列来组织整张表的数据</p><p>为了减少MySQL的工作量，索引应该由我们程序员提前创建好</p><h4 id="为什么DBA推荐创建InnoDB存储引擎的表时使用整型的自增主键？"><a href="#为什么DBA推荐创建InnoDB存储引擎的表时使用整型的自增主键？" class="headerlink" title="为什么DBA推荐创建InnoDB存储引擎的表时使用整型的自增主键？"></a>为什么DBA推荐创建InnoDB存储引擎的表时使用整型的自增主键？</h4><p>索引定位查找数据时，都是从根节点开始查找数据并比较</p><p>整型数字的比较速度比字符串（逐个字符比较ASCII码）比较速度快</p><p>另外整型和字符串或者uuid相比，更能节省磁盘空间（通常比较贵SSD）</p><p>索引维护到B+树中会排好序，自增每次新增都添加到树的最后，减少树的分裂和平衡</p><h4 id="InnoDb存储引擎的主键索引树和二级索引树的区别？"><a href="#InnoDb存储引擎的主键索引树和二级索引树的区别？" class="headerlink" title="InnoDb存储引擎的主键索引树和二级索引树的区别？"></a>InnoDb存储引擎的主键索引树和二级索引树的区别？</h4><p>主键索引树的叶子节点保存表中所有的数据</p><p>二级索引树的叶子节点保存组织整张表数据的聚集索引的值（通常是主键，也可能是MySQL选择的列或者隐藏列rowid）</p><p>MySQL这样设计可以减少数据的冗余节省存储空间，也保证了数据的一致性减少复杂度</p><p>二级索引查找数据时，是先找到主键索引，再通过主键索引回表到聚簇索引上面找到目标数据</p><p>二级索引其实也是稀疏的，是非聚簇索引</p><p><strong>联合索引：</strong>多个字段共同组织成一个索引</p><p>理想情况是通过1到3个联合索引把业务上80%的查询覆盖到，在加上几个单值索引覆盖剩余的业务</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YeahWorld</title>
      <link href="/posts/blog-get//"/>
      <url>/posts/blog-get//</url>
      
        <content type="html"><![CDATA[<blockquote><p>距上次写Blog 近一年，由于最近换新工作，换了工作电脑所以决定切换主题从心开始</p></blockquote><br><p>0、安装Hexo前置条件：<code>Node.js</code> 和 <code>Git</code> 安装完成</p><p>（node -v，npm -v，git –version查看是否已安装）</p><p><code>Node.js</code> 和 <code>Git</code> 没有安装的同学请自行查找安装方法，资料很多且不复杂</p><br><p>1、安装Hexo客户端命令：<code>npm install -g hexo-cli</code></p><p>问题：执行上述安装Hexo命令，窗口提示 <font color="red">idealTree:npm: sill idealTree buildDeps</font></p> <span id="more"></span> <p>解决：(产生问题的原因是，国外镜像链接失败)</p><pre class=" language-java"><code class="language-java"># 设置为国内的阿里镜像npm config set registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org# 检查阿里镜像是否设置成功npm config get registry# 镜像设置成功后展示如下https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span></code></pre><p>切换镜像后，重新执行安装客户端命令，执行成功！</p><br><p>2、Hexo安装完成后执行如下命令，Hexo会在<code>&lt;folder&gt;</code>文件夹下创建所需文件：</p><pre class=" language-java"><code class="language-java">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ cd <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ npm install</code></pre><p>进入到 Hexo 安装路径，执行 <code>hexo s</code>命令，启动成功后按照提示访问<code>http://localhost:4000/</code> </p><br><p>3、Hexo常用命令（这里直接拷贝<code>helloworld</code> 中的快速开始）</p><p><strong>Create a new post</strong></p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><p><strong>Run server</strong></p><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><p><strong>Generate static files</strong></p><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><p><strong>Deploy to remote sites</strong></p><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info:  <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><br><p>4、Hexo安装完成，首先想到的就是主题。之前使用的是<a href="https://butterfly.js.org/">butterfly</a>主题，尝试过不少美化和特效，现在换成<a href="https://github.com/iissnan/hexo-theme-next/">next</a>主题看起来更加精简，可惜了之前的全局自动播放音乐插件（花了不少时间做好的，心碎~）</p><br><p>5、主题有了，添加背景音乐（情有独钟，因为小时候觉得QQ空间的背景音乐很酷）</p><p>这里笔者使用的是<font color="red">网易云插件的外链</font>来做背景音乐，全局音乐没得问题，可惜进入Blog没有自动播放</p><p>网易云外链获取方式：登录网易云进入目标歌单（或单曲），点击分享 链接使用浏览器打开，生成外链即可</p><p>参考文章：<a href="https://blog.csdn.net/qq_39720594/article/details/105401774">Hexo + Next 主题实现全局播放背景音乐</a></p><p>文中推荐的<font color="red">使用Aplayer + MetingJS插件</font>笔者多次尝试扔没有成功（许是遗漏操作）</p><br><p>6、使用 live2 在页面右下 添加萌娘，简单有趣</p><p>a) 准备工作，执行下面命令</p><pre class=" language-java"><code class="language-java"># 安装 live2 插件npm install <span class="token operator">--</span>save hexo<span class="token operator">-</span>helper<span class="token operator">-</span>live2d# 安装人物模型 https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>xiazeyu<span class="token operator">/</span>live2d<span class="token operator">-</span>widget<span class="token operator">-</span>modelsnpm install live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>koharu</code></pre><p>b) hexo 安装目录<code>_config.yml</code>配置文件添加如下：</p><pre class=" language-java"><code class="language-java">live2d<span class="token operator">:</span>  enable<span class="token operator">:</span> <span class="token boolean">true</span>  scriptFrom<span class="token operator">:</span> local  model<span class="token operator">:</span>     use<span class="token operator">:</span> live2d<span class="token operator">-</span>widget<span class="token operator">-</span>model<span class="token operator">-</span>koharu #模型选择  display<span class="token operator">:</span>     position<span class="token operator">:</span> right  #模型位置    width<span class="token operator">:</span> <span class="token number">150</span>       #模型宽度    height<span class="token operator">:</span> <span class="token number">300</span>      #模型高度  mobile<span class="token operator">:</span>     show<span class="token operator">:</span> <span class="token boolean">false</span>      #是否在手机端显示</code></pre><p>c) 重启验证是否生效：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><br><p>7、参考文章：<a href="https://jlj98.top/hexo-instructions/">Hexo搭建博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 扬帆起航 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
