<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Park&#39;s Blog</title>
  
  <subtitle>海边微风起，等风也等你</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-12T17:16:09.991Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>忘川</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL-优化三</title>
    <link href="http://example.com/posts/mysql-family/6/"/>
    <id>http://example.com/posts/mysql-family/6/</id>
    <published>2023-09-11T16:00:00.000Z</published>
    <updated>2023-09-12T17:16:09.991Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;分页查询优化&quot;&gt;&lt;a href=&quot;#分页查询优化&quot; class=&quot;headerlink&quot; title=&quot;分页查询优化&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;分页查询优化&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;预置表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE TABLE `employees` (
    `id` INT ( 11 ) NOT NULL AUTO_INCREMENT,
    `name` VARCHAR ( 24 ) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;姓名&#39;,
    `age` INT ( 11 ) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;年龄&#39;,
    `position` VARCHAR ( 20 ) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;职位&#39;,
    `hire_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;入职时间&#39;,
    PRIMARY KEY ( `id` ),
    KEY `idx_name_age_position` ( `name`, `age`, `position` ) USING BTREE 
) ENGINE = INNODB DEFAULT CHARSET = utf8 COMMENT = &#39;员工记录表&#39;;

drop procedure if exists insert_emp; 
delimiter ;;
create procedure insert_emp()        
begin
  declare i int;                    
  set i=1;                          
  while(i&amp;lt;=100000)do                 
    insert into employees(name,age,position) values(CONCAT(&#39;gax&#39;,i),i,&#39;dev&#39;);  
    set i=i+1;                       
  end while;
end;;
delimiter ;
call insert_emp();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分析业务上可能遇到的分页SQL：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select * from employees limit 10000,10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表示从表 employees 中取出从 10001 行开始的 10 行记录。看似只查询了 10 条记录，实际这条 SQL 是先读取 10010 条记录，然后抛弃前 10000 条记录，然后读到后面 10 条想要的数据。因此要查询一张大表比较靠后的数据，执行效率是非常低的。&lt;/p&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-优化二</title>
    <link href="http://example.com/posts/mysql-family/5/"/>
    <id>http://example.com/posts/mysql-family/5/</id>
    <published>2023-09-10T16:00:00.000Z</published>
    <updated>2023-09-12T15:55:56.123Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;常见sql深入优化&quot;&gt;&lt;a href=&quot;#常见sql深入优化&quot; class=&quot;headerlink&quot; title=&quot;常见sql深入优化&quot;&gt;&lt;/a&gt;常见sql深入优化&lt;/h2&gt;&lt;h3 id=&quot;Order-by与Group-by优化&quot;&gt;&lt;a href=&quot;#Order-by与Group-by优化&quot; class=&quot;headerlink&quot; title=&quot;Order by与Group by优化&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;Order by与Group by优化&lt;/font&gt;&lt;/h3&gt;&lt;p&gt;Case1：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mysql/opt2-1.png&quot; alt=&quot;opt2-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;分析： 利用最左前缀法则：中间字段不能断，因此查询用到了&lt;strong&gt;name索引&lt;/strong&gt;，从key_len=74也能看出，age索引列用在&lt;strong&gt;排序&lt;/strong&gt;过程中，因为Extra字段里&lt;strong&gt;没有using filesort&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-优化一</title>
    <link href="http://example.com/posts/mysql-family/4/"/>
    <id>http://example.com/posts/mysql-family/4/</id>
    <published>2023-09-09T16:00:00.000Z</published>
    <updated>2023-09-12T16:07:59.216Z</updated>
    
    
    <summary type="html">&lt;p&gt;预置表数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;CREATE TABLE `employees` (
    `id` INT ( 11 ) NOT NULL AUTO_INCREMENT,
    `name` VARCHAR ( 24 ) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;姓名&#39;,
    `age` INT ( 11 ) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;年龄&#39;,
    `position` VARCHAR ( 20 ) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;职位&#39;,
    `hire_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;入职时间&#39;,
    PRIMARY KEY ( `id` ),
    KEY `idx_name_age_position` ( `name`, `age`, `position` ) USING BTREE 
) ENGINE = INNODB AUTO_INCREMENT = 4 DEFAULT CHARSET = utf8 COMMENT = &#39;员工记录表&#39;;

INSERT INTO employees(name,age,position,hire_time) VALUES(&#39;LiLei&#39;,22,&#39;manager&#39;,NOW());
INSERT INTO employees(name,age,position,hire_time) VALUES(&#39;HanMeimei&#39;, 23,&#39;dev&#39;,NOW());
INSERT INTO employees(name,age,position,hire_time) VALUES(&#39;Lucy&#39;,23,&#39;dev&#39;,NOW());

drop procedure if exists insert_emp; 
delimiter ;;
create procedure insert_emp()        
begin
  declare i int;                    
  set i=1;                          
  while(i&amp;lt;=100000)do                 
    insert into employees(name,age,position) values(CONCAT(&#39;gax&#39;,i),i,&#39;dev&#39;);  
    set i=i+1;                       
  end while;
end;;
delimiter ;
call insert_emp();
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-索引优化实践</title>
    <link href="http://example.com/posts/mysql-family/3/"/>
    <id>http://example.com/posts/mysql-family/3/</id>
    <published>2023-09-08T16:00:00.000Z</published>
    <updated>2023-09-12T16:09:33.069Z</updated>
    
    
    <summary type="html">&lt;p&gt;预置表数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;CREATE TABLE `employees` (
    `id` INT ( 11 ) NOT NULL AUTO_INCREMENT,
    `name` VARCHAR ( 24 ) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;姓名&#39;,
    `age` INT ( 11 ) NOT NULL DEFAULT &#39;0&#39; COMMENT &#39;年龄&#39;,
    `position` VARCHAR ( 20 ) NOT NULL DEFAULT &#39;&#39; COMMENT &#39;职位&#39;,
    `hire_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;入职时间&#39;,
    PRIMARY KEY ( `id` ),
    KEY `idx_name_age_position` ( `name`, `age`, `position` ) USING BTREE 
) ENGINE = INNODB AUTO_INCREMENT = 4 DEFAULT CHARSET = utf8 COMMENT = &#39;员工记录表&#39;;

INSERT INTO employees(name,age,position,hire_time) VALUES(&#39;LiLei&#39;,22,&#39;manager&#39;,NOW());
INSERT INTO employees(name,age,position,hire_time) VALUES(&#39;HanMeimei&#39;, 23,&#39;dev&#39;,NOW());
INSERT INTO employees(name,age,position,hire_time) VALUES(&#39;Lucy&#39;,23,&#39;dev&#39;,NOW());
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-Explain</title>
    <link href="http://example.com/posts/mysql-family/2/"/>
    <id>http://example.com/posts/mysql-family/2/</id>
    <published>2023-09-07T16:00:00.000Z</published>
    <updated>2023-09-12T16:12:08.977Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Explain工具是什么？&quot;&gt;&lt;a href=&quot;#Explain工具是什么？&quot; class=&quot;headerlink&quot; title=&quot;Explain工具是什么？&quot;&gt;&lt;/a&gt;Explain工具是什么？&lt;/h2&gt;&lt;p&gt;是MySQL提供的工具，在select前添加explain关键字，会返回执行计划信息，而不是执行SQL&lt;/p&gt;
&lt;p&gt;可以用来分析SQL的执行情况，比如使用哪些索引，扫描哪些行…&lt;/p&gt;
&lt;p&gt;注意：如果from包含子查询，仍会执行该子查询，查询结果放入到临时表中&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/explain-output.html&quot;&gt;Explain官网入口&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL-索引篇</title>
    <link href="http://example.com/posts/mysql-family/1/"/>
    <id>http://example.com/posts/mysql-family/1/</id>
    <published>2023-09-06T16:00:00.000Z</published>
    <updated>2023-09-12T16:14:17.855Z</updated>
    
    
    <summary type="html">&lt;h4 id=&quot;为什么要学习MySQL？&quot;&gt;&lt;a href=&quot;#为什么要学习MySQL？&quot; class=&quot;headerlink&quot; title=&quot;为什么要学习MySQL？&quot;&gt;&lt;/a&gt;为什么要学习MySQL？&lt;/h4&gt;&lt;p&gt;目前互联网公司多数都在使用，MySQL的数据结构和一些设计思想很值得学习，面试必问…&lt;/p&gt;
&lt;p&gt;思考：生产上遇到的慢查询/慢SQL查询，解决方法通常是添加索引，添加索引后查询速度可以提升几个数量级怎么做到的？正常一条SQL执行速度是几十毫秒或者几百毫秒，慢SQL执行几秒甚至几十秒肯定是不合理的。&lt;/p&gt;
&lt;p&gt;想要学好MySQL首先要理解&lt;code&gt;索引&lt;/code&gt;的概念，索引可以帮助MySQL高效查找数据，是一个&lt;font color=&quot;red&quot;&gt;排好序&lt;/font&gt;的&lt;font color=&quot;red&quot;&gt;数据结构&lt;/font&gt;（排好序体现在从左到右依次递增）。&lt;/p&gt;
&lt;p&gt;国外的一个数据结构图示化网址：&lt;a href=&quot;https://www.cs.usfca.edu/~galles/visualization/&quot;&gt;https://www.cs.usfca.edu/~galles/visualization/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>YeahWorld</title>
    <link href="http://example.com/posts/blog-get/"/>
    <id>http://example.com/posts/blog-get/</id>
    <published>2022-05-18T10:49:19.000Z</published>
    <updated>2022-05-27T11:00:16.313Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;距上次写Blog 近一年，由于最近换新工作，换了工作电脑所以决定切换主题从心开始&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;0、安装Hexo前置条件：&lt;code&gt;Node.js&lt;/code&gt; 和 &lt;code&gt;Git&lt;/code&gt; 安装完成&lt;/p&gt;
&lt;p&gt;（node -v，npm -v，git –version查看是否已安装）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Node.js&lt;/code&gt; 和 &lt;code&gt;Git&lt;/code&gt; 没有安装的同学请自行查找安装方法，资料很多且不复杂&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;1、安装Hexo客户端命令：&lt;code&gt;npm install -g hexo-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题：执行上述安装Hexo命令，窗口提示 &lt;font color=&quot;red&quot;&gt;idealTree:npm: sill idealTree buildDeps&lt;/font&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="扬帆起航" scheme="http://example.com/tags/%E6%89%AC%E5%B8%86%E8%B5%B7%E8%88%AA/"/>
    
  </entry>
  
</feed>
